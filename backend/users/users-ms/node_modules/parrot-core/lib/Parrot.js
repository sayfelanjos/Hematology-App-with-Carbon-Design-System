'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Parrot = function Parrot() {
  var scenarios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  (0, _classCallCheck3.default)(this, Parrot);

  _initialiseProps.call(this);

  this.scenarios = (0, _utils.normalizeScenarios)(scenarios);

  var _Object$keys = (0, _keys2.default)(scenarios);

  var _Object$keys2 = (0, _slicedToArray3.default)(_Object$keys, 1);

  this.activeScenario = _Object$keys2[0];

  _utils.logger.setScenario(this.activeScenario);
}; /*
    * Copyright (c) 2018 American Express Travel Related Services Company, Inc.
    *
    * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
    * in compliance with the License. You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software distributed under the License
    * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
    * or implied. See the License for the specific language governing permissions and limitations under
    * the License.
    */

var _initialiseProps = function _initialiseProps() {
  var _this = this;

  this.getActiveScenario = function () {
    return _this.activeScenario;
  };

  this.setActiveScenario = function (name) {
    _this.activeScenario = name;
    _utils.logger.setScenario(name);
  };

  this.getScenarios = function () {
    return (0, _keys2.default)(_this.scenarios).map(function (name) {
      return { name: name, mocks: _this.scenarios[name] };
    });
  };

  this.setScenarios = function (scenarios) {
    _this.scenarios = (0, _utils.normalizeScenarios)(scenarios);
  };

  this.getScenario = function (name) {
    return _this.scenarios[name];
  };

  this.setScenario = function (name, mocks) {
    var scenarios = (0, _defineProperty3.default)({}, name, mocks);
    _this.scenarios = (0, _extends3.default)({}, _this.scenarios, (0, _utils.normalizeScenarios)(scenarios));
  };

  this.getMock = function (name, index) {
    return _this.scenarios[name][index];
  };

  this.setMock = function (name, index, mock) {
    _this.scenarios[name][index] = mock;
  };

  this.resolve = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      for (var _len = arguments.length, platformRequest = Array(_len), _key = 0; _key < _len; _key++) {
        platformRequest[_key] = arguments[_key];
      }

      var normalizedRequest, resolver, mocks, mock;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              normalizedRequest = _this.normalizeRequest.apply(_this, platformRequest);
              resolver = _this.resolver.apply(_this, platformRequest);
              mocks = _this.scenarios[_this.activeScenario];
              _context.next = 5;
              return (0, _utils.matchMock)(normalizedRequest, platformRequest, mocks);

            case 5:
              mock = _context.sent;
              return _context.abrupt('return', (0, _utils.resolveResponse)(normalizedRequest, platformRequest, mock, resolver));

            case 7:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this);
    }));

    return function () {
      return _ref.apply(this, arguments);
    };
  }();
};

exports.default = Parrot;
module.exports = exports['default'];