apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: contracts-mf-ingress
spec:
  rules:
    - host: contracts-mf.info
      http:
        paths:
          - backend:
              service:
                name: contracts-mf-service
                port:
                  number: 3006
            path: /
            pathType: Prefix
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: contracts-mf-service
  name: contracts-mf-service
spec:
  ports:
    - port: 3006
      protocol: TCP
      targetPort: 3006
  selector:
    app: contracts-mf-deployment
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: contracts-mf-deployment
  name: contracts-mf-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contracts-mf-deployment
  template:
    metadata:
      labels:
        app: contracts-mf-deployment
    spec:
      containers:
        - image: contracts-mf:d0b8def0e143e88ae1658447d32e8812fe9a4872ac1492cdb99125a495085a6a
          imagePullPolicy: Never
          name: contracts-mf
          ports:
            - containerPort: 3006
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: statistics-mf-ingress
spec:
  rules:
    - host: statistics-mf.info
      http:
        paths:
          - backend:
              service:
                name: statistics-mf-service
                port:
                  number: 3005
            path: /
            pathType: Prefix
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: statistics-mf-service
  name: statistics-mf-service
spec:
  ports:
    - port: 3005
      protocol: TCP
      targetPort: 3005
  selector:
    app: statistics-mf-deployment
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: statistics-mf-deployment
  name: statistics-mf-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: statistics-mf-deployment
  template:
    metadata:
      labels:
        app: statistics-mf-deployment
    spec:
      containers:
        - image: statistics-mf:21d193caf9a6044e049ca6ebff497994094afcb2908b52f3ae7b60502cc53af4
          imagePullPolicy: Never
          name: statistics-mf
          ports:
            - containerPort: 3005
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: invoices-mf-ingress
spec:
  rules:
    - host: invoices-mf.info
      http:
        paths:
          - backend:
              service:
                name: invoices-mf-service
                port:
                  number: 3003
            path: /
            pathType: Prefix
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: invoices-mf-service
  name: invoices-mf-service
spec:
  ports:
    - port: 3003
      protocol: TCP
      targetPort: 3003
  selector:
    app: invoices-mf-deployment
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: invoices-mf-deployment
  name: invoices-mf-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: invoices-mf-deployment
  template:
    metadata:
      labels:
        app: invoices-mf-deployment
    spec:
      containers:
        - image: invoices-mf:d857cd5034d5353ab699d9428621d7c0c7fd6a7907815dc548eeecc9abbf0f1a
          imagePullPolicy: Never
          name: invoices-mf
          ports:
            - containerPort: 3003
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: orders-mf-ingress
spec:
  rules:
    - host: orders-mf.info
      http:
        paths:
          - backend:
              service:
                name: orders-mf-service
                port:
                  number: 3004
            path: /
            pathType: Prefix
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: orders-mf-service
  name: orders-mf-service
spec:
  ports:
    - name: orders-mf
      port: 3004
      protocol: TCP
      targetPort: 3004
  selector:
    app: orders-mf-deployment
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: orders-mf-deployment
  name: orders-mf-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: orders-mf-deployment
  template:
    metadata:
      labels:
        app: orders-mf-deployment
    spec:
      containers:
        - image: orders-mf:785d4ee5f68243f32a959267cd6a06dd395ef3e795a40a9ceea26ef61c311bde
          imagePullPolicy: Never
          name: orders-mf
          ports:
            - containerPort: 3004
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: supplies-mf-ingress
spec:
  rules:
    - host: supplies-mf.info
      http:
        paths:
          - backend:
              service:
                name: supplies-mf-service
                port:
                  number: 3002
            path: /
            pathType: Prefix
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: supplies-mf-service
  name: supplies-mf-service
spec:
  ports:
    - port: 3002
      protocol: TCP
      targetPort: 3002
  selector:
    app: supplies-mf-deployment
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: supplies-mf-deployment
  name: supplies-mf-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: supplies-mf-deployment
  template:
    metadata:
      labels:
        app: supplies-mf-deployment
    spec:
      containers:
        - image: supplies-mf:3a7f51a5dc03be62c1c9c8a0fbc036ce169b0d2ade6e7a15ef4d599308f7d7bd
          imagePullPolicy: Never
          name: supplies-mf
          ports:
            - containerPort: 3002
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: customers-and-suppliers-mf-ingress
spec:
  rules:
    - host: customers-and-suppliers-mf.info
      http:
        paths:
          - backend:
              service:
                name: customers-and-suppliers-mf-service
                port:
                  number: 3001
            path: /
            pathType: Prefix
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: customers-and-suppliers-mf-service
  name: customers-and-suppliers-mf-service
spec:
  ports:
    - port: 3001
      protocol: TCP
      targetPort: 3001
  selector:
    app: customers-and-suppliers-mf-deployment
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: customers-and-suppliers-mf-deployment
  name: customers-and-suppliers-mf-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: customers-and-suppliers-mf-deployment
  template:
    metadata:
      labels:
        app: customers-and-suppliers-mf-deployment
    spec:
      containers:
        - image: customers-and-suppliers-mf:c2fc4698a31aa783e9519235b1a9b57ff63209d931ee67f137fed6be70433ee6
          imagePullPolicy: Never
          name: customers-and-suppliers-mf
          ports:
            - containerPort: 3001
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: users-mf-ingress
spec:
  rules:
    - host: users-mf.info
      http:
        paths:
          - backend:
              service:
                name: users-mf-service
                port:
                  number: 3007
            path: /
            pathType: Prefix
---
apiVersion: v1
kind: Service
metadata:
  name: users-mf-service
spec:
  ports:
    - name: users-mf-service
      port: 3007
      protocol: TCP
      targetPort: 3007
  selector:
    app: users-mf-deployment
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: users-mf-deployment
  name: users-mf-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: users-mf-deployment
  template:
    metadata:
      labels:
        app: users-mf-deployment
    spec:
      containers:
        - image: users-mf:e9583d96dfe135304ae4bd3bf551b6c99f6ffe45cb300b96ffbfccbc63015a6a
          imagePullPolicy: Never
          name: users-mf
          ports:
            - containerPort: 3007
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: shell-mf-deployment
  name: shell-mf-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      name: shell-mf-deployment
  template:
    metadata:
      labels:
        name: shell-mf-deployment
    spec:
      containers:
        - image: shell-mf:94cef77a298370bb2230252b277bef7aab9f80d5222635fd79780f81d916aaad
          imagePullPolicy: Never
          name: shell-mf
          ports:
            - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: shell-mf-cluster-ip-service
  name: shell-mf-cluster-ip-service
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    name: shell-mf-deployment
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: shell-mf-node-port-service
  name: shell-mf-node-port-service
spec:
  ports:
    - nodePort: 30000
      port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    name: shell-mf-deployment
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: shell-mf-ingress
spec:
  rules:
    - host: shell-mf.info
      http:
        paths:
          - backend:
              service:
                name: shell-mf-cluster-ip-service
                port:
                  number: 3000
            path: /
            pathType: Prefix
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: contracts-db-service
  name: contracts-db-service
spec:
  ports:
    - nodePort: 30006
      port: 5006
      protocol: TCP
      targetPort: 5432
  selector:
    app: contracts-db-deployment
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: contracts-db-deployment
  name: contracts-db-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contracts-db-deployment
  template:
    metadata:
      labels:
        app: contracts-db-deployment
    spec:
      containers:
        - envFrom:
            - configMapRef:
                name: contracts-db-configmap
          image: bitnami/postgresql
          imagePullPolicy: IfNotPresent
          name: postgresql
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: contracts-db-pvc
---
apiVersion: v1
data:
  POSTGRES_DB: "contracts-db"
  POSTGRES_PASSWORD: "hematologyapp"
  POSTGRES_USER: "hematologyapp"
kind: ConfigMap
metadata:
  labels:
    app: contracts-db-configmap
  name: contracts-db-configmap
---
apiVersion: v1
kind: PersistentVolume
metadata:
  labels:
    app: contracts-db-volume
    type: local
  name: contracts-db-volume
spec:
  accessModes:
    - ReadWriteMany
  capacity:
    storage: 1Gi
  hostPath:
    path: /data/postgresql
  storageClassName: manual
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: contracts-db-pvc
  name: contracts-db-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: manual
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: users-db-cluster-ip-service
  name: users-db-cluster-ip-service
spec:
  ports:
    - port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    app: users-db-deployment
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: users-db-node-port-service
  name: users-db-node-port-service
spec:
  ports:
    - nodePort: 30007
      port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    app: users-db-deployment
  type: NodePort
---
apiVersion: v1
data:
  POSTGRES_DB: "user-db"
  POSTGRES_HOST: "user-db-cluster-ip-service"
  POSTGRES_PASSWORD: "hematologyapp"
  POSTGRES_PORT: "5432"
  POSTGRES_USER: "hematologyapp"
kind: ConfigMap
metadata:
  labels:
    app: users-db-configmap
  name: users-db-configmap
---
apiVersion: v1
kind: PersistentVolume
metadata:
  labels:
    app: users-db-pv
  name: users-db-pv
spec:
  accessModes:
    - ReadWriteMany
  capacity:
    storage: 1Gi
  hostPath:
    path: /data/postgresql
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: users-db-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: manual
  volumeName: users-db-pv
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: users-db-deployment
  name: users-db-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: users-db-deployment
  template:
    metadata:
      labels:
        app: users-db-deployment
    spec:
      containers:
        - envFrom:
            - configMapRef:
                name: users-db-configmap
          image: bitnami/postgresql
          imagePullPolicy: IfNotPresent
          name: postgresql
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: users-db-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: global-store-deployment
  name: global-store-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      name: global-store-deployment
  template:
    metadata:
      labels:
        name: global-store-deployment
    spec:
      containers:
        - image: global-store:719ea5143e786d1a2b30c7f0124f69cf0058677ac04d92b0012965fe8247a441
          imagePullPolicy: Never
          name: global-store
          ports:
            - containerPort: 3008
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: global-store-cluster-ip-service
  name: global-store-cluster-ip-service
spec:
  ports:
    - port: 3008
      protocol: TCP
      targetPort: 3008
  selector:
    name: global-store-deployment
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: global-store-ingress
spec:
  rules:
    - host: global-store.info
      http:
        paths:
          - backend:
              service:
                name: global-store-cluster-ip-service
                port:
                  number: 3008
            path: /
            pathType: Prefix
