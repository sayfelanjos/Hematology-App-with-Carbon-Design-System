import { Selection as D3Selection } from 'd3';
import { ChartModel } from '../model/model';
import { RenderTypes } from '../interfaces/enums';
import { Services } from '../interfaces/services';
export declare class Component {
    type: string;
    renderType: RenderTypes;
    id: string;
    protected parent: D3Selection<SVGGraphicsElement | HTMLDivElement, any, HTMLElement, any> | undefined;
    protected configs: any;
    protected model: ChartModel;
    protected services: Services;
    constructor(model: ChartModel, services: Services, configs?: any);
    init(): void;
    render(animate?: boolean): void;
    destroy(): void;
    setModel(newObj: any): void;
    setServices(newObj: any): void;
    setParent(parent: any): void;
    getParent(): D3Selection<SVGGraphicsElement | HTMLDivElement, any, HTMLElement, any>;
    getComponentContainer(configs?: {
        withinChartClip: boolean;
    }): D3Selection<any, any, Element, any>;
    /**
     * graphs used in combo charts share a model with global options but can receive their own local options.
     * this function retrieves the global options and merges it with any options passed into this
     * component's config.options object.
     */
    getOptions(): any;
}
