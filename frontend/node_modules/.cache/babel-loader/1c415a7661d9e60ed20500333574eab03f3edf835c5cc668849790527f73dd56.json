{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default, { useRef, useState, useContext } from 'react';\nimport { Popover, PopoverContent } from '../Popover/index.js';\nimport { useWindowEvent } from '../../internal/useEvent.js';\nimport { useId } from '../../internal/useId.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { match } from '../../internal/keyboard/match.js';\nimport { Escape } from '../../internal/keyboard/keys.js';\n\n/**\n * Used to render the label for a Toggletip\n */\nfunction ToggletipLabel(_ref) {\n  let {\n    as: BaseComponent = 'span',\n    children,\n    className: customClassName\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx(`${prefix}--toggletip-label`, customClassName);\n  const BaseComponentAsAny = BaseComponent;\n  return /*#__PURE__*/React__default.createElement(BaseComponentAsAny, {\n    className: className\n  }, children);\n}\nToggletipLabel.propTypes = {\n  /**\n   * Provide a custom element or component to render the top-level node for the\n   * component.\n   */\n  as: PropTypes.elementType,\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string\n};\n// Used to coordinate accessibility props between button and content along with\n// the actions to open and close the toggletip\nconst ToggletipContext = /*#__PURE__*/React__default.createContext(undefined);\nfunction useToggletip() {\n  return useContext(ToggletipContext);\n}\n/**\n * Used as a container for the button and content of a toggletip. This component\n * is responsible for coordinating between interactions with the button and the\n * visibility of the content\n */\nfunction Toggletip(_ref2) {\n  let {\n    align,\n    as,\n    className: customClassName,\n    children,\n    defaultOpen = false\n  } = _ref2;\n  const ref = useRef(null);\n  const [open, setOpen] = useState(defaultOpen);\n  const prefix = usePrefix();\n  const id = useId();\n  const className = cx(`${prefix}--toggletip`, customClassName, {\n    [`${prefix}--toggletip--open`]: open\n  });\n  const actions = {\n    toggle: () => {\n      setOpen(!open);\n    },\n    close: () => {\n      setOpen(false);\n    }\n  };\n  const value = {\n    buttonProps: {\n      'aria-expanded': open,\n      'aria-controls': id,\n      onClick: actions.toggle\n    },\n    contentProps: {\n      id\n    }\n  };\n  const onKeyDown = event => {\n    if (open && match(event, Escape)) {\n      actions.close();\n\n      // If the menu is closed while focus is still inside the menu, it should return to the trigger button  (#12922)\n      const button = ref.current?.children[0];\n      if (button instanceof HTMLButtonElement) {\n        button.focus();\n      }\n    }\n  };\n  const handleBlur = event => {\n    // Do not close if the menu itself is clicked, should only close on focus out\n    if (open && event.relatedTarget === null) {\n      return;\n    }\n    if (!event.currentTarget.contains(event.relatedTarget)) {\n      // The menu should be closed when focus leaves the `Toggletip`  (#12922)\n      actions.close();\n    }\n  };\n\n  // If the `Toggletip` is the last focusable item in the tab order, it shoudl also close when the browser window loses focus  (#12922)\n  useWindowEvent('blur', () => {\n    if (open) {\n      actions.close();\n    }\n  });\n  useWindowEvent('click', event => {\n    if (open && ref.current && !ref.current.contains(event.target)) {\n      actions.close();\n    }\n  });\n  return /*#__PURE__*/React__default.createElement(ToggletipContext.Provider, {\n    value: value\n  }, /*#__PURE__*/React__default.createElement(Popover, {\n    align: align,\n    as: as,\n    caret: true,\n    className: className,\n    dropShadow: false,\n    highContrast: true,\n    open: open,\n    onKeyDown: onKeyDown,\n    onBlur: handleBlur,\n    ref: ref\n  }, children));\n}\nToggletip.propTypes = {\n  /**\n   * Specify how the toggletip should align with the button\n   */\n  align: PropTypes.oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top']),\n  /**\n   * Provide a custom element or component to render the top-level node for the\n   * component.\n   */\n  as: PropTypes.elementType,\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string,\n  /**\n   * Specify if the toggletip should be open by default\n   */\n  defaultOpen: PropTypes.bool\n};\n/**\n * `ToggletipButton` controls the visibility of the Toggletip through mouse\n * clicks and keyboard interactions.\n */\nfunction ToggletipButton(_ref3) {\n  let {\n    children,\n    className: customClassName,\n    label = 'Show information'\n  } = _ref3;\n  const toggletip = useToggletip();\n  const prefix = usePrefix();\n  const className = cx(`${prefix}--toggletip-button`, customClassName);\n  return /*#__PURE__*/React__default.createElement(\"button\", _extends({}, toggletip?.buttonProps, {\n    \"aria-label\": label,\n    type: \"button\",\n    className: className\n  }), children);\n}\nToggletipButton.propTypes = {\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string,\n  /**\n   * Provide an accessible label for this button\n   */\n  label: PropTypes.string\n};\n/**\n * `ToggletipContent` is a wrapper around `PopoverContent`. It places the\n * `children` passed in as a prop inside of `PopoverContent` so that they will\n * be rendered inside of the popover for this component.\n */\nfunction ToggletipContent(_ref4) {\n  let {\n    children,\n    className: customClassName\n  } = _ref4;\n  const toggletip = useToggletip();\n  const prefix = usePrefix();\n  return /*#__PURE__*/React__default.createElement(PopoverContent, _extends({\n    className: customClassName\n  }, toggletip?.contentProps), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--toggletip-content`\n  }, children));\n}\nToggletipContent.propTypes = {\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string\n};\n/**\n * `ToggletipActions` is a container for one or two actions present at the base\n * of a toggletip. It is used for layout of these items.\n */\nfunction ToggletipActions(_ref5) {\n  let {\n    children,\n    className: customClassName\n  } = _ref5;\n  const prefix = usePrefix();\n  const className = cx(`${prefix}--toggletip-actions`, customClassName);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: className\n  }, children);\n}\nToggletipActions.propTypes = {\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string\n};\nexport { Toggletip, ToggletipActions, ToggletipButton, ToggletipContent, ToggletipLabel };","map":{"version":3,"names":["extends","_extends","cx","PropTypes","React__default","useRef","useState","useContext","Popover","PopoverContent","useWindowEvent","useId","usePrefix","match","Escape","ToggletipLabel","_ref","as","BaseComponent","children","className","customClassName","prefix","BaseComponentAsAny","createElement","propTypes","elementType","node","string","ToggletipContext","createContext","undefined","useToggletip","Toggletip","_ref2","align","defaultOpen","ref","open","setOpen","id","actions","toggle","close","value","buttonProps","onClick","contentProps","onKeyDown","event","button","current","HTMLButtonElement","focus","handleBlur","relatedTarget","currentTarget","contains","target","Provider","caret","dropShadow","highContrast","onBlur","oneOf","bool","ToggletipButton","_ref3","label","toggletip","type","ToggletipContent","_ref4","ToggletipActions","_ref5"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/Toggletip/index.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default, { useRef, useState, useContext } from 'react';\nimport { Popover, PopoverContent } from '../Popover/index.js';\nimport { useWindowEvent } from '../../internal/useEvent.js';\nimport { useId } from '../../internal/useId.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { match } from '../../internal/keyboard/match.js';\nimport { Escape } from '../../internal/keyboard/keys.js';\n\n/**\n * Used to render the label for a Toggletip\n */\nfunction ToggletipLabel(_ref) {\n  let {\n    as: BaseComponent = 'span',\n    children,\n    className: customClassName\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx(`${prefix}--toggletip-label`, customClassName);\n  const BaseComponentAsAny = BaseComponent;\n  return /*#__PURE__*/React__default.createElement(BaseComponentAsAny, {\n    className: className\n  }, children);\n}\nToggletipLabel.propTypes = {\n  /**\n   * Provide a custom element or component to render the top-level node for the\n   * component.\n   */\n  as: PropTypes.elementType,\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string\n};\n// Used to coordinate accessibility props between button and content along with\n// the actions to open and close the toggletip\nconst ToggletipContext = /*#__PURE__*/React__default.createContext(undefined);\nfunction useToggletip() {\n  return useContext(ToggletipContext);\n}\n/**\n * Used as a container for the button and content of a toggletip. This component\n * is responsible for coordinating between interactions with the button and the\n * visibility of the content\n */\nfunction Toggletip(_ref2) {\n  let {\n    align,\n    as,\n    className: customClassName,\n    children,\n    defaultOpen = false\n  } = _ref2;\n  const ref = useRef(null);\n  const [open, setOpen] = useState(defaultOpen);\n  const prefix = usePrefix();\n  const id = useId();\n  const className = cx(`${prefix}--toggletip`, customClassName, {\n    [`${prefix}--toggletip--open`]: open\n  });\n  const actions = {\n    toggle: () => {\n      setOpen(!open);\n    },\n    close: () => {\n      setOpen(false);\n    }\n  };\n  const value = {\n    buttonProps: {\n      'aria-expanded': open,\n      'aria-controls': id,\n      onClick: actions.toggle\n    },\n    contentProps: {\n      id\n    }\n  };\n  const onKeyDown = event => {\n    if (open && match(event, Escape)) {\n      actions.close();\n\n      // If the menu is closed while focus is still inside the menu, it should return to the trigger button  (#12922)\n      const button = ref.current?.children[0];\n      if (button instanceof HTMLButtonElement) {\n        button.focus();\n      }\n    }\n  };\n  const handleBlur = event => {\n    // Do not close if the menu itself is clicked, should only close on focus out\n    if (open && event.relatedTarget === null) {\n      return;\n    }\n    if (!event.currentTarget.contains(event.relatedTarget)) {\n      // The menu should be closed when focus leaves the `Toggletip`  (#12922)\n      actions.close();\n    }\n  };\n\n  // If the `Toggletip` is the last focusable item in the tab order, it shoudl also close when the browser window loses focus  (#12922)\n  useWindowEvent('blur', () => {\n    if (open) {\n      actions.close();\n    }\n  });\n  useWindowEvent('click', event => {\n    if (open && ref.current && !ref.current.contains(event.target)) {\n      actions.close();\n    }\n  });\n  return /*#__PURE__*/React__default.createElement(ToggletipContext.Provider, {\n    value: value\n  }, /*#__PURE__*/React__default.createElement(Popover, {\n    align: align,\n    as: as,\n    caret: true,\n    className: className,\n    dropShadow: false,\n    highContrast: true,\n    open: open,\n    onKeyDown: onKeyDown,\n    onBlur: handleBlur,\n    ref: ref\n  }, children));\n}\nToggletip.propTypes = {\n  /**\n   * Specify how the toggletip should align with the button\n   */\n  align: PropTypes.oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top']),\n  /**\n   * Provide a custom element or component to render the top-level node for the\n   * component.\n   */\n  as: PropTypes.elementType,\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string,\n  /**\n   * Specify if the toggletip should be open by default\n   */\n  defaultOpen: PropTypes.bool\n};\n/**\n * `ToggletipButton` controls the visibility of the Toggletip through mouse\n * clicks and keyboard interactions.\n */\nfunction ToggletipButton(_ref3) {\n  let {\n    children,\n    className: customClassName,\n    label = 'Show information'\n  } = _ref3;\n  const toggletip = useToggletip();\n  const prefix = usePrefix();\n  const className = cx(`${prefix}--toggletip-button`, customClassName);\n  return /*#__PURE__*/React__default.createElement(\"button\", _extends({}, toggletip?.buttonProps, {\n    \"aria-label\": label,\n    type: \"button\",\n    className: className\n  }), children);\n}\nToggletipButton.propTypes = {\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string,\n  /**\n   * Provide an accessible label for this button\n   */\n  label: PropTypes.string\n};\n/**\n * `ToggletipContent` is a wrapper around `PopoverContent`. It places the\n * `children` passed in as a prop inside of `PopoverContent` so that they will\n * be rendered inside of the popover for this component.\n */\nfunction ToggletipContent(_ref4) {\n  let {\n    children,\n    className: customClassName\n  } = _ref4;\n  const toggletip = useToggletip();\n  const prefix = usePrefix();\n  return /*#__PURE__*/React__default.createElement(PopoverContent, _extends({\n    className: customClassName\n  }, toggletip?.contentProps), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--toggletip-content`\n  }, children));\n}\nToggletipContent.propTypes = {\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string\n};\n/**\n * `ToggletipActions` is a container for one or two actions present at the base\n * of a toggletip. It is used for layout of these items.\n */\nfunction ToggletipActions(_ref5) {\n  let {\n    children,\n    className: customClassName\n  } = _ref5;\n  const prefix = usePrefix();\n  const className = cx(`${prefix}--toggletip-actions`, customClassName);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: className\n  }, children);\n}\nToggletipActions.propTypes = {\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string\n};\n\nexport { Toggletip, ToggletipActions, ToggletipButton, ToggletipContent, ToggletipLabel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}