{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport deprecate from '../../prop-types/deprecate.js';\nfunction Loading(_ref) {\n  let {\n    active = true,\n    className: customClassName,\n    withOverlay = true,\n    small = false,\n    description = 'loading',\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const loadingClassName = cx(customClassName, {\n    [`${prefix}--loading`]: true,\n    [`${prefix}--loading--small`]: small,\n    [`${prefix}--loading--stop`]: !active\n  });\n  const overlayClassName = cx({\n    [`${prefix}--loading-overlay`]: true,\n    [`${prefix}--loading-overlay--stop`]: !active\n  });\n  const loading = /*#__PURE__*/React__default.createElement(\"div\", _extends({}, rest, {\n    \"aria-atomic\": \"true\",\n    \"aria-live\": active ? 'assertive' : 'off',\n    className: loadingClassName\n  }), /*#__PURE__*/React__default.createElement(\"svg\", {\n    className: `${prefix}--loading__svg`,\n    viewBox: \"0 0 100 100\"\n  }, /*#__PURE__*/React__default.createElement(\"title\", null, description), small ? /*#__PURE__*/React__default.createElement(\"circle\", {\n    className: `${prefix}--loading__background`,\n    cx: \"50%\",\n    cy: \"50%\",\n    r: \"44\"\n  }) : null, /*#__PURE__*/React__default.createElement(\"circle\", {\n    className: `${prefix}--loading__stroke`,\n    cx: \"50%\",\n    cy: \"50%\",\n    r: \"44\"\n  })));\n  return withOverlay ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: overlayClassName\n  }, loading) : loading;\n}\nLoading.propTypes = {\n  /**\n   * Specify whether you want the loading indicator to be spinning or not\n   */\n  active: PropTypes.bool,\n  /**\n   * Provide an optional className to be applied to the containing node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify a description that would be used to best describe the loading state\n   */\n  description: PropTypes.string,\n  /**\n   * Provide an `id` to uniquely identify the label\n   */\n  id: deprecate(PropTypes.string, `\\nThe prop \\`id\\` is no longer needed.`),\n  /**\n   * Specify whether you would like the small variant of <Loading>\n   */\n  small: PropTypes.bool,\n  /**\n   * Specify whether you want the loader to be applied with an overlay\n   */\n  withOverlay: PropTypes.bool\n};\nexport { Loading as default };","map":{"version":3,"names":["extends","_extends","cx","PropTypes","React__default","usePrefix","deprecate","Loading","_ref","active","className","customClassName","withOverlay","small","description","rest","prefix","loadingClassName","overlayClassName","loading","createElement","viewBox","cy","r","propTypes","bool","string","id","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/Loading/Loading.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport deprecate from '../../prop-types/deprecate.js';\n\nfunction Loading(_ref) {\n  let {\n    active = true,\n    className: customClassName,\n    withOverlay = true,\n    small = false,\n    description = 'loading',\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const loadingClassName = cx(customClassName, {\n    [`${prefix}--loading`]: true,\n    [`${prefix}--loading--small`]: small,\n    [`${prefix}--loading--stop`]: !active\n  });\n  const overlayClassName = cx({\n    [`${prefix}--loading-overlay`]: true,\n    [`${prefix}--loading-overlay--stop`]: !active\n  });\n  const loading = /*#__PURE__*/React__default.createElement(\"div\", _extends({}, rest, {\n    \"aria-atomic\": \"true\",\n    \"aria-live\": active ? 'assertive' : 'off',\n    className: loadingClassName\n  }), /*#__PURE__*/React__default.createElement(\"svg\", {\n    className: `${prefix}--loading__svg`,\n    viewBox: \"0 0 100 100\"\n  }, /*#__PURE__*/React__default.createElement(\"title\", null, description), small ? /*#__PURE__*/React__default.createElement(\"circle\", {\n    className: `${prefix}--loading__background`,\n    cx: \"50%\",\n    cy: \"50%\",\n    r: \"44\"\n  }) : null, /*#__PURE__*/React__default.createElement(\"circle\", {\n    className: `${prefix}--loading__stroke`,\n    cx: \"50%\",\n    cy: \"50%\",\n    r: \"44\"\n  })));\n  return withOverlay ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: overlayClassName\n  }, loading) : loading;\n}\nLoading.propTypes = {\n  /**\n   * Specify whether you want the loading indicator to be spinning or not\n   */\n  active: PropTypes.bool,\n  /**\n   * Provide an optional className to be applied to the containing node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify a description that would be used to best describe the loading state\n   */\n  description: PropTypes.string,\n  /**\n   * Provide an `id` to uniquely identify the label\n   */\n  id: deprecate(PropTypes.string, `\\nThe prop \\`id\\` is no longer needed.`),\n  /**\n   * Specify whether you would like the small variant of <Loading>\n   */\n  small: PropTypes.bool,\n  /**\n   * Specify whether you want the loader to be applied with an overlay\n   */\n  withOverlay: PropTypes.bool\n};\n\nexport { Loading as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,OAAO,IAAIC,QAAQ,QAAQ,6CAA6C;AACjF,OAAOC,EAAE,MAAM,YAAY;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,OAAO;AAClC,SAASC,SAAS,QAAQ,6BAA6B;AACvD,OAAOC,SAAS,MAAM,+BAA+B;AAErD,SAASC,OAAOA,CAACC,IAAI,EAAE;EACrB,IAAI;IACFC,MAAM,GAAG,IAAI;IACbC,SAAS,EAAEC,eAAe;IAC1BC,WAAW,GAAG,IAAI;IAClBC,KAAK,GAAG,KAAK;IACbC,WAAW,GAAG,SAAS;IACvB,GAAGC;EACL,CAAC,GAAGP,IAAI;EACR,MAAMQ,MAAM,GAAGX,SAAS,CAAC,CAAC;EAC1B,MAAMY,gBAAgB,GAAGf,EAAE,CAACS,eAAe,EAAE;IAC3C,CAAE,GAAEK,MAAO,WAAU,GAAG,IAAI;IAC5B,CAAE,GAAEA,MAAO,kBAAiB,GAAGH,KAAK;IACpC,CAAE,GAAEG,MAAO,iBAAgB,GAAG,CAACP;EACjC,CAAC,CAAC;EACF,MAAMS,gBAAgB,GAAGhB,EAAE,CAAC;IAC1B,CAAE,GAAEc,MAAO,mBAAkB,GAAG,IAAI;IACpC,CAAE,GAAEA,MAAO,yBAAwB,GAAG,CAACP;EACzC,CAAC,CAAC;EACF,MAAMU,OAAO,GAAG,aAAaf,cAAc,CAACgB,aAAa,CAAC,KAAK,EAAEnB,QAAQ,CAAC,CAAC,CAAC,EAAEc,IAAI,EAAE;IAClF,aAAa,EAAE,MAAM;IACrB,WAAW,EAAEN,MAAM,GAAG,WAAW,GAAG,KAAK;IACzCC,SAAS,EAAEO;EACb,CAAC,CAAC,EAAE,aAAab,cAAc,CAACgB,aAAa,CAAC,KAAK,EAAE;IACnDV,SAAS,EAAG,GAAEM,MAAO,gBAAe;IACpCK,OAAO,EAAE;EACX,CAAC,EAAE,aAAajB,cAAc,CAACgB,aAAa,CAAC,OAAO,EAAE,IAAI,EAAEN,WAAW,CAAC,EAAED,KAAK,GAAG,aAAaT,cAAc,CAACgB,aAAa,CAAC,QAAQ,EAAE;IACpIV,SAAS,EAAG,GAAEM,MAAO,uBAAsB;IAC3Cd,EAAE,EAAE,KAAK;IACToB,EAAE,EAAE,KAAK;IACTC,CAAC,EAAE;EACL,CAAC,CAAC,GAAG,IAAI,EAAE,aAAanB,cAAc,CAACgB,aAAa,CAAC,QAAQ,EAAE;IAC7DV,SAAS,EAAG,GAAEM,MAAO,mBAAkB;IACvCd,EAAE,EAAE,KAAK;IACToB,EAAE,EAAE,KAAK;IACTC,CAAC,EAAE;EACL,CAAC,CAAC,CAAC,CAAC;EACJ,OAAOX,WAAW,GAAG,aAAaR,cAAc,CAACgB,aAAa,CAAC,KAAK,EAAE;IACpEV,SAAS,EAAEQ;EACb,CAAC,EAAEC,OAAO,CAAC,GAAGA,OAAO;AACvB;AACAZ,OAAO,CAACiB,SAAS,GAAG;EAClB;AACF;AACA;EACEf,MAAM,EAAEN,SAAS,CAACsB,IAAI;EACtB;AACF;AACA;EACEf,SAAS,EAAEP,SAAS,CAACuB,MAAM;EAC3B;AACF;AACA;EACEZ,WAAW,EAAEX,SAAS,CAACuB,MAAM;EAC7B;AACF;AACA;EACEC,EAAE,EAAErB,SAAS,CAACH,SAAS,CAACuB,MAAM,EAAG,wCAAuC,CAAC;EACzE;AACF;AACA;EACEb,KAAK,EAAEV,SAAS,CAACsB,IAAI;EACrB;AACF;AACA;EACEb,WAAW,EAAET,SAAS,CAACsB;AACzB,CAAC;AAED,SAASlB,OAAO,IAAIqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}