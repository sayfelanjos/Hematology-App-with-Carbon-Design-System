{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * @typedef Key\n * @property key {Array<string>|string}\n * @property which {number}\n * @property keyCode {number}\n */\n\n/**\n * Check to see if at least one key code matches the key code of the\n * given event.\n *\n * @example\n * import * as keys from '../keys';\n * import { matches } from '../match';\n *\n * function handleOnKeyDown(event) {\n *   if (matches(event, [keys.Enter, keys.Space]) {\n *     // ...\n *   }\n * }\n *\n * @param {Event|React.SyntheticEvent} event\n * @param {Array<Key>} keysToMatch\n * @returns {boolean}\n */\nfunction matches(event, keysToMatch) {\n  for (var i = 0; i < keysToMatch.length; i++) {\n    if (match(event, keysToMatch[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Check to see if the given key matches the corresponding keyboard event. Also\n * supports passing in the value directly if you can't used the given event.\n *\n * @example\n * import * as keys from '../keys';\n * import { matches } from '../match';\n *\n * function handleOnKeyDown(event) {\n *   if (match(event, keys.Enter) {\n *     // ...\n *   }\n * }\n *\n * @param {React.SyntheticEvent|Event|number|string} eventOrCode\n * @param {Key} key\n * @returns {boolean}\n */\nfunction match(eventOrCode) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    key = _ref.key,\n    which = _ref.which,\n    keyCode = _ref.keyCode,\n    code = _ref.code;\n  if (typeof eventOrCode === 'string') {\n    return eventOrCode === key;\n  }\n  if (typeof eventOrCode === 'number') {\n    return eventOrCode === which || eventOrCode === keyCode;\n  }\n  if (eventOrCode.key && Array.isArray(key)) {\n    return key.indexOf(eventOrCode.key) !== -1;\n  }\n  return eventOrCode.key === key || eventOrCode.which === which || eventOrCode.keyCode === keyCode || eventOrCode.code === code;\n}\nexport { match, matches };","map":{"version":3,"names":["matches","event","keysToMatch","i","length","match","eventOrCode","_ref","arguments","undefined","key","which","keyCode","code","Array","isArray","indexOf"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/internal/keyboard/match.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * @typedef Key\n * @property key {Array<string>|string}\n * @property which {number}\n * @property keyCode {number}\n */\n\n/**\n * Check to see if at least one key code matches the key code of the\n * given event.\n *\n * @example\n * import * as keys from '../keys';\n * import { matches } from '../match';\n *\n * function handleOnKeyDown(event) {\n *   if (matches(event, [keys.Enter, keys.Space]) {\n *     // ...\n *   }\n * }\n *\n * @param {Event|React.SyntheticEvent} event\n * @param {Array<Key>} keysToMatch\n * @returns {boolean}\n */\nfunction matches(event, keysToMatch) {\n  for (let i = 0; i < keysToMatch.length; i++) {\n    if (match(event, keysToMatch[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Check to see if the given key matches the corresponding keyboard event. Also\n * supports passing in the value directly if you can't used the given event.\n *\n * @example\n * import * as keys from '../keys';\n * import { matches } from '../match';\n *\n * function handleOnKeyDown(event) {\n *   if (match(event, keys.Enter) {\n *     // ...\n *   }\n * }\n *\n * @param {React.SyntheticEvent|Event|number|string} eventOrCode\n * @param {Key} key\n * @returns {boolean}\n */\nfunction match(eventOrCode) {\n  let {\n    key,\n    which,\n    keyCode,\n    code\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof eventOrCode === 'string') {\n    return eventOrCode === key;\n  }\n  if (typeof eventOrCode === 'number') {\n    return eventOrCode === which || eventOrCode === keyCode;\n  }\n  if (eventOrCode.key && Array.isArray(key)) {\n    return key.indexOf(eventOrCode.key) !== -1;\n  }\n  return eventOrCode.key === key || eventOrCode.which === which || eventOrCode.keyCode === keyCode || eventOrCode.code === code;\n}\n\nexport { match, matches };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAOA,CAACC,KAAK,EAAEC,WAAW,EAAE;EACnC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,WAAW,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IAC3C,IAAIE,KAAK,CAACJ,KAAK,EAAEC,WAAW,CAACC,CAAC,CAAC,CAAC,EAAE;MAChC,OAAO,IAAI;IACb;EACF;EACA,OAAO,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,KAAKA,CAACC,WAAW,EAAE;EAC1B,IAAAC,IAAA,GAKIC,SAAS,CAACJ,MAAM,GAAG,CAAC,IAAII,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAJxEE,GAAG,GAAAH,IAAA,CAAHG,GAAG;IACHC,KAAK,GAAAJ,IAAA,CAALI,KAAK;IACLC,OAAO,GAAAL,IAAA,CAAPK,OAAO;IACPC,IAAI,GAAAN,IAAA,CAAJM,IAAI;EAEN,IAAI,OAAOP,WAAW,KAAK,QAAQ,EAAE;IACnC,OAAOA,WAAW,KAAKI,GAAG;EAC5B;EACA,IAAI,OAAOJ,WAAW,KAAK,QAAQ,EAAE;IACnC,OAAOA,WAAW,KAAKK,KAAK,IAAIL,WAAW,KAAKM,OAAO;EACzD;EACA,IAAIN,WAAW,CAACI,GAAG,IAAII,KAAK,CAACC,OAAO,CAACL,GAAG,CAAC,EAAE;IACzC,OAAOA,GAAG,CAACM,OAAO,CAACV,WAAW,CAACI,GAAG,CAAC,KAAK,CAAC,CAAC;EAC5C;EACA,OAAOJ,WAAW,CAACI,GAAG,KAAKA,GAAG,IAAIJ,WAAW,CAACK,KAAK,KAAKA,KAAK,IAAIL,WAAW,CAACM,OAAO,KAAKA,OAAO,IAAIN,WAAW,CAACO,IAAI,KAAKA,IAAI;AAC/H;AAEA,SAASR,KAAK,EAAEL,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}