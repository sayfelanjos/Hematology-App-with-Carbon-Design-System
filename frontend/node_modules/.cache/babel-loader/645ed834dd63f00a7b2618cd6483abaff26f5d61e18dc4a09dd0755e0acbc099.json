{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Default implementation of how we filter rows internally. The idea behind this\n * implementation is to use the given list of row ids and headers to get the\n * individual cell values for a row. Then, we go through each cell value and see\n * if any of them includes the given inputValue.\n *\n * @param {object} config\n * @param {Array<string>} config.rowIds array of all the row ids in the table\n * @param {Array<object>} config.headers\n * @param {object} config.cellsById object containing a map of cell id to cell\n * @param {string} config.inputValue the current input value in the Table Search\n * @param {Function} config.getCellId\n * @returns {Array<string>} rowIds\n */\nvar defaultFilterRows = function defaultFilterRows(_ref) {\n  var rowIds = _ref.rowIds,\n    headers = _ref.headers,\n    cellsById = _ref.cellsById,\n    inputValue = _ref.inputValue,\n    getCellId = _ref.getCellId;\n  return rowIds.filter(function (rowId) {\n    return headers.some(function (_ref2) {\n      var key = _ref2.key;\n      var id = getCellId(rowId, key);\n      if (typeof cellsById[id].value === 'boolean') {\n        return false;\n      }\n      return ('' + cellsById[id].value).toLowerCase().includes(inputValue.toLowerCase());\n    });\n  });\n};\nexport { defaultFilterRows };","map":{"version":3,"names":["defaultFilterRows","_ref","rowIds","headers","cellsById","inputValue","getCellId","filter","rowId","some","_ref2","key","id","value","toLowerCase","includes"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/DataTable/tools/filter.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Default implementation of how we filter rows internally. The idea behind this\n * implementation is to use the given list of row ids and headers to get the\n * individual cell values for a row. Then, we go through each cell value and see\n * if any of them includes the given inputValue.\n *\n * @param {object} config\n * @param {Array<string>} config.rowIds array of all the row ids in the table\n * @param {Array<object>} config.headers\n * @param {object} config.cellsById object containing a map of cell id to cell\n * @param {string} config.inputValue the current input value in the Table Search\n * @param {Function} config.getCellId\n * @returns {Array<string>} rowIds\n */\nconst defaultFilterRows = _ref => {\n  let {\n    rowIds,\n    headers,\n    cellsById,\n    inputValue,\n    getCellId\n  } = _ref;\n  return rowIds.filter(rowId => headers.some(_ref2 => {\n    let {\n      key\n    } = _ref2;\n    const id = getCellId(rowId, key);\n    if (typeof cellsById[id].value === 'boolean') {\n      return false;\n    }\n    return ('' + cellsById[id].value).toLowerCase().includes(inputValue.toLowerCase());\n  }));\n};\n\nexport { defaultFilterRows };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAGC,IAAI,EAAI;EAChC,IACEC,MAAM,GAKJD,IAAI,CALNC,MAAM;IACNC,OAAO,GAILF,IAAI,CAJNE,OAAO;IACPC,SAAS,GAGPH,IAAI,CAHNG,SAAS;IACTC,UAAU,GAERJ,IAAI,CAFNI,UAAU;IACVC,SAAS,GACPL,IAAI,CADNK,SAAS;EAEX,OAAOJ,MAAM,CAACK,MAAM,CAAC,UAAAC,KAAK;IAAA,OAAIL,OAAO,CAACM,IAAI,CAAC,UAAAC,KAAK,EAAI;MAClD,IACEC,GAAG,GACDD,KAAK,CADPC,GAAG;MAEL,IAAMC,EAAE,GAAGN,SAAS,CAACE,KAAK,EAAEG,GAAG,CAAC;MAChC,IAAI,OAAOP,SAAS,CAACQ,EAAE,CAAC,CAACC,KAAK,KAAK,SAAS,EAAE;QAC5C,OAAO,KAAK;MACd;MACA,OAAO,CAAC,EAAE,GAAGT,SAAS,CAACQ,EAAE,CAAC,CAACC,KAAK,EAAEC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACV,UAAU,CAACS,WAAW,CAAC,CAAC,CAAC;IACpF,CAAC,CAAC;EAAA,EAAC;AACL,CAAC;AAED,SAASd,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}