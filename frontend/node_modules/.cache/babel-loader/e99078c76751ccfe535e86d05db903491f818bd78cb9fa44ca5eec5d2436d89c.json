{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default, { useRef } from 'react';\nimport cx from 'classnames';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport useIsomorphicEffect from '../../internal/useIsomorphicEffect.js';\nconst randoms = [0.973051493507435, 0.15334737213558558, 0.5671034553053769];\nfunction getRandomInt(min, max, n) {\n  return Math.floor(randoms[n % 3] * (max - min + 1)) + min;\n}\nconst SkeletonText = _ref => {\n  let {\n    paragraph = false,\n    lineCount = 3,\n    width = '100%',\n    heading = false,\n    className = '',\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const skeletonTextClasses = cx({\n    [`${prefix}--skeleton__text`]: true,\n    [`${prefix}--skeleton__heading`]: heading,\n    [className]: className\n  });\n  const widthNum = parseInt(width, 10);\n  const widthPx = width.includes('px');\n  const widthPercent = width.includes('%');\n  let lineCountNumber = 1;\n  if (paragraph) {\n    lineCountNumber = lineCount;\n  }\n  const refs = useRef([]);\n  useIsomorphicEffect(() => {\n    refs.current.map((item, j) => {\n      const randomPercentWidth = getRandomInt(0, 75, j) + 'px';\n      const randomPxWidth = getRandomInt(Math.max(widthNum - 75, 0), widthNum, j) + 'px';\n      if (item) {\n        if (widthPercent && paragraph) {\n          item.style.width = `calc(${width} - ${randomPercentWidth})`;\n        } else if (widthPx && paragraph) {\n          item.style.width = randomPxWidth;\n        } else {\n          item.style.width = width;\n        }\n      }\n    });\n  }, [lineCountNumber, paragraph, refs, width, widthNum, widthPercent, widthPx]);\n  const lines = [];\n  for (let i = 0; i < lineCountNumber; i++) {\n    lines.push( /*#__PURE__*/React__default.createElement(\"p\", _extends({\n      className: skeletonTextClasses,\n      key: i,\n      ref: el => refs.current = [...refs.current, el]\n    }, rest)));\n  }\n  if (lineCountNumber !== 1) {\n    return /*#__PURE__*/React__default.createElement(\"div\", null, lines);\n  }\n\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, lines);\n};\nSkeletonText.propTypes = {\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n  /**\n   * generates skeleton text at a larger size\n   */\n  heading: PropTypes.bool,\n  /**\n   * the number of lines shown if paragraph is true\n   */\n  lineCount: PropTypes.number,\n  /**\n   * will generate multiple lines of text\n   */\n  paragraph: PropTypes.bool,\n  /**\n   * width (in px or %) of single line of text or max-width of paragraph lines\n   */\n  width: PropTypes.string\n};\nSkeletonText.defaultProps = {\n  paragraph: false,\n  width: '100%',\n  heading: false,\n  lineCount: 3\n};\nexport { SkeletonText as default };","map":{"version":3,"names":["extends","_extends","PropTypes","React__default","useRef","cx","usePrefix","useIsomorphicEffect","randoms","getRandomInt","min","max","n","Math","floor","SkeletonText","_ref","paragraph","lineCount","width","heading","className","rest","prefix","skeletonTextClasses","widthNum","parseInt","widthPx","includes","widthPercent","lineCountNumber","refs","current","map","item","j","randomPercentWidth","randomPxWidth","style","lines","i","push","createElement","key","ref","el","Fragment","propTypes","string","bool","number","defaultProps","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/SkeletonText/SkeletonText.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default, { useRef } from 'react';\nimport cx from 'classnames';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport useIsomorphicEffect from '../../internal/useIsomorphicEffect.js';\n\nconst randoms = [0.973051493507435, 0.15334737213558558, 0.5671034553053769];\nfunction getRandomInt(min, max, n) {\n  return Math.floor(randoms[n % 3] * (max - min + 1)) + min;\n}\nconst SkeletonText = _ref => {\n  let {\n    paragraph = false,\n    lineCount = 3,\n    width = '100%',\n    heading = false,\n    className = '',\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const skeletonTextClasses = cx({\n    [`${prefix}--skeleton__text`]: true,\n    [`${prefix}--skeleton__heading`]: heading,\n    [className]: className\n  });\n  const widthNum = parseInt(width, 10);\n  const widthPx = width.includes('px');\n  const widthPercent = width.includes('%');\n  let lineCountNumber = 1;\n  if (paragraph) {\n    lineCountNumber = lineCount;\n  }\n  const refs = useRef([]);\n  useIsomorphicEffect(() => {\n    refs.current.map((item, j) => {\n      const randomPercentWidth = getRandomInt(0, 75, j) + 'px';\n      const randomPxWidth = getRandomInt(Math.max(widthNum - 75, 0), widthNum, j) + 'px';\n      if (item) {\n        if (widthPercent && paragraph) {\n          item.style.width = `calc(${width} - ${randomPercentWidth})`;\n        } else if (widthPx && paragraph) {\n          item.style.width = randomPxWidth;\n        } else {\n          item.style.width = width;\n        }\n      }\n    });\n  }, [lineCountNumber, paragraph, refs, width, widthNum, widthPercent, widthPx]);\n  const lines = [];\n  for (let i = 0; i < lineCountNumber; i++) {\n    lines.push( /*#__PURE__*/React__default.createElement(\"p\", _extends({\n      className: skeletonTextClasses,\n      key: i,\n      ref: el => refs.current = [...refs.current, el]\n    }, rest)));\n  }\n  if (lineCountNumber !== 1) {\n    return /*#__PURE__*/React__default.createElement(\"div\", null, lines);\n  }\n\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, lines);\n};\nSkeletonText.propTypes = {\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n  /**\n   * generates skeleton text at a larger size\n   */\n  heading: PropTypes.bool,\n  /**\n   * the number of lines shown if paragraph is true\n   */\n  lineCount: PropTypes.number,\n  /**\n   * will generate multiple lines of text\n   */\n  paragraph: PropTypes.bool,\n  /**\n   * width (in px or %) of single line of text or max-width of paragraph lines\n   */\n  width: PropTypes.string\n};\nSkeletonText.defaultProps = {\n  paragraph: false,\n  width: '100%',\n  heading: false,\n  lineCount: 3\n};\n\nexport { SkeletonText as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}