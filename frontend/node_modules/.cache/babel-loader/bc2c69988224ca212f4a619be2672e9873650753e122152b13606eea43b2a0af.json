{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default, { useRef, useEffect } from 'react';\nimport cx from 'classnames';\nimport { Close } from '@carbon/icons-react';\nimport toggleClass from '../../tools/toggleClass.js';\nimport Button from '../Button/Button.js';\nimport '../Button/Button.Skeleton.js';\nimport ButtonSet from '../ButtonSet/ButtonSet.js';\nimport requiredIfGivenPropIsTruthy from '../../prop-types/requiredIfGivenPropIsTruthy.js';\nimport wrapFocus, { elementOrParentIsFloatingMenu } from '../../internal/wrapFocus.js';\nimport setupGetInstanceId from '../../tools/setupGetInstanceId.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { match } from '../../internal/keyboard/match.js';\nimport { Escape, Enter } from '../../internal/keyboard/keys.js';\nconst getInstanceId = setupGetInstanceId();\nconst Modal = /*#__PURE__*/React__default.forwardRef(function Modal(_ref, ref) {\n  let {\n    'aria-label': ariaLabelProp,\n    children,\n    className,\n    modalHeading,\n    modalLabel,\n    modalAriaLabel,\n    passiveModal,\n    secondaryButtonText,\n    primaryButtonText,\n    open,\n    onRequestClose,\n    onRequestSubmit,\n    onSecondarySubmit,\n    primaryButtonDisabled,\n    danger,\n    alert,\n    secondaryButtons,\n    selectorPrimaryFocus,\n    // eslint-disable-line\n    selectorsFloatingMenus,\n    // eslint-disable-line\n    shouldSubmitOnEnter,\n    // eslint-disable-line\n    size,\n    hasScrollingContent,\n    closeButtonLabel,\n    preventCloseOnClickOutside,\n    // eslint-disable-line\n    isFullWidth,\n    launcherButtonRef,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const button = useRef();\n  const secondaryButton = useRef();\n  const innerModal = useRef();\n  const startTrap = useRef();\n  const endTrap = useRef();\n  const modalInstanceId = `modal-${getInstanceId()}`;\n  const modalLabelId = `${prefix}--modal-header__label--${modalInstanceId}`;\n  const modalHeadingId = `${prefix}--modal-header__heading--${modalInstanceId}`;\n  const modalBodyId = `${prefix}--modal-body--${modalInstanceId}`;\n  const modalCloseButtonClass = `${prefix}--modal-close`;\n  function isCloseButton(element) {\n    return !onSecondarySubmit && element === secondaryButton.current || element.classList.contains(modalCloseButtonClass);\n  }\n  function handleKeyDown(evt) {\n    if (open) {\n      if (match(evt, Escape)) {\n        onRequestClose(evt);\n      }\n      if (match(evt, Enter) && shouldSubmitOnEnter && !isCloseButton(evt.target)) {\n        onRequestSubmit(evt);\n      }\n    }\n  }\n  function handleMousedown(evt) {\n    if (innerModal.current && !innerModal.current.contains(evt.target) && !elementOrParentIsFloatingMenu(evt.target, selectorsFloatingMenus) && !preventCloseOnClickOutside) {\n      onRequestClose(evt);\n    }\n  }\n  function handleBlur(_ref2) {\n    let {\n      target: oldActiveNode,\n      relatedTarget: currentActiveNode\n    } = _ref2;\n    if (open && currentActiveNode && oldActiveNode) {\n      const {\n        current: bodyNode\n      } = innerModal;\n      const {\n        current: startTrapNode\n      } = startTrap;\n      const {\n        current: endTrapNode\n      } = endTrap;\n      wrapFocus({\n        bodyNode,\n        startTrapNode,\n        endTrapNode,\n        currentActiveNode,\n        oldActiveNode,\n        selectorsFloatingMenus\n      });\n    }\n  }\n  const onSecondaryButtonClick = onSecondarySubmit ? onSecondarySubmit : onRequestClose;\n  const modalClasses = cx(`${prefix}--modal`, {\n    [`${prefix}--modal-tall`]: !passiveModal,\n    'is-visible': open,\n    [`${prefix}--modal--danger`]: danger,\n    [className]: className\n  });\n  const containerClasses = cx(`${prefix}--modal-container`, {\n    [`${prefix}--modal-container--${size}`]: size,\n    [`${prefix}--modal-container--full-width`]: isFullWidth\n  });\n  const contentClasses = cx(`${prefix}--modal-content`, {\n    [`${prefix}--modal-scroll-content`]: hasScrollingContent\n  });\n  const footerClasses = cx(`${prefix}--modal-footer`, {\n    [`${prefix}--modal-footer--three-button`]: Array.isArray(secondaryButtons) && secondaryButtons.length === 2\n  });\n  const ariaLabel = modalLabel || ariaLabelProp || modalAriaLabel || modalHeading;\n  const getAriaLabelledBy = modalLabel ? modalLabelId : modalHeadingId;\n  const hasScrollingContentProps = hasScrollingContent ? {\n    tabIndex: 0,\n    role: 'region',\n    'aria-label': ariaLabel,\n    'aria-labelledby': getAriaLabelledBy\n  } : {};\n  const alertDialogProps = {};\n  if (alert && passiveModal) {\n    alertDialogProps.role = 'alert';\n  }\n  if (alert && !passiveModal) {\n    alertDialogProps.role = 'alertdialog';\n    alertDialogProps['aria-describedby'] = modalBodyId;\n  }\n  useEffect(() => {\n    return () => {\n      toggleClass(document.body, `${prefix}--body--with-modal-open`, false);\n    };\n  }, [prefix]);\n  useEffect(() => {\n    toggleClass(document.body, `${prefix}--body--with-modal-open`, open);\n  }, [open, prefix]);\n  useEffect(() => {\n    if (!open && launcherButtonRef) {\n      setTimeout(() => {\n        launcherButtonRef?.current?.focus();\n      });\n    }\n  }, [open, launcherButtonRef]);\n  useEffect(() => {\n    const initialFocus = focusContainerElement => {\n      const containerElement = focusContainerElement || innerModal.current;\n      const primaryFocusElement = containerElement ? containerElement.querySelector(danger ? `.${prefix}--btn--secondary` : selectorPrimaryFocus) : null;\n      if (primaryFocusElement) {\n        return primaryFocusElement;\n      }\n      return button && button.current;\n    };\n    const focusButton = focusContainerElement => {\n      const target = initialFocus(focusContainerElement);\n      if (target) {\n        target.focus();\n      }\n    };\n    if (open) {\n      focusButton(innerModal.current);\n    }\n  }, [open, selectorPrimaryFocus, danger, prefix]);\n  const modalButton = /*#__PURE__*/React__default.createElement(\"button\", {\n    className: modalCloseButtonClass,\n    type: \"button\",\n    onClick: onRequestClose,\n    title: ariaLabel,\n    \"aria-label\": closeButtonLabel ? closeButtonLabel : 'close',\n    ref: button\n  }, /*#__PURE__*/React__default.createElement(Close, {\n    size: 20,\n    \"aria-hidden\": \"true\",\n    tabIndex: \"-1\",\n    className: `${modalCloseButtonClass}__icon`\n  }));\n  const modalBody = /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    ref: innerModal,\n    role: \"dialog\"\n  }, alertDialogProps, {\n    className: containerClasses,\n    \"aria-label\": ariaLabel,\n    \"aria-modal\": \"true\",\n    tabIndex: \"-1\"\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--modal-header`\n  }, passiveModal && modalButton, modalLabel && /*#__PURE__*/React__default.createElement(\"h2\", {\n    id: modalLabelId,\n    className: `${prefix}--modal-header__label`\n  }, modalLabel), /*#__PURE__*/React__default.createElement(\"h3\", {\n    id: modalHeadingId,\n    className: `${prefix}--modal-header__heading`\n  }, modalHeading), !passiveModal && modalButton), /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    id: modalBodyId,\n    className: contentClasses\n  }, hasScrollingContentProps), children), hasScrollingContent && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--modal-content--overflow-indicator`\n  }), !passiveModal && /*#__PURE__*/React__default.createElement(ButtonSet, {\n    className: footerClasses\n  }, Array.isArray(secondaryButtons) && secondaryButtons.length <= 2 ? secondaryButtons.map((_ref3, i) => {\n    let {\n      buttonText,\n      onClick: onButtonClick\n    } = _ref3;\n    return /*#__PURE__*/React__default.createElement(Button, {\n      key: `${buttonText}-${i}`,\n      kind: \"secondary\",\n      onClick: onButtonClick\n    }, buttonText);\n  }) : secondaryButtonText && /*#__PURE__*/React__default.createElement(Button, {\n    kind: \"secondary\",\n    onClick: onSecondaryButtonClick,\n    ref: secondaryButton\n  }, secondaryButtonText), /*#__PURE__*/React__default.createElement(Button, {\n    kind: danger ? 'danger' : 'primary',\n    disabled: primaryButtonDisabled,\n    onClick: onRequestSubmit,\n    ref: button\n  }, primaryButtonText)));\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({}, rest, {\n    onKeyDown: handleKeyDown,\n    onMouseDown: handleMousedown,\n    onBlur: handleBlur,\n    className: modalClasses,\n    role: \"presentation\",\n    ref: ref\n  }), /*#__PURE__*/React__default.createElement(\"span\", {\n    ref: startTrap,\n    tabIndex: \"0\",\n    role: \"link\",\n    className: `${prefix}--visually-hidden`\n  }, \"Focus sentinel\"), modalBody, /*#__PURE__*/React__default.createElement(\"span\", {\n    ref: endTrap,\n    tabIndex: \"0\",\n    role: \"link\",\n    className: `${prefix}--visually-hidden`\n  }, \"Focus sentinel\"));\n});\nModal.propTypes = {\n  /**\n   * Specify whether the Modal is displaying an alert, error or warning\n   * Should go hand in hand with the danger prop.\n   */\n  alert: PropTypes.bool,\n  /**\n   * Required props for the accessibility label of the header\n   */\n  ['aria-label']: requiredIfGivenPropIsTruthy('hasScrollingContent', PropTypes.string),\n  /**\n   * Provide the contents of your Modal\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the modal root node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify an label for the close button of the modal; defaults to close\n   */\n  closeButtonLabel: PropTypes.string,\n  /**\n   * Specify whether the Modal is for dangerous actions\n   */\n  danger: PropTypes.bool,\n  /**\n   * Specify whether the modal contains scrolling content\n   */\n  hasScrollingContent: PropTypes.bool,\n  /**\n   * Specify the DOM element ID of the top-level node.\n   */\n  id: PropTypes.string,\n  /**\n   * Specify whether or not the Modal content should have any inner padding.\n   */\n  isFullWidth: PropTypes.bool,\n  /**\n   * Provide a ref to return focus to once the modal is closed.\n   */\n  launcherButtonRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.any\n  })]),\n  /**\n   * Specify a label to be read by screen readers on the modal root node\n   */\n  modalAriaLabel: PropTypes.string,\n  /**\n   * Specify the content of the modal header title.\n   */\n  modalHeading: PropTypes.node,\n  /**\n   * Specify the content of the modal header label.\n   */\n  modalLabel: PropTypes.node,\n  /**\n   * Specify a handler for keypresses.\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Specify a handler for closing modal.\n   * The handler should care of closing modal, e.g. changing `open` prop.\n   */\n  onRequestClose: PropTypes.func,\n  /**\n   * Specify a handler for \"submitting\" modal.\n   * The handler should care of closing modal, e.g. changing `open` prop, if necessary.\n   */\n  onRequestSubmit: PropTypes.func,\n  /**\n   * Specify a handler for the secondary button.\n   * Useful if separate handler from `onRequestClose` is desirable\n   */\n  onSecondarySubmit: PropTypes.func,\n  /**\n   * Specify whether the Modal is currently open\n   */\n  open: PropTypes.bool,\n  /**\n   * Specify whether the modal should be button-less\n   */\n  passiveModal: PropTypes.bool,\n  /**\n   * Prevent closing on click outside of modal\n   */\n  preventCloseOnClickOutside: PropTypes.bool,\n  /**\n   * Specify whether the Button should be disabled, or not\n   */\n  primaryButtonDisabled: PropTypes.bool,\n  /**\n   * Specify the text for the primary button\n   */\n  primaryButtonText: PropTypes.node,\n  /**\n   * Specify the text for the secondary button\n   */\n  secondaryButtonText: PropTypes.node,\n  /**\n   * Specify an array of config objects for secondary buttons\n   * (`Array<{\n   *   buttonText: string,\n   *   onClick: function,\n   * }>`).\n   */\n  secondaryButtons: (props, propName, componentName) => {\n    if (props.secondaryButtons) {\n      if (!Array.isArray(props.secondaryButtons) || props.secondaryButtons.length !== 2) {\n        return new Error(`${propName} needs to be an array of two button config objects`);\n      }\n      const shape = {\n        buttonText: PropTypes.node,\n        onClick: PropTypes.func\n      };\n      props[propName].forEach(secondaryButton => {\n        PropTypes.checkPropTypes(shape, secondaryButton, propName, componentName);\n      });\n    }\n    return null;\n  },\n  /**\n   * Specify a CSS selector that matches the DOM element that should\n   * be focused when the Modal opens\n   */\n  selectorPrimaryFocus: PropTypes.string,\n  /**\n   * Specify CSS selectors that match DOM elements working as floating menus.\n   * Focusing on those elements won't trigger \"focus-wrap\" behavior\n   */\n  selectorsFloatingMenus: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Specify if Enter key should be used as \"submit\" action\n   */\n  shouldSubmitOnEnter: PropTypes.bool,\n  /**\n   * Specify the size variant.\n   */\n  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg'])\n};\nModal.defaultProps = {\n  onRequestClose: () => {},\n  onRequestSubmit: () => {},\n  primaryButtonDisabled: false,\n  onKeyDown: () => {},\n  passiveModal: false,\n  modalHeading: '',\n  modalLabel: '',\n  preventCloseOnClickOutside: false,\n  selectorPrimaryFocus: '[data-modal-primary-focus]',\n  hasScrollingContent: false\n};\nvar Modal$1 = Modal;\nexport { Modal$1 as default };","map":{"version":3,"names":["extends","_extends","PropTypes","React__default","useRef","useEffect","cx","Close","toggleClass","Button","ButtonSet","requiredIfGivenPropIsTruthy","wrapFocus","elementOrParentIsFloatingMenu","setupGetInstanceId","usePrefix","match","Escape","Enter","getInstanceId","Modal","forwardRef","_ref","ref","ariaLabelProp","children","className","modalHeading","modalLabel","modalAriaLabel","passiveModal","secondaryButtonText","primaryButtonText","open","onRequestClose","onRequestSubmit","onSecondarySubmit","primaryButtonDisabled","danger","alert","secondaryButtons","selectorPrimaryFocus","selectorsFloatingMenus","shouldSubmitOnEnter","size","hasScrollingContent","closeButtonLabel","preventCloseOnClickOutside","isFullWidth","launcherButtonRef","rest","prefix","button","secondaryButton","innerModal","startTrap","endTrap","modalInstanceId","modalLabelId","modalHeadingId","modalBodyId","modalCloseButtonClass","isCloseButton","element","current","classList","contains","handleKeyDown","evt","target","handleMousedown","handleBlur","_ref2","oldActiveNode","relatedTarget","currentActiveNode","bodyNode","startTrapNode","endTrapNode","onSecondaryButtonClick","modalClasses","containerClasses","contentClasses","footerClasses","Array","isArray","length","ariaLabel","getAriaLabelledBy","hasScrollingContentProps","tabIndex","role","alertDialogProps","document","body","setTimeout","focus","initialFocus","focusContainerElement","containerElement","primaryFocusElement","querySelector","focusButton","modalButton","createElement","type","onClick","title","modalBody","id","map","_ref3","i","buttonText","onButtonClick","key","kind","disabled","onKeyDown","onMouseDown","onBlur","propTypes","bool","string","node","oneOfType","func","shape","any","props","propName","componentName","Error","forEach","checkPropTypes","arrayOf","oneOf","defaultProps","Modal$1","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/Modal/Modal.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default, { useRef, useEffect } from 'react';\nimport cx from 'classnames';\nimport { Close } from '@carbon/icons-react';\nimport toggleClass from '../../tools/toggleClass.js';\nimport Button from '../Button/Button.js';\nimport '../Button/Button.Skeleton.js';\nimport ButtonSet from '../ButtonSet/ButtonSet.js';\nimport requiredIfGivenPropIsTruthy from '../../prop-types/requiredIfGivenPropIsTruthy.js';\nimport wrapFocus, { elementOrParentIsFloatingMenu } from '../../internal/wrapFocus.js';\nimport setupGetInstanceId from '../../tools/setupGetInstanceId.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { match } from '../../internal/keyboard/match.js';\nimport { Escape, Enter } from '../../internal/keyboard/keys.js';\n\nconst getInstanceId = setupGetInstanceId();\nconst Modal = /*#__PURE__*/React__default.forwardRef(function Modal(_ref, ref) {\n  let {\n    'aria-label': ariaLabelProp,\n    children,\n    className,\n    modalHeading,\n    modalLabel,\n    modalAriaLabel,\n    passiveModal,\n    secondaryButtonText,\n    primaryButtonText,\n    open,\n    onRequestClose,\n    onRequestSubmit,\n    onSecondarySubmit,\n    primaryButtonDisabled,\n    danger,\n    alert,\n    secondaryButtons,\n    selectorPrimaryFocus,\n    // eslint-disable-line\n    selectorsFloatingMenus,\n    // eslint-disable-line\n    shouldSubmitOnEnter,\n    // eslint-disable-line\n    size,\n    hasScrollingContent,\n    closeButtonLabel,\n    preventCloseOnClickOutside,\n    // eslint-disable-line\n    isFullWidth,\n    launcherButtonRef,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const button = useRef();\n  const secondaryButton = useRef();\n  const innerModal = useRef();\n  const startTrap = useRef();\n  const endTrap = useRef();\n  const modalInstanceId = `modal-${getInstanceId()}`;\n  const modalLabelId = `${prefix}--modal-header__label--${modalInstanceId}`;\n  const modalHeadingId = `${prefix}--modal-header__heading--${modalInstanceId}`;\n  const modalBodyId = `${prefix}--modal-body--${modalInstanceId}`;\n  const modalCloseButtonClass = `${prefix}--modal-close`;\n  function isCloseButton(element) {\n    return !onSecondarySubmit && element === secondaryButton.current || element.classList.contains(modalCloseButtonClass);\n  }\n  function handleKeyDown(evt) {\n    if (open) {\n      if (match(evt, Escape)) {\n        onRequestClose(evt);\n      }\n      if (match(evt, Enter) && shouldSubmitOnEnter && !isCloseButton(evt.target)) {\n        onRequestSubmit(evt);\n      }\n    }\n  }\n  function handleMousedown(evt) {\n    if (innerModal.current && !innerModal.current.contains(evt.target) && !elementOrParentIsFloatingMenu(evt.target, selectorsFloatingMenus) && !preventCloseOnClickOutside) {\n      onRequestClose(evt);\n    }\n  }\n  function handleBlur(_ref2) {\n    let {\n      target: oldActiveNode,\n      relatedTarget: currentActiveNode\n    } = _ref2;\n    if (open && currentActiveNode && oldActiveNode) {\n      const {\n        current: bodyNode\n      } = innerModal;\n      const {\n        current: startTrapNode\n      } = startTrap;\n      const {\n        current: endTrapNode\n      } = endTrap;\n      wrapFocus({\n        bodyNode,\n        startTrapNode,\n        endTrapNode,\n        currentActiveNode,\n        oldActiveNode,\n        selectorsFloatingMenus\n      });\n    }\n  }\n  const onSecondaryButtonClick = onSecondarySubmit ? onSecondarySubmit : onRequestClose;\n  const modalClasses = cx(`${prefix}--modal`, {\n    [`${prefix}--modal-tall`]: !passiveModal,\n    'is-visible': open,\n    [`${prefix}--modal--danger`]: danger,\n    [className]: className\n  });\n  const containerClasses = cx(`${prefix}--modal-container`, {\n    [`${prefix}--modal-container--${size}`]: size,\n    [`${prefix}--modal-container--full-width`]: isFullWidth\n  });\n  const contentClasses = cx(`${prefix}--modal-content`, {\n    [`${prefix}--modal-scroll-content`]: hasScrollingContent\n  });\n  const footerClasses = cx(`${prefix}--modal-footer`, {\n    [`${prefix}--modal-footer--three-button`]: Array.isArray(secondaryButtons) && secondaryButtons.length === 2\n  });\n  const ariaLabel = modalLabel || ariaLabelProp || modalAriaLabel || modalHeading;\n  const getAriaLabelledBy = modalLabel ? modalLabelId : modalHeadingId;\n  const hasScrollingContentProps = hasScrollingContent ? {\n    tabIndex: 0,\n    role: 'region',\n    'aria-label': ariaLabel,\n    'aria-labelledby': getAriaLabelledBy\n  } : {};\n  const alertDialogProps = {};\n  if (alert && passiveModal) {\n    alertDialogProps.role = 'alert';\n  }\n  if (alert && !passiveModal) {\n    alertDialogProps.role = 'alertdialog';\n    alertDialogProps['aria-describedby'] = modalBodyId;\n  }\n  useEffect(() => {\n    return () => {\n      toggleClass(document.body, `${prefix}--body--with-modal-open`, false);\n    };\n  }, [prefix]);\n  useEffect(() => {\n    toggleClass(document.body, `${prefix}--body--with-modal-open`, open);\n  }, [open, prefix]);\n  useEffect(() => {\n    if (!open && launcherButtonRef) {\n      setTimeout(() => {\n        launcherButtonRef?.current?.focus();\n      });\n    }\n  }, [open, launcherButtonRef]);\n  useEffect(() => {\n    const initialFocus = focusContainerElement => {\n      const containerElement = focusContainerElement || innerModal.current;\n      const primaryFocusElement = containerElement ? containerElement.querySelector(danger ? `.${prefix}--btn--secondary` : selectorPrimaryFocus) : null;\n      if (primaryFocusElement) {\n        return primaryFocusElement;\n      }\n      return button && button.current;\n    };\n    const focusButton = focusContainerElement => {\n      const target = initialFocus(focusContainerElement);\n      if (target) {\n        target.focus();\n      }\n    };\n    if (open) {\n      focusButton(innerModal.current);\n    }\n  }, [open, selectorPrimaryFocus, danger, prefix]);\n  const modalButton = /*#__PURE__*/React__default.createElement(\"button\", {\n    className: modalCloseButtonClass,\n    type: \"button\",\n    onClick: onRequestClose,\n    title: ariaLabel,\n    \"aria-label\": closeButtonLabel ? closeButtonLabel : 'close',\n    ref: button\n  }, /*#__PURE__*/React__default.createElement(Close, {\n    size: 20,\n    \"aria-hidden\": \"true\",\n    tabIndex: \"-1\",\n    className: `${modalCloseButtonClass}__icon`\n  }));\n  const modalBody = /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    ref: innerModal,\n    role: \"dialog\"\n  }, alertDialogProps, {\n    className: containerClasses,\n    \"aria-label\": ariaLabel,\n    \"aria-modal\": \"true\",\n    tabIndex: \"-1\"\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--modal-header`\n  }, passiveModal && modalButton, modalLabel && /*#__PURE__*/React__default.createElement(\"h2\", {\n    id: modalLabelId,\n    className: `${prefix}--modal-header__label`\n  }, modalLabel), /*#__PURE__*/React__default.createElement(\"h3\", {\n    id: modalHeadingId,\n    className: `${prefix}--modal-header__heading`\n  }, modalHeading), !passiveModal && modalButton), /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    id: modalBodyId,\n    className: contentClasses\n  }, hasScrollingContentProps), children), hasScrollingContent && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--modal-content--overflow-indicator`\n  }), !passiveModal && /*#__PURE__*/React__default.createElement(ButtonSet, {\n    className: footerClasses\n  }, Array.isArray(secondaryButtons) && secondaryButtons.length <= 2 ? secondaryButtons.map((_ref3, i) => {\n    let {\n      buttonText,\n      onClick: onButtonClick\n    } = _ref3;\n    return /*#__PURE__*/React__default.createElement(Button, {\n      key: `${buttonText}-${i}`,\n      kind: \"secondary\",\n      onClick: onButtonClick\n    }, buttonText);\n  }) : secondaryButtonText && /*#__PURE__*/React__default.createElement(Button, {\n    kind: \"secondary\",\n    onClick: onSecondaryButtonClick,\n    ref: secondaryButton\n  }, secondaryButtonText), /*#__PURE__*/React__default.createElement(Button, {\n    kind: danger ? 'danger' : 'primary',\n    disabled: primaryButtonDisabled,\n    onClick: onRequestSubmit,\n    ref: button\n  }, primaryButtonText)));\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({}, rest, {\n    onKeyDown: handleKeyDown,\n    onMouseDown: handleMousedown,\n    onBlur: handleBlur,\n    className: modalClasses,\n    role: \"presentation\",\n    ref: ref\n  }), /*#__PURE__*/React__default.createElement(\"span\", {\n    ref: startTrap,\n    tabIndex: \"0\",\n    role: \"link\",\n    className: `${prefix}--visually-hidden`\n  }, \"Focus sentinel\"), modalBody, /*#__PURE__*/React__default.createElement(\"span\", {\n    ref: endTrap,\n    tabIndex: \"0\",\n    role: \"link\",\n    className: `${prefix}--visually-hidden`\n  }, \"Focus sentinel\"));\n});\nModal.propTypes = {\n  /**\n   * Specify whether the Modal is displaying an alert, error or warning\n   * Should go hand in hand with the danger prop.\n   */\n  alert: PropTypes.bool,\n  /**\n   * Required props for the accessibility label of the header\n   */\n  ['aria-label']: requiredIfGivenPropIsTruthy('hasScrollingContent', PropTypes.string),\n  /**\n   * Provide the contents of your Modal\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the modal root node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify an label for the close button of the modal; defaults to close\n   */\n  closeButtonLabel: PropTypes.string,\n  /**\n   * Specify whether the Modal is for dangerous actions\n   */\n  danger: PropTypes.bool,\n  /**\n   * Specify whether the modal contains scrolling content\n   */\n  hasScrollingContent: PropTypes.bool,\n  /**\n   * Specify the DOM element ID of the top-level node.\n   */\n  id: PropTypes.string,\n  /**\n   * Specify whether or not the Modal content should have any inner padding.\n   */\n  isFullWidth: PropTypes.bool,\n  /**\n   * Provide a ref to return focus to once the modal is closed.\n   */\n  launcherButtonRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.any\n  })]),\n  /**\n   * Specify a label to be read by screen readers on the modal root node\n   */\n  modalAriaLabel: PropTypes.string,\n  /**\n   * Specify the content of the modal header title.\n   */\n  modalHeading: PropTypes.node,\n  /**\n   * Specify the content of the modal header label.\n   */\n  modalLabel: PropTypes.node,\n  /**\n   * Specify a handler for keypresses.\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Specify a handler for closing modal.\n   * The handler should care of closing modal, e.g. changing `open` prop.\n   */\n  onRequestClose: PropTypes.func,\n  /**\n   * Specify a handler for \"submitting\" modal.\n   * The handler should care of closing modal, e.g. changing `open` prop, if necessary.\n   */\n  onRequestSubmit: PropTypes.func,\n  /**\n   * Specify a handler for the secondary button.\n   * Useful if separate handler from `onRequestClose` is desirable\n   */\n  onSecondarySubmit: PropTypes.func,\n  /**\n   * Specify whether the Modal is currently open\n   */\n  open: PropTypes.bool,\n  /**\n   * Specify whether the modal should be button-less\n   */\n  passiveModal: PropTypes.bool,\n  /**\n   * Prevent closing on click outside of modal\n   */\n  preventCloseOnClickOutside: PropTypes.bool,\n  /**\n   * Specify whether the Button should be disabled, or not\n   */\n  primaryButtonDisabled: PropTypes.bool,\n  /**\n   * Specify the text for the primary button\n   */\n  primaryButtonText: PropTypes.node,\n  /**\n   * Specify the text for the secondary button\n   */\n  secondaryButtonText: PropTypes.node,\n  /**\n   * Specify an array of config objects for secondary buttons\n   * (`Array<{\n   *   buttonText: string,\n   *   onClick: function,\n   * }>`).\n   */\n  secondaryButtons: (props, propName, componentName) => {\n    if (props.secondaryButtons) {\n      if (!Array.isArray(props.secondaryButtons) || props.secondaryButtons.length !== 2) {\n        return new Error(`${propName} needs to be an array of two button config objects`);\n      }\n      const shape = {\n        buttonText: PropTypes.node,\n        onClick: PropTypes.func\n      };\n      props[propName].forEach(secondaryButton => {\n        PropTypes.checkPropTypes(shape, secondaryButton, propName, componentName);\n      });\n    }\n    return null;\n  },\n  /**\n   * Specify a CSS selector that matches the DOM element that should\n   * be focused when the Modal opens\n   */\n  selectorPrimaryFocus: PropTypes.string,\n  /**\n   * Specify CSS selectors that match DOM elements working as floating menus.\n   * Focusing on those elements won't trigger \"focus-wrap\" behavior\n   */\n  selectorsFloatingMenus: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Specify if Enter key should be used as \"submit\" action\n   */\n  shouldSubmitOnEnter: PropTypes.bool,\n  /**\n   * Specify the size variant.\n   */\n  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg'])\n};\nModal.defaultProps = {\n  onRequestClose: () => {},\n  onRequestSubmit: () => {},\n  primaryButtonDisabled: false,\n  onKeyDown: () => {},\n  passiveModal: false,\n  modalHeading: '',\n  modalLabel: '',\n  preventCloseOnClickOutside: false,\n  selectorPrimaryFocus: '[data-modal-primary-focus]',\n  hasScrollingContent: false\n};\nvar Modal$1 = Modal;\n\nexport { Modal$1 as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}