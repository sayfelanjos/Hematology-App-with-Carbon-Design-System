{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { getCellId } from './cells.js';\n\n/**\n * Normalize a collection of rows with the given headers.\n *\n * @param {Array<object>} rows\n * @param {Array<object>} headers\n * @returns {object}\n */\nconst normalize = function (rows, headers) {\n  let prevState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    rowsById: prevRowsByIds\n  } = prevState;\n  const rowIds = new Array(rows.length);\n  const rowsById = {};\n  const cellsById = {};\n  rows.forEach((row, i) => {\n    rowIds[i] = row.id;\n    // Initialize the row info and state values, namely for selection and\n    // expansion\n    const {\n      id,\n      isSelected = false,\n      isExpanded = false,\n      disabled = false\n    } = row;\n    rowsById[id] = {\n      id,\n      isSelected,\n      isExpanded,\n      disabled,\n      cells: new Array(headers.length)\n    };\n\n    // If we have a previous state, and the row existed in that previous state,\n    // then we'll set the state values of the row to the previous state values.\n    if (prevRowsByIds && prevRowsByIds[row.id] !== undefined) {\n      rowsById[row.id].isSelected = prevRowsByIds[row.id].isSelected;\n      rowsById[row.id].isExpanded = prevRowsByIds[row.id].isExpanded;\n    }\n    headers.forEach((_ref, i) => {\n      let {\n        key\n      } = _ref;\n      const id = getCellId(row.id, key);\n      // Initialize the cell info and state values, namely for editing\n      cellsById[id] = {\n        id,\n        value: row[key],\n        isEditable: false,\n        isEditing: false,\n        isValid: true,\n        errors: null,\n        info: {\n          header: key\n        }\n      };\n\n      // TODO: When working on inline edits, we'll need to derive the state\n      // values similarly to rows above.\n\n      rowsById[row.id].cells[i] = id;\n    });\n  });\n  return {\n    rowIds,\n    rowsById,\n    cellsById\n  };\n};\nvar normalize$1 = normalize;\nexport { normalize$1 as default };","map":{"version":3,"names":["getCellId","normalize","rows","headers","prevState","arguments","length","undefined","rowsById","prevRowsByIds","rowIds","Array","cellsById","forEach","row","i","id","isSelected","isExpanded","disabled","cells","_ref","key","value","isEditable","isEditing","isValid","errors","info","header","normalize$1","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/DataTable/tools/normalize.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { getCellId } from './cells.js';\n\n/**\n * Normalize a collection of rows with the given headers.\n *\n * @param {Array<object>} rows\n * @param {Array<object>} headers\n * @returns {object}\n */\nconst normalize = function (rows, headers) {\n  let prevState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    rowsById: prevRowsByIds\n  } = prevState;\n  const rowIds = new Array(rows.length);\n  const rowsById = {};\n  const cellsById = {};\n  rows.forEach((row, i) => {\n    rowIds[i] = row.id;\n    // Initialize the row info and state values, namely for selection and\n    // expansion\n    const {\n      id,\n      isSelected = false,\n      isExpanded = false,\n      disabled = false\n    } = row;\n    rowsById[id] = {\n      id,\n      isSelected,\n      isExpanded,\n      disabled,\n      cells: new Array(headers.length)\n    };\n\n    // If we have a previous state, and the row existed in that previous state,\n    // then we'll set the state values of the row to the previous state values.\n    if (prevRowsByIds && prevRowsByIds[row.id] !== undefined) {\n      rowsById[row.id].isSelected = prevRowsByIds[row.id].isSelected;\n      rowsById[row.id].isExpanded = prevRowsByIds[row.id].isExpanded;\n    }\n    headers.forEach((_ref, i) => {\n      let {\n        key\n      } = _ref;\n      const id = getCellId(row.id, key);\n      // Initialize the cell info and state values, namely for editing\n      cellsById[id] = {\n        id,\n        value: row[key],\n        isEditable: false,\n        isEditing: false,\n        isValid: true,\n        errors: null,\n        info: {\n          header: key\n        }\n      };\n\n      // TODO: When working on inline edits, we'll need to derive the state\n      // values similarly to rows above.\n\n      rowsById[row.id].cells[i] = id;\n    });\n  });\n  return {\n    rowIds,\n    rowsById,\n    cellsById\n  };\n};\nvar normalize$1 = normalize;\n\nexport { normalize$1 as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,SAAS,QAAQ,YAAY;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,SAAAA,CAAUC,IAAI,EAAEC,OAAO,EAAE;EACzC,IAAIC,SAAS,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACtF,MAAM;IACJG,QAAQ,EAAEC;EACZ,CAAC,GAAGL,SAAS;EACb,MAAMM,MAAM,GAAG,IAAIC,KAAK,CAACT,IAAI,CAACI,MAAM,CAAC;EACrC,MAAME,QAAQ,GAAG,CAAC,CAAC;EACnB,MAAMI,SAAS,GAAG,CAAC,CAAC;EACpBV,IAAI,CAACW,OAAO,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;IACvBL,MAAM,CAACK,CAAC,CAAC,GAAGD,GAAG,CAACE,EAAE;IAClB;IACA;IACA,MAAM;MACJA,EAAE;MACFC,UAAU,GAAG,KAAK;MAClBC,UAAU,GAAG,KAAK;MAClBC,QAAQ,GAAG;IACb,CAAC,GAAGL,GAAG;IACPN,QAAQ,CAACQ,EAAE,CAAC,GAAG;MACbA,EAAE;MACFC,UAAU;MACVC,UAAU;MACVC,QAAQ;MACRC,KAAK,EAAE,IAAIT,KAAK,CAACR,OAAO,CAACG,MAAM;IACjC,CAAC;;IAED;IACA;IACA,IAAIG,aAAa,IAAIA,aAAa,CAACK,GAAG,CAACE,EAAE,CAAC,KAAKT,SAAS,EAAE;MACxDC,QAAQ,CAACM,GAAG,CAACE,EAAE,CAAC,CAACC,UAAU,GAAGR,aAAa,CAACK,GAAG,CAACE,EAAE,CAAC,CAACC,UAAU;MAC9DT,QAAQ,CAACM,GAAG,CAACE,EAAE,CAAC,CAACE,UAAU,GAAGT,aAAa,CAACK,GAAG,CAACE,EAAE,CAAC,CAACE,UAAU;IAChE;IACAf,OAAO,CAACU,OAAO,CAAC,CAACQ,IAAI,EAAEN,CAAC,KAAK;MAC3B,IAAI;QACFO;MACF,CAAC,GAAGD,IAAI;MACR,MAAML,EAAE,GAAGhB,SAAS,CAACc,GAAG,CAACE,EAAE,EAAEM,GAAG,CAAC;MACjC;MACAV,SAAS,CAACI,EAAE,CAAC,GAAG;QACdA,EAAE;QACFO,KAAK,EAAET,GAAG,CAACQ,GAAG,CAAC;QACfE,UAAU,EAAE,KAAK;QACjBC,SAAS,EAAE,KAAK;QAChBC,OAAO,EAAE,IAAI;QACbC,MAAM,EAAE,IAAI;QACZC,IAAI,EAAE;UACJC,MAAM,EAAEP;QACV;MACF,CAAC;;MAED;MACA;;MAEAd,QAAQ,CAACM,GAAG,CAACE,EAAE,CAAC,CAACI,KAAK,CAACL,CAAC,CAAC,GAAGC,EAAE;IAChC,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAO;IACLN,MAAM;IACNF,QAAQ;IACRI;EACF,CAAC;AACH,CAAC;AACD,IAAIkB,WAAW,GAAG7B,SAAS;AAE3B,SAAS6B,WAAW,IAAIC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}