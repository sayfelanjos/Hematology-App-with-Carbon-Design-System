{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Counterpart to `normalize` for a collection of rows. This method unravels the\n * normalization step that we use to build the given parameters in order to\n * return a natural interface to working with rows for a consumer.\n *\n * The default heuristic here is to map through all the row ids and return the\n * value of the row for the given id, in addition to adding a `cells` key that\n * contains the results of mapping over the rows cells and getting individual\n * cell info.\n *\n * @param {Array<string>} rowIds array of row ids in the table\n * @param {object} rowsById object containing lookups for rows by id\n * @param {object} cellsById object containing lookups for cells by id\n */\nconst denormalize = (rowIds, rowsById, cellsById) => {\n  return rowIds.map(id => ({\n    ...rowsById[id],\n    cells: rowsById[id].cells.map(cellId => cellsById[cellId])\n  }));\n};\nvar denormalize$1 = denormalize;\nexport { denormalize$1 as default };","map":{"version":3,"names":["denormalize","rowIds","rowsById","cellsById","map","id","cells","cellId","denormalize$1","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/DataTable/tools/denormalize.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Counterpart to `normalize` for a collection of rows. This method unravels the\n * normalization step that we use to build the given parameters in order to\n * return a natural interface to working with rows for a consumer.\n *\n * The default heuristic here is to map through all the row ids and return the\n * value of the row for the given id, in addition to adding a `cells` key that\n * contains the results of mapping over the rows cells and getting individual\n * cell info.\n *\n * @param {Array<string>} rowIds array of row ids in the table\n * @param {object} rowsById object containing lookups for rows by id\n * @param {object} cellsById object containing lookups for cells by id\n */\nconst denormalize = (rowIds, rowsById, cellsById) => {\n  return rowIds.map(id => ({\n    ...rowsById[id],\n    cells: rowsById[id].cells.map(cellId => cellsById[cellId])\n  }));\n};\nvar denormalize$1 = denormalize;\n\nexport { denormalize$1 as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,WAAW,GAAGA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,KAAK;EACnD,OAAOF,MAAM,CAACG,GAAG,CAACC,EAAE,KAAK;IACvB,GAAGH,QAAQ,CAACG,EAAE,CAAC;IACfC,KAAK,EAAEJ,QAAQ,CAACG,EAAE,CAAC,CAACC,KAAK,CAACF,GAAG,CAACG,MAAM,IAAIJ,SAAS,CAACI,MAAM,CAAC;EAC3D,CAAC,CAAC,CAAC;AACL,CAAC;AACD,IAAIC,aAAa,GAAGR,WAAW;AAE/B,SAASQ,aAAa,IAAIC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}