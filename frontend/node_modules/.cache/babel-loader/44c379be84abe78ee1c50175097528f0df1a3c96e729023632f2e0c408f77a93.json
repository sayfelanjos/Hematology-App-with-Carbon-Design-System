{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport { CARBON_SIDENAV_ITEMS } from './_utils.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nconst SideNavItems = _ref => {\n  let {\n    className: customClassName,\n    children,\n    isSideNavExpanded\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx([`${prefix}--side-nav__items`], customClassName);\n  const childrenWithExpandedState = React__default.Children.map(children, child => {\n    if ( /*#__PURE__*/React__default.isValidElement(child)) {\n      // avoid spreading `isSideNavExpanded` to non-Carbon UI Shell children\n      return /*#__PURE__*/React__default.cloneElement(child, {\n        ...(CARBON_SIDENAV_ITEMS.includes(child.type?.displayName) ? {\n          isSideNavExpanded\n        } : {})\n      });\n    }\n  });\n  return /*#__PURE__*/React__default.createElement(\"ul\", {\n    className: className\n  }, childrenWithExpandedState);\n};\nSideNavItems.displayName = 'SideNavItems';\nSideNavItems.propTypes = {\n  /**\n   * Provide a single icon as the child to `SideNavIcon` to render in the\n   * container\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Provide an optional class to be applied to the containing node\n   */\n  className: PropTypes.string,\n  /**\n   * Property to indicate if the side nav container is open (or not). Use to\n   * keep local state and styling in step with the SideNav expansion state.\n   */\n  isSideNavExpanded: PropTypes.bool\n};\nvar SideNavItems$1 = SideNavItems;\nexport { SideNavItems$1 as default };","map":{"version":3,"names":["cx","PropTypes","React__default","CARBON_SIDENAV_ITEMS","usePrefix","SideNavItems","_ref","className","customClassName","children","isSideNavExpanded","prefix","childrenWithExpandedState","Children","map","child","isValidElement","cloneElement","includes","type","displayName","createElement","propTypes","node","isRequired","string","bool","SideNavItems$1","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/UIShell/SideNavItems.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport { CARBON_SIDENAV_ITEMS } from './_utils.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\nconst SideNavItems = _ref => {\n  let {\n    className: customClassName,\n    children,\n    isSideNavExpanded\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx([`${prefix}--side-nav__items`], customClassName);\n  const childrenWithExpandedState = React__default.Children.map(children, child => {\n    if ( /*#__PURE__*/React__default.isValidElement(child)) {\n      // avoid spreading `isSideNavExpanded` to non-Carbon UI Shell children\n      return /*#__PURE__*/React__default.cloneElement(child, {\n        ...(CARBON_SIDENAV_ITEMS.includes(child.type?.displayName) ? {\n          isSideNavExpanded\n        } : {})\n      });\n    }\n  });\n  return /*#__PURE__*/React__default.createElement(\"ul\", {\n    className: className\n  }, childrenWithExpandedState);\n};\nSideNavItems.displayName = 'SideNavItems';\nSideNavItems.propTypes = {\n  /**\n   * Provide a single icon as the child to `SideNavIcon` to render in the\n   * container\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Provide an optional class to be applied to the containing node\n   */\n  className: PropTypes.string,\n  /**\n   * Property to indicate if the side nav container is open (or not). Use to\n   * keep local state and styling in step with the SideNav expansion state.\n   */\n  isSideNavExpanded: PropTypes.bool\n};\nvar SideNavItems$1 = SideNavItems;\n\nexport { SideNavItems$1 as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,EAAE,MAAM,YAAY;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,OAAO;AAClC,SAASC,oBAAoB,QAAQ,aAAa;AAClD,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,MAAMC,YAAY,GAAGC,IAAI,IAAI;EAC3B,IAAI;IACFC,SAAS,EAAEC,eAAe;IAC1BC,QAAQ;IACRC;EACF,CAAC,GAAGJ,IAAI;EACR,MAAMK,MAAM,GAAGP,SAAS,CAAC,CAAC;EAC1B,MAAMG,SAAS,GAAGP,EAAE,CAAC,CAAE,GAAEW,MAAO,mBAAkB,CAAC,EAAEH,eAAe,CAAC;EACrE,MAAMI,yBAAyB,GAAGV,cAAc,CAACW,QAAQ,CAACC,GAAG,CAACL,QAAQ,EAAEM,KAAK,IAAI;IAC/E,KAAK,aAAab,cAAc,CAACc,cAAc,CAACD,KAAK,CAAC,EAAE;MACtD;MACA,OAAO,aAAab,cAAc,CAACe,YAAY,CAACF,KAAK,EAAE;QACrD,IAAIZ,oBAAoB,CAACe,QAAQ,CAACH,KAAK,CAACI,IAAI,EAAEC,WAAW,CAAC,GAAG;UAC3DV;QACF,CAAC,GAAG,CAAC,CAAC;MACR,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EACF,OAAO,aAAaR,cAAc,CAACmB,aAAa,CAAC,IAAI,EAAE;IACrDd,SAAS,EAAEA;EACb,CAAC,EAAEK,yBAAyB,CAAC;AAC/B,CAAC;AACDP,YAAY,CAACe,WAAW,GAAG,cAAc;AACzCf,YAAY,CAACiB,SAAS,GAAG;EACvB;AACF;AACA;AACA;EACEb,QAAQ,EAAER,SAAS,CAACsB,IAAI,CAACC,UAAU;EACnC;AACF;AACA;EACEjB,SAAS,EAAEN,SAAS,CAACwB,MAAM;EAC3B;AACF;AACA;AACA;EACEf,iBAAiB,EAAET,SAAS,CAACyB;AAC/B,CAAC;AACD,IAAIC,cAAc,GAAGtB,YAAY;AAEjC,SAASsB,cAAc,IAAIC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}