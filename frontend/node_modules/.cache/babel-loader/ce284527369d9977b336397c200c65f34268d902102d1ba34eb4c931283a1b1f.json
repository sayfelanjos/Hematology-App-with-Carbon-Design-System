{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default, { useState, useRef, useCallback, useEffect } from 'react';\nimport cx from 'classnames';\nimport useResizeObserver from 'use-resize-observer/polyfilled';\nimport { ChevronDown } from '@carbon/icons-react';\nimport Copy from '../Copy/Copy.js';\nimport Button from '../Button/Button.js';\nimport '../Button/Button.Skeleton.js';\nimport CopyButton from '../CopyButton/CopyButton.js';\nimport uniqueId from '../../tools/uniqueId.js';\nimport copy from 'copy-to-clipboard';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nconst rowHeightInPixels = 16;\nconst defaultMaxCollapsedNumberOfRows = 15;\nconst defaultMaxExpandedNumberOfRows = 0;\nconst defaultMinCollapsedNumberOfRows = 3;\nconst defaultMinExpandedNumberOfRows = 16;\nfunction CodeSnippet(_ref) {\n  let {\n    className,\n    type,\n    children,\n    disabled,\n    feedback,\n    feedbackTimeout,\n    onClick,\n    ['aria-label']: ariaLabel,\n    ariaLabel: deprecatedAriaLabel,\n    copyText,\n    copyButtonDescription,\n    light,\n    showMoreText,\n    showLessText,\n    hideCopyButton,\n    wrapText,\n    maxCollapsedNumberOfRows = defaultMaxCollapsedNumberOfRows,\n    maxExpandedNumberOfRows = defaultMaxExpandedNumberOfRows,\n    minCollapsedNumberOfRows = defaultMinCollapsedNumberOfRows,\n    minExpandedNumberOfRows = defaultMinExpandedNumberOfRows,\n    ...rest\n  } = _ref;\n  const [expandedCode, setExpandedCode] = useState(false);\n  const [shouldShowMoreLessBtn, setShouldShowMoreLessBtn] = useState(false);\n  const {\n    current: uid\n  } = useRef(uniqueId());\n  const codeContentRef = useRef();\n  const codeContainerRef = useRef();\n  const innerCodeRef = useRef();\n  const [hasLeftOverflow, setHasLeftOverflow] = useState(false);\n  const [hasRightOverflow, setHasRightOverflow] = useState(false);\n  const getCodeRef = useCallback(() => {\n    if (type === 'single') {\n      return codeContainerRef;\n    }\n    if (type === 'multi') {\n      return codeContentRef;\n    }\n  }, [type]);\n  const prefix = usePrefix();\n  const getCodeRefDimensions = useCallback(() => {\n    const {\n      clientWidth: codeClientWidth,\n      scrollLeft: codeScrollLeft,\n      scrollWidth: codeScrollWidth\n    } = getCodeRef().current;\n    return {\n      horizontalOverflow: codeScrollWidth > codeClientWidth,\n      codeClientWidth,\n      codeScrollWidth,\n      codeScrollLeft\n    };\n  }, [getCodeRef]);\n  const handleScroll = useCallback(() => {\n    if (type === 'inline' || type === 'single' && !codeContainerRef?.current || type === 'multi' && !codeContentRef?.current) {\n      return;\n    }\n    const {\n      horizontalOverflow,\n      codeClientWidth,\n      codeScrollWidth,\n      codeScrollLeft\n    } = getCodeRefDimensions();\n    setHasLeftOverflow(horizontalOverflow && !!codeScrollLeft);\n    setHasRightOverflow(horizontalOverflow && codeScrollLeft + codeClientWidth !== codeScrollWidth);\n  }, [type, getCodeRefDimensions]);\n  useResizeObserver({\n    ref: getCodeRef(),\n    onResize: () => {\n      if (codeContentRef?.current && type === 'multi') {\n        const {\n          height\n        } = codeContentRef.current.getBoundingClientRect();\n        if (maxCollapsedNumberOfRows > 0 && (maxExpandedNumberOfRows <= 0 || maxExpandedNumberOfRows > maxCollapsedNumberOfRows) && height > maxCollapsedNumberOfRows * rowHeightInPixels) {\n          setShouldShowMoreLessBtn(true);\n        } else {\n          setShouldShowMoreLessBtn(false);\n        }\n        if (expandedCode && minExpandedNumberOfRows > 0 && height <= minExpandedNumberOfRows * rowHeightInPixels) {\n          setExpandedCode(false);\n        }\n      }\n      if (codeContentRef?.current && type === 'multi' || codeContainerRef?.current && type === 'single') {\n        handleScroll();\n      }\n    }\n  }, [type, maxCollapsedNumberOfRows, maxExpandedNumberOfRows, minExpandedNumberOfRows, rowHeightInPixels]);\n  useEffect(() => {\n    handleScroll();\n  }, [handleScroll]);\n  const handleCopyClick = evt => {\n    if (copyText || innerCodeRef?.current) {\n      copy(copyText ?? innerCodeRef?.current?.innerText);\n    }\n    if (onClick) {\n      onClick(evt);\n    }\n  };\n  const codeSnippetClasses = cx(className, `${prefix}--snippet`, {\n    [`${prefix}--snippet--${type}`]: type,\n    [`${prefix}--snippet--disabled`]: type !== 'inline' && disabled,\n    [`${prefix}--snippet--expand`]: expandedCode,\n    [`${prefix}--snippet--light`]: light,\n    [`${prefix}--snippet--no-copy`]: hideCopyButton,\n    [`${prefix}--snippet--wraptext`]: wrapText,\n    [`${prefix}--snippet--has-right-overflow`]: type == 'multi' && hasRightOverflow\n  });\n  const expandCodeBtnText = expandedCode ? showLessText : showMoreText;\n  if (type === 'inline') {\n    if (hideCopyButton) {\n      return /*#__PURE__*/React__default.createElement(\"span\", {\n        className: codeSnippetClasses\n      }, /*#__PURE__*/React__default.createElement(\"code\", {\n        id: uid,\n        ref: innerCodeRef\n      }, children));\n    }\n    return /*#__PURE__*/React__default.createElement(Copy, _extends({}, rest, {\n      onClick: handleCopyClick,\n      \"aria-label\": deprecatedAriaLabel || ariaLabel,\n      \"aria-describedby\": uid,\n      className: codeSnippetClasses,\n      feedback: feedback,\n      feedbackTimeout: feedbackTimeout\n    }), /*#__PURE__*/React__default.createElement(\"code\", {\n      id: uid,\n      ref: innerCodeRef\n    }, children));\n  }\n  let containerStyle = {};\n  if (type === 'multi') {\n    const styles = {};\n    if (expandedCode) {\n      if (maxExpandedNumberOfRows > 0) {\n        styles.maxHeight = maxExpandedNumberOfRows * rowHeightInPixels;\n      }\n      if (minExpandedNumberOfRows > 0) {\n        styles.minHeight = minExpandedNumberOfRows * rowHeightInPixels;\n      }\n    } else {\n      if (maxCollapsedNumberOfRows > 0) {\n        styles.maxHeight = maxCollapsedNumberOfRows * rowHeightInPixels;\n      }\n      if (minCollapsedNumberOfRows > 0) {\n        styles.minHeight = minCollapsedNumberOfRows * rowHeightInPixels;\n      }\n    }\n    if (Object.keys(styles).length) {\n      containerStyle.style = styles;\n    }\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({}, rest, {\n    className: codeSnippetClasses\n  }), /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    ref: codeContainerRef,\n    role: type === 'single' || type === 'multi' ? 'textbox' : null,\n    tabIndex: (type === 'single' || type === 'multi') && !disabled ? 0 : null,\n    className: `${prefix}--snippet-container`,\n    \"aria-label\": deprecatedAriaLabel || ariaLabel || 'code-snippet',\n    \"aria-readonly\": type === 'single' || type === 'multi' ? true : null,\n    \"aria-multiline\": type === 'multi' ? true : null,\n    onScroll: type === 'single' && handleScroll || null\n  }, containerStyle), /*#__PURE__*/React__default.createElement(\"pre\", {\n    ref: codeContentRef,\n    onScroll: type === 'multi' && handleScroll || null\n  }, /*#__PURE__*/React__default.createElement(\"code\", {\n    ref: innerCodeRef\n  }, children))), hasLeftOverflow && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--snippet__overflow-indicator--left`\n  }), hasRightOverflow && type !== 'multi' && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--snippet__overflow-indicator--right`\n  }), !hideCopyButton && /*#__PURE__*/React__default.createElement(CopyButton, {\n    size: type === 'multi' ? 'sm' : 'md',\n    disabled: disabled,\n    onClick: handleCopyClick,\n    feedback: feedback,\n    feedbackTimeout: feedbackTimeout,\n    iconDescription: copyButtonDescription\n  }), shouldShowMoreLessBtn && /*#__PURE__*/React__default.createElement(Button, {\n    kind: \"ghost\",\n    size: \"sm\",\n    className: `${prefix}--snippet-btn--expand`,\n    disabled: disabled,\n    onClick: () => setExpandedCode(!expandedCode)\n  }, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: `${prefix}--snippet-btn--text`\n  }, expandCodeBtnText), /*#__PURE__*/React__default.createElement(ChevronDown, {\n    className: `${prefix}--icon-chevron--down ${prefix}--snippet__icon`,\n    name: \"chevron--down\",\n    role: \"img\"\n  })));\n}\nCodeSnippet.propTypes = {\n  /**\n   * Specify a label to be read by screen readers on the containing <textbox>\n   * node\n   */\n  ['aria-label']: PropTypes.string,\n  /**\n   * Deprecated, please use `aria-label` instead.\n   * Specify a label to be read by screen readers on the containing <textbox>\n   * node\n   */\n  ariaLabel: deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),\n  /**\n   * Provide the content of your CodeSnippet as a node or string\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the description for the Copy Button\n   */\n  copyButtonDescription: PropTypes.string,\n  /**\n   * Optional text to copy. If not specified, the `children` node's `innerText`\n   * will be used as the copy value.\n   */\n  copyText: PropTypes.string,\n  /**\n   * Specify whether or not the CodeSnippet should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify the string displayed when the snippet is copied\n   */\n  feedback: PropTypes.string,\n  /**\n   * Specify the time it takes for the feedback message to timeout\n   */\n  feedbackTimeout: PropTypes.number,\n  /**\n   * Specify whether or not a copy button should be used/rendered.\n   */\n  hideCopyButton: PropTypes.bool,\n  /**\n   * Specify whether you are using the light variant of the Code Snippet,\n   * typically used for inline snippet to display an alternate color\n   */\n\n  light: deprecate(PropTypes.bool, 'The `light` prop for `CodeSnippet` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * Specify the maximum number of rows to be shown when in collapsed view\n   */\n  maxCollapsedNumberOfRows: PropTypes.number,\n  /**\n   * Specify the maximum number of rows to be shown when in expanded view\n   */\n  maxExpandedNumberOfRows: PropTypes.number,\n  /**\n   * Specify the minimum number of rows to be shown when in collapsed view\n   */\n  minCollapsedNumberOfRows: PropTypes.number,\n  /**\n   * Specify the minimum number of rows to be shown when in expanded view\n   */\n  minExpandedNumberOfRows: PropTypes.number,\n  /**\n   * An optional handler to listen to the `onClick` even fired by the Copy\n   * Button\n   */\n  onClick: PropTypes.func,\n  /**\n   * Specify a string that is displayed when the Code Snippet has been\n   * interacted with to show more lines\n   */\n  showLessText: PropTypes.string,\n  /**\n   * Specify a string that is displayed when the Code Snippet text is more\n   * than 15 lines\n   */\n  showMoreText: PropTypes.string,\n  /**\n   * Provide the type of Code Snippet\n   */\n  type: PropTypes.oneOf(['single', 'inline', 'multi']),\n  /**\n   * Specify whether or not to wrap the text.\n   */\n  wrapText: PropTypes.bool\n};\nCodeSnippet.defaultProps = {\n  ['aria-label']: 'Copy to clipboard',\n  type: 'single',\n  showMoreText: 'Show more',\n  showLessText: 'Show less',\n  wrapText: false\n};\nexport { CodeSnippet as default };","map":{"version":3,"names":["extends","_extends","PropTypes","React__default","useState","useRef","useCallback","useEffect","cx","useResizeObserver","ChevronDown","Copy","Button","CopyButton","uniqueId","copy","deprecate","usePrefix","rowHeightInPixels","defaultMaxCollapsedNumberOfRows","defaultMaxExpandedNumberOfRows","defaultMinCollapsedNumberOfRows","defaultMinExpandedNumberOfRows","CodeSnippet","_ref","className","type","children","disabled","feedback","feedbackTimeout","onClick","ariaLabel","deprecatedAriaLabel","copyText","copyButtonDescription","light","showMoreText","showLessText","hideCopyButton","wrapText","maxCollapsedNumberOfRows","maxExpandedNumberOfRows","minCollapsedNumberOfRows","minExpandedNumberOfRows","rest","expandedCode","setExpandedCode","shouldShowMoreLessBtn","setShouldShowMoreLessBtn","current","uid","codeContentRef","codeContainerRef","innerCodeRef","hasLeftOverflow","setHasLeftOverflow","hasRightOverflow","setHasRightOverflow","getCodeRef","prefix","getCodeRefDimensions","clientWidth","codeClientWidth","scrollLeft","codeScrollLeft","scrollWidth","codeScrollWidth","horizontalOverflow","handleScroll","ref","onResize","height","getBoundingClientRect","handleCopyClick","evt","innerText","codeSnippetClasses","expandCodeBtnText","createElement","id","containerStyle","styles","maxHeight","minHeight","Object","keys","length","style","role","tabIndex","onScroll","size","iconDescription","kind","name","propTypes","string","node","bool","number","func","oneOf","defaultProps","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/CodeSnippet/CodeSnippet.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default, { useState, useRef, useCallback, useEffect } from 'react';\nimport cx from 'classnames';\nimport useResizeObserver from 'use-resize-observer/polyfilled';\nimport { ChevronDown } from '@carbon/icons-react';\nimport Copy from '../Copy/Copy.js';\nimport Button from '../Button/Button.js';\nimport '../Button/Button.Skeleton.js';\nimport CopyButton from '../CopyButton/CopyButton.js';\nimport uniqueId from '../../tools/uniqueId.js';\nimport copy from 'copy-to-clipboard';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\nconst rowHeightInPixels = 16;\nconst defaultMaxCollapsedNumberOfRows = 15;\nconst defaultMaxExpandedNumberOfRows = 0;\nconst defaultMinCollapsedNumberOfRows = 3;\nconst defaultMinExpandedNumberOfRows = 16;\nfunction CodeSnippet(_ref) {\n  let {\n    className,\n    type,\n    children,\n    disabled,\n    feedback,\n    feedbackTimeout,\n    onClick,\n    ['aria-label']: ariaLabel,\n    ariaLabel: deprecatedAriaLabel,\n    copyText,\n    copyButtonDescription,\n    light,\n    showMoreText,\n    showLessText,\n    hideCopyButton,\n    wrapText,\n    maxCollapsedNumberOfRows = defaultMaxCollapsedNumberOfRows,\n    maxExpandedNumberOfRows = defaultMaxExpandedNumberOfRows,\n    minCollapsedNumberOfRows = defaultMinCollapsedNumberOfRows,\n    minExpandedNumberOfRows = defaultMinExpandedNumberOfRows,\n    ...rest\n  } = _ref;\n  const [expandedCode, setExpandedCode] = useState(false);\n  const [shouldShowMoreLessBtn, setShouldShowMoreLessBtn] = useState(false);\n  const {\n    current: uid\n  } = useRef(uniqueId());\n  const codeContentRef = useRef();\n  const codeContainerRef = useRef();\n  const innerCodeRef = useRef();\n  const [hasLeftOverflow, setHasLeftOverflow] = useState(false);\n  const [hasRightOverflow, setHasRightOverflow] = useState(false);\n  const getCodeRef = useCallback(() => {\n    if (type === 'single') {\n      return codeContainerRef;\n    }\n    if (type === 'multi') {\n      return codeContentRef;\n    }\n  }, [type]);\n  const prefix = usePrefix();\n  const getCodeRefDimensions = useCallback(() => {\n    const {\n      clientWidth: codeClientWidth,\n      scrollLeft: codeScrollLeft,\n      scrollWidth: codeScrollWidth\n    } = getCodeRef().current;\n    return {\n      horizontalOverflow: codeScrollWidth > codeClientWidth,\n      codeClientWidth,\n      codeScrollWidth,\n      codeScrollLeft\n    };\n  }, [getCodeRef]);\n  const handleScroll = useCallback(() => {\n    if (type === 'inline' || type === 'single' && !codeContainerRef?.current || type === 'multi' && !codeContentRef?.current) {\n      return;\n    }\n    const {\n      horizontalOverflow,\n      codeClientWidth,\n      codeScrollWidth,\n      codeScrollLeft\n    } = getCodeRefDimensions();\n    setHasLeftOverflow(horizontalOverflow && !!codeScrollLeft);\n    setHasRightOverflow(horizontalOverflow && codeScrollLeft + codeClientWidth !== codeScrollWidth);\n  }, [type, getCodeRefDimensions]);\n  useResizeObserver({\n    ref: getCodeRef(),\n    onResize: () => {\n      if (codeContentRef?.current && type === 'multi') {\n        const {\n          height\n        } = codeContentRef.current.getBoundingClientRect();\n        if (maxCollapsedNumberOfRows > 0 && (maxExpandedNumberOfRows <= 0 || maxExpandedNumberOfRows > maxCollapsedNumberOfRows) && height > maxCollapsedNumberOfRows * rowHeightInPixels) {\n          setShouldShowMoreLessBtn(true);\n        } else {\n          setShouldShowMoreLessBtn(false);\n        }\n        if (expandedCode && minExpandedNumberOfRows > 0 && height <= minExpandedNumberOfRows * rowHeightInPixels) {\n          setExpandedCode(false);\n        }\n      }\n      if (codeContentRef?.current && type === 'multi' || codeContainerRef?.current && type === 'single') {\n        handleScroll();\n      }\n    }\n  }, [type, maxCollapsedNumberOfRows, maxExpandedNumberOfRows, minExpandedNumberOfRows, rowHeightInPixels]);\n  useEffect(() => {\n    handleScroll();\n  }, [handleScroll]);\n  const handleCopyClick = evt => {\n    if (copyText || innerCodeRef?.current) {\n      copy(copyText ?? innerCodeRef?.current?.innerText);\n    }\n    if (onClick) {\n      onClick(evt);\n    }\n  };\n  const codeSnippetClasses = cx(className, `${prefix}--snippet`, {\n    [`${prefix}--snippet--${type}`]: type,\n    [`${prefix}--snippet--disabled`]: type !== 'inline' && disabled,\n    [`${prefix}--snippet--expand`]: expandedCode,\n    [`${prefix}--snippet--light`]: light,\n    [`${prefix}--snippet--no-copy`]: hideCopyButton,\n    [`${prefix}--snippet--wraptext`]: wrapText,\n    [`${prefix}--snippet--has-right-overflow`]: type == 'multi' && hasRightOverflow\n  });\n  const expandCodeBtnText = expandedCode ? showLessText : showMoreText;\n  if (type === 'inline') {\n    if (hideCopyButton) {\n      return /*#__PURE__*/React__default.createElement(\"span\", {\n        className: codeSnippetClasses\n      }, /*#__PURE__*/React__default.createElement(\"code\", {\n        id: uid,\n        ref: innerCodeRef\n      }, children));\n    }\n    return /*#__PURE__*/React__default.createElement(Copy, _extends({}, rest, {\n      onClick: handleCopyClick,\n      \"aria-label\": deprecatedAriaLabel || ariaLabel,\n      \"aria-describedby\": uid,\n      className: codeSnippetClasses,\n      feedback: feedback,\n      feedbackTimeout: feedbackTimeout\n    }), /*#__PURE__*/React__default.createElement(\"code\", {\n      id: uid,\n      ref: innerCodeRef\n    }, children));\n  }\n  let containerStyle = {};\n  if (type === 'multi') {\n    const styles = {};\n    if (expandedCode) {\n      if (maxExpandedNumberOfRows > 0) {\n        styles.maxHeight = maxExpandedNumberOfRows * rowHeightInPixels;\n      }\n      if (minExpandedNumberOfRows > 0) {\n        styles.minHeight = minExpandedNumberOfRows * rowHeightInPixels;\n      }\n    } else {\n      if (maxCollapsedNumberOfRows > 0) {\n        styles.maxHeight = maxCollapsedNumberOfRows * rowHeightInPixels;\n      }\n      if (minCollapsedNumberOfRows > 0) {\n        styles.minHeight = minCollapsedNumberOfRows * rowHeightInPixels;\n      }\n    }\n    if (Object.keys(styles).length) {\n      containerStyle.style = styles;\n    }\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({}, rest, {\n    className: codeSnippetClasses\n  }), /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    ref: codeContainerRef,\n    role: type === 'single' || type === 'multi' ? 'textbox' : null,\n    tabIndex: (type === 'single' || type === 'multi') && !disabled ? 0 : null,\n    className: `${prefix}--snippet-container`,\n    \"aria-label\": deprecatedAriaLabel || ariaLabel || 'code-snippet',\n    \"aria-readonly\": type === 'single' || type === 'multi' ? true : null,\n    \"aria-multiline\": type === 'multi' ? true : null,\n    onScroll: type === 'single' && handleScroll || null\n  }, containerStyle), /*#__PURE__*/React__default.createElement(\"pre\", {\n    ref: codeContentRef,\n    onScroll: type === 'multi' && handleScroll || null\n  }, /*#__PURE__*/React__default.createElement(\"code\", {\n    ref: innerCodeRef\n  }, children))), hasLeftOverflow && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--snippet__overflow-indicator--left`\n  }), hasRightOverflow && type !== 'multi' && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--snippet__overflow-indicator--right`\n  }), !hideCopyButton && /*#__PURE__*/React__default.createElement(CopyButton, {\n    size: type === 'multi' ? 'sm' : 'md',\n    disabled: disabled,\n    onClick: handleCopyClick,\n    feedback: feedback,\n    feedbackTimeout: feedbackTimeout,\n    iconDescription: copyButtonDescription\n  }), shouldShowMoreLessBtn && /*#__PURE__*/React__default.createElement(Button, {\n    kind: \"ghost\",\n    size: \"sm\",\n    className: `${prefix}--snippet-btn--expand`,\n    disabled: disabled,\n    onClick: () => setExpandedCode(!expandedCode)\n  }, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: `${prefix}--snippet-btn--text`\n  }, expandCodeBtnText), /*#__PURE__*/React__default.createElement(ChevronDown, {\n    className: `${prefix}--icon-chevron--down ${prefix}--snippet__icon`,\n    name: \"chevron--down\",\n    role: \"img\"\n  })));\n}\nCodeSnippet.propTypes = {\n  /**\n   * Specify a label to be read by screen readers on the containing <textbox>\n   * node\n   */\n  ['aria-label']: PropTypes.string,\n  /**\n   * Deprecated, please use `aria-label` instead.\n   * Specify a label to be read by screen readers on the containing <textbox>\n   * node\n   */\n  ariaLabel: deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),\n  /**\n   * Provide the content of your CodeSnippet as a node or string\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the description for the Copy Button\n   */\n  copyButtonDescription: PropTypes.string,\n  /**\n   * Optional text to copy. If not specified, the `children` node's `innerText`\n   * will be used as the copy value.\n   */\n  copyText: PropTypes.string,\n  /**\n   * Specify whether or not the CodeSnippet should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify the string displayed when the snippet is copied\n   */\n  feedback: PropTypes.string,\n  /**\n   * Specify the time it takes for the feedback message to timeout\n   */\n  feedbackTimeout: PropTypes.number,\n  /**\n   * Specify whether or not a copy button should be used/rendered.\n   */\n  hideCopyButton: PropTypes.bool,\n  /**\n   * Specify whether you are using the light variant of the Code Snippet,\n   * typically used for inline snippet to display an alternate color\n   */\n\n  light: deprecate(PropTypes.bool, 'The `light` prop for `CodeSnippet` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * Specify the maximum number of rows to be shown when in collapsed view\n   */\n  maxCollapsedNumberOfRows: PropTypes.number,\n  /**\n   * Specify the maximum number of rows to be shown when in expanded view\n   */\n  maxExpandedNumberOfRows: PropTypes.number,\n  /**\n   * Specify the minimum number of rows to be shown when in collapsed view\n   */\n  minCollapsedNumberOfRows: PropTypes.number,\n  /**\n   * Specify the minimum number of rows to be shown when in expanded view\n   */\n  minExpandedNumberOfRows: PropTypes.number,\n  /**\n   * An optional handler to listen to the `onClick` even fired by the Copy\n   * Button\n   */\n  onClick: PropTypes.func,\n  /**\n   * Specify a string that is displayed when the Code Snippet has been\n   * interacted with to show more lines\n   */\n  showLessText: PropTypes.string,\n  /**\n   * Specify a string that is displayed when the Code Snippet text is more\n   * than 15 lines\n   */\n  showMoreText: PropTypes.string,\n  /**\n   * Provide the type of Code Snippet\n   */\n  type: PropTypes.oneOf(['single', 'inline', 'multi']),\n  /**\n   * Specify whether or not to wrap the text.\n   */\n  wrapText: PropTypes.bool\n};\nCodeSnippet.defaultProps = {\n  ['aria-label']: 'Copy to clipboard',\n  type: 'single',\n  showMoreText: 'Show more',\n  showLessText: 'Show less',\n  wrapText: false\n};\n\nexport { CodeSnippet as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}