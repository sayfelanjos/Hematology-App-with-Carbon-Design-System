{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport React__default from 'react';\nimport PropTypes from 'prop-types';\nimport { ChevronDown } from '@carbon/icons-react';\nimport { usePrefix } from '../../internal/usePrefix.js';\nconst translationIds = {\n  'close.menu': 'close.menu',\n  'open.menu': 'open.menu'\n};\nconst defaultTranslations = {\n  [translationIds['close.menu']]: 'Close menu',\n  [translationIds['open.menu']]: 'Open menu'\n};\nconst defaultTranslateWithId = id => defaultTranslations[id];\n/**\n * `ListBoxMenuIcon` is used to orient the icon up or down depending on the\n * state of the menu for a given `ListBox`\n */\nconst ListBoxMenuIcon = _ref => {\n  let {\n    isOpen,\n    translateWithId: t = defaultTranslateWithId\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx(`${prefix}--list-box__menu-icon`, {\n    [`${prefix}--list-box__menu-icon--open`]: isOpen\n  });\n  const description = isOpen ? t('close.menu') : t('open.menu');\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: className\n  }, /*#__PURE__*/React__default.createElement(ChevronDown, {\n    name: \"chevron--down\",\n    \"aria-label\": description\n  }, /*#__PURE__*/React__default.createElement(\"title\", null, description)));\n};\nListBoxMenuIcon.propTypes = {\n  /**\n   * Specify whether the menu is currently open, which will influence the\n   * direction of the menu icon\n   */\n  isOpen: PropTypes.bool.isRequired,\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxMenuIcon.defaultProps = {\n  translateWithId: defaultTranslateWithId\n};\nexport { ListBoxMenuIcon as default, translationIds };","map":{"version":3,"names":["cx","React__default","PropTypes","ChevronDown","usePrefix","translationIds","defaultTranslations","defaultTranslateWithId","id","ListBoxMenuIcon","_ref","isOpen","translateWithId","t","prefix","className","description","createElement","name","propTypes","bool","isRequired","func","defaultProps","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/ListBox/ListBoxMenuIcon.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport React__default from 'react';\nimport PropTypes from 'prop-types';\nimport { ChevronDown } from '@carbon/icons-react';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\nconst translationIds = {\n  'close.menu': 'close.menu',\n  'open.menu': 'open.menu'\n};\nconst defaultTranslations = {\n  [translationIds['close.menu']]: 'Close menu',\n  [translationIds['open.menu']]: 'Open menu'\n};\nconst defaultTranslateWithId = id => defaultTranslations[id];\n/**\n * `ListBoxMenuIcon` is used to orient the icon up or down depending on the\n * state of the menu for a given `ListBox`\n */\nconst ListBoxMenuIcon = _ref => {\n  let {\n    isOpen,\n    translateWithId: t = defaultTranslateWithId\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx(`${prefix}--list-box__menu-icon`, {\n    [`${prefix}--list-box__menu-icon--open`]: isOpen\n  });\n  const description = isOpen ? t('close.menu') : t('open.menu');\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: className\n  }, /*#__PURE__*/React__default.createElement(ChevronDown, {\n    name: \"chevron--down\",\n    \"aria-label\": description\n  }, /*#__PURE__*/React__default.createElement(\"title\", null, description)));\n};\nListBoxMenuIcon.propTypes = {\n  /**\n   * Specify whether the menu is currently open, which will influence the\n   * direction of the menu icon\n   */\n  isOpen: PropTypes.bool.isRequired,\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxMenuIcon.defaultProps = {\n  translateWithId: defaultTranslateWithId\n};\n\nexport { ListBoxMenuIcon as default, translationIds };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,EAAE,MAAM,YAAY;AAC3B,OAAOC,cAAc,MAAM,OAAO;AAClC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,MAAMC,cAAc,GAAG;EACrB,YAAY,EAAE,YAAY;EAC1B,WAAW,EAAE;AACf,CAAC;AACD,MAAMC,mBAAmB,GAAG;EAC1B,CAACD,cAAc,CAAC,YAAY,CAAC,GAAG,YAAY;EAC5C,CAACA,cAAc,CAAC,WAAW,CAAC,GAAG;AACjC,CAAC;AACD,MAAME,sBAAsB,GAAGC,EAAE,IAAIF,mBAAmB,CAACE,EAAE,CAAC;AAC5D;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAGC,IAAI,IAAI;EAC9B,IAAI;IACFC,MAAM;IACNC,eAAe,EAAEC,CAAC,GAAGN;EACvB,CAAC,GAAGG,IAAI;EACR,MAAMI,MAAM,GAAGV,SAAS,CAAC,CAAC;EAC1B,MAAMW,SAAS,GAAGf,EAAE,CAAE,GAAEc,MAAO,uBAAsB,EAAE;IACrD,CAAE,GAAEA,MAAO,6BAA4B,GAAGH;EAC5C,CAAC,CAAC;EACF,MAAMK,WAAW,GAAGL,MAAM,GAAGE,CAAC,CAAC,YAAY,CAAC,GAAGA,CAAC,CAAC,WAAW,CAAC;EAC7D,OAAO,aAAaZ,cAAc,CAACgB,aAAa,CAAC,KAAK,EAAE;IACtDF,SAAS,EAAEA;EACb,CAAC,EAAE,aAAad,cAAc,CAACgB,aAAa,CAACd,WAAW,EAAE;IACxDe,IAAI,EAAE,eAAe;IACrB,YAAY,EAAEF;EAChB,CAAC,EAAE,aAAaf,cAAc,CAACgB,aAAa,CAAC,OAAO,EAAE,IAAI,EAAED,WAAW,CAAC,CAAC,CAAC;AAC5E,CAAC;AACDP,eAAe,CAACU,SAAS,GAAG;EAC1B;AACF;AACA;AACA;EACER,MAAM,EAAET,SAAS,CAACkB,IAAI,CAACC,UAAU;EACjC;AACF;AACA;AACA;AACA;EACET,eAAe,EAAEV,SAAS,CAACoB,IAAI,CAACD;AAClC,CAAC;AACDZ,eAAe,CAACc,YAAY,GAAG;EAC7BX,eAAe,EAAEL;AACnB,CAAC;AAED,SAASE,eAAe,IAAIe,OAAO,EAAEnB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}