{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport uniqueId from '../../tools/uniqueId.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { matches, match } from '../../internal/keyboard/match.js';\nimport { ArrowUp, ArrowDown, Home, End } from '../../internal/keyboard/keys.js';\nfunction TreeView(_ref) {\n  let {\n    active: prespecifiedActive,\n    children,\n    className,\n    hideLabel = false,\n    label,\n    multiselect = false,\n    onSelect,\n    selected: preselected = [],\n    size = 'sm',\n    ...rest\n  } = _ref;\n  const {\n    current: treeId\n  } = useRef(rest.id || uniqueId());\n  const prefix = usePrefix();\n  const treeClasses = cx(className, `${prefix}--tree`, {\n    [`${prefix}--tree--${size}`]: size !== 'default'\n  });\n  const treeRootRef = useRef(null);\n  const treeWalker = useRef(treeRootRef?.current);\n  const [selected, setSelected] = useState(preselected);\n  const [active, setActive] = useState(prespecifiedActive);\n  function resetNodeTabIndices() {\n    Array.prototype.forEach.call(treeRootRef?.current?.querySelectorAll('[tabIndex=\"0\"]') ?? [], item => {\n      item.tabIndex = -1;\n    });\n  }\n  function handleTreeSelect(event) {\n    let node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      id: nodeId\n    } = node;\n    if (multiselect && (event.metaKey || event.ctrlKey)) {\n      if (!selected.includes(nodeId)) {\n        setSelected(selected.concat(nodeId));\n      } else {\n        setSelected(selected.filter(selectedId => selectedId !== nodeId));\n      }\n      onSelect?.(event, node);\n    } else {\n      setSelected([nodeId]);\n      setActive(nodeId);\n      onSelect?.(event, {\n        activeNodeId: nodeId,\n        ...node\n      });\n    }\n  }\n  function handleFocusEvent(event) {\n    if (event.type === 'blur') {\n      const {\n        relatedTarget: currentFocusedNode,\n        target: prevFocusedNode\n      } = event;\n      if (treeRootRef?.current?.contains(currentFocusedNode)) {\n        prevFocusedNode.tabIndex = -1;\n      }\n    }\n    if (event.type === 'focus') {\n      resetNodeTabIndices();\n      const {\n        relatedTarget: prevFocusedNode,\n        target: currentFocusedNode\n      } = event;\n      if (treeRootRef?.current?.contains(prevFocusedNode)) {\n        prevFocusedNode.tabIndex = -1;\n      }\n      currentFocusedNode.tabIndex = 0;\n    }\n  }\n  let focusTarget = false;\n  const nodesWithProps = React__default.Children.map(children, node => {\n    const sharedNodeProps = {\n      active,\n      depth: 0,\n      onNodeFocusEvent: handleFocusEvent,\n      onTreeSelect: handleTreeSelect,\n      selected,\n      tabIndex: !node.props.disabled && -1 || null\n    };\n    if (!focusTarget && !node.props.disabled) {\n      sharedNodeProps.tabIndex = 0;\n      focusTarget = true;\n    }\n    if ( /*#__PURE__*/React__default.isValidElement(node)) {\n      return /*#__PURE__*/React__default.cloneElement(node, sharedNodeProps);\n    }\n  });\n  function handleKeyDown(event) {\n    event.stopPropagation();\n    if (matches(event, [ArrowUp, ArrowDown, Home, End, {\n      code: 'KeyA'\n    }])) {\n      event.preventDefault();\n    }\n    treeWalker.current.currentNode = event.target;\n    let nextFocusNode;\n    if (match(event, ArrowUp)) {\n      nextFocusNode = treeWalker.current.previousNode();\n    }\n    if (match(event, ArrowDown)) {\n      nextFocusNode = treeWalker.current.nextNode();\n    }\n    if (matches(event, [Home, End, {\n      code: 'KeyA'\n    }])) {\n      const nodeIds = [];\n      if (matches(event, [Home, End])) {\n        if (multiselect && event.shiftKey && event.ctrlKey && !treeWalker.current.currentNode.getAttribute('aria-disabled')) {\n          nodeIds.push(treeWalker.current.currentNode?.id);\n        }\n        while (match(event, Home) ? treeWalker.current.previousNode() : treeWalker.current.nextNode()) {\n          nextFocusNode = treeWalker.current.currentNode;\n          if (multiselect && event.shiftKey && event.ctrlKey && !nextFocusNode.getAttribute('aria-disabled')) {\n            nodeIds.push(nextFocusNode?.id);\n          }\n        }\n      }\n      if (match(event, {\n        code: 'KeyA'\n      }) && event.ctrlKey) {\n        treeWalker.current.currentNode = treeWalker.current.root;\n        while (treeWalker.current.nextNode()) {\n          if (!treeWalker.current.currentNode.getAttribute('aria-disabled')) {\n            nodeIds.push(treeWalker.current.currentNode?.id);\n          }\n        }\n      }\n      setSelected(selected.concat(nodeIds));\n    }\n    if (nextFocusNode && nextFocusNode !== event.target) {\n      resetNodeTabIndices();\n      nextFocusNode.tabIndex = 0;\n      nextFocusNode.focus();\n    }\n    rest?.onKeyDown?.(event);\n  }\n  useEffect(() => {\n    treeWalker.current = treeWalker.current ?? document.createTreeWalker(treeRootRef?.current, NodeFilter.SHOW_ELEMENT, {\n      acceptNode: function (node) {\n        if (node.classList.contains(`${prefix}--tree-node--disabled`)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n        if (node.matches(`li.${prefix}--tree-node`)) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n        return NodeFilter.FILTER_SKIP;\n      }\n    });\n  }, [prefix]);\n  const useActiveAndSelectedOnMount = () => useEffect(() => {\n    if (preselected.length) {\n      setSelected(preselected);\n    }\n    if (prespecifiedActive) {\n      setActive(prespecifiedActive);\n    }\n  }, []);\n  useActiveAndSelectedOnMount();\n  const labelId = `${treeId}__label`;\n  const TreeLabel = () => !hideLabel && /*#__PURE__*/React__default.createElement(\"label\", {\n    id: labelId,\n    className: `${prefix}--label`\n  }, label);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(TreeLabel, null), /*#__PURE__*/React__default.createElement(\"ul\", _extends({}, rest, {\n    \"aria-label\": hideLabel ? label : null,\n    \"aria-labelledby\": !hideLabel ? labelId : null,\n    \"aria-multiselectable\": multiselect || null,\n    className: treeClasses,\n    onKeyDown: handleKeyDown,\n    ref: treeRootRef,\n    role: \"tree\"\n  }), nodesWithProps));\n}\nTreeView.propTypes = {\n  /**\n   * Mark the active node in the tree, represented by its value\n   */\n  active: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Specify the children of the TreeView\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the TreeView\n   */\n  className: PropTypes.string,\n  /**\n   * Specify whether or not the label should be hidden\n   */\n  hideLabel: PropTypes.bool,\n  /**\n   * Provide the label text that will be read by a screen reader\n   */\n  label: PropTypes.string.isRequired,\n  /**\n   * **[Experimental]** Specify the selection mode of the tree.\n   * If `multiselect` is `false` then only one node can be selected at a time\n   */\n  multiselect: PropTypes.bool,\n  /**\n   * Callback function that is called when any node is selected\n   */\n  onSelect: PropTypes.func,\n  /**\n   * Array representing all selected node IDs in the tree\n   */\n  selected: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  /**\n   * Specify the size of the tree from a list of available sizes.\n   */\n  size: PropTypes.oneOf(['xs', 'sm'])\n};\nexport { TreeView as default };","map":{"version":3,"names":["extends","_extends","React__default","useRef","useState","useEffect","PropTypes","cx","uniqueId","usePrefix","matches","match","ArrowUp","ArrowDown","Home","End","TreeView","_ref","active","prespecifiedActive","children","className","hideLabel","label","multiselect","onSelect","selected","preselected","size","rest","current","treeId","id","prefix","treeClasses","treeRootRef","treeWalker","setSelected","setActive","resetNodeTabIndices","Array","prototype","forEach","call","querySelectorAll","item","tabIndex","handleTreeSelect","event","node","arguments","length","undefined","nodeId","metaKey","ctrlKey","includes","concat","filter","selectedId","activeNodeId","handleFocusEvent","type","relatedTarget","currentFocusedNode","target","prevFocusedNode","contains","focusTarget","nodesWithProps","Children","map","sharedNodeProps","depth","onNodeFocusEvent","onTreeSelect","props","disabled","isValidElement","cloneElement","handleKeyDown","stopPropagation","code","preventDefault","currentNode","nextFocusNode","previousNode","nextNode","nodeIds","shiftKey","getAttribute","push","root","focus","onKeyDown","document","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","classList","FILTER_REJECT","FILTER_ACCEPT","FILTER_SKIP","useActiveAndSelectedOnMount","labelId","TreeLabel","createElement","Fragment","ref","role","propTypes","oneOfType","string","number","bool","isRequired","func","arrayOf","oneOf","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/TreeView/TreeView.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport uniqueId from '../../tools/uniqueId.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { matches, match } from '../../internal/keyboard/match.js';\nimport { ArrowUp, ArrowDown, Home, End } from '../../internal/keyboard/keys.js';\n\nfunction TreeView(_ref) {\n  let {\n    active: prespecifiedActive,\n    children,\n    className,\n    hideLabel = false,\n    label,\n    multiselect = false,\n    onSelect,\n    selected: preselected = [],\n    size = 'sm',\n    ...rest\n  } = _ref;\n  const {\n    current: treeId\n  } = useRef(rest.id || uniqueId());\n  const prefix = usePrefix();\n  const treeClasses = cx(className, `${prefix}--tree`, {\n    [`${prefix}--tree--${size}`]: size !== 'default'\n  });\n  const treeRootRef = useRef(null);\n  const treeWalker = useRef(treeRootRef?.current);\n  const [selected, setSelected] = useState(preselected);\n  const [active, setActive] = useState(prespecifiedActive);\n  function resetNodeTabIndices() {\n    Array.prototype.forEach.call(treeRootRef?.current?.querySelectorAll('[tabIndex=\"0\"]') ?? [], item => {\n      item.tabIndex = -1;\n    });\n  }\n  function handleTreeSelect(event) {\n    let node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      id: nodeId\n    } = node;\n    if (multiselect && (event.metaKey || event.ctrlKey)) {\n      if (!selected.includes(nodeId)) {\n        setSelected(selected.concat(nodeId));\n      } else {\n        setSelected(selected.filter(selectedId => selectedId !== nodeId));\n      }\n      onSelect?.(event, node);\n    } else {\n      setSelected([nodeId]);\n      setActive(nodeId);\n      onSelect?.(event, {\n        activeNodeId: nodeId,\n        ...node\n      });\n    }\n  }\n  function handleFocusEvent(event) {\n    if (event.type === 'blur') {\n      const {\n        relatedTarget: currentFocusedNode,\n        target: prevFocusedNode\n      } = event;\n      if (treeRootRef?.current?.contains(currentFocusedNode)) {\n        prevFocusedNode.tabIndex = -1;\n      }\n    }\n    if (event.type === 'focus') {\n      resetNodeTabIndices();\n      const {\n        relatedTarget: prevFocusedNode,\n        target: currentFocusedNode\n      } = event;\n      if (treeRootRef?.current?.contains(prevFocusedNode)) {\n        prevFocusedNode.tabIndex = -1;\n      }\n      currentFocusedNode.tabIndex = 0;\n    }\n  }\n  let focusTarget = false;\n  const nodesWithProps = React__default.Children.map(children, node => {\n    const sharedNodeProps = {\n      active,\n      depth: 0,\n      onNodeFocusEvent: handleFocusEvent,\n      onTreeSelect: handleTreeSelect,\n      selected,\n      tabIndex: !node.props.disabled && -1 || null\n    };\n    if (!focusTarget && !node.props.disabled) {\n      sharedNodeProps.tabIndex = 0;\n      focusTarget = true;\n    }\n    if ( /*#__PURE__*/React__default.isValidElement(node)) {\n      return /*#__PURE__*/React__default.cloneElement(node, sharedNodeProps);\n    }\n  });\n  function handleKeyDown(event) {\n    event.stopPropagation();\n    if (matches(event, [ArrowUp, ArrowDown, Home, End, {\n      code: 'KeyA'\n    }])) {\n      event.preventDefault();\n    }\n    treeWalker.current.currentNode = event.target;\n    let nextFocusNode;\n    if (match(event, ArrowUp)) {\n      nextFocusNode = treeWalker.current.previousNode();\n    }\n    if (match(event, ArrowDown)) {\n      nextFocusNode = treeWalker.current.nextNode();\n    }\n    if (matches(event, [Home, End, {\n      code: 'KeyA'\n    }])) {\n      const nodeIds = [];\n      if (matches(event, [Home, End])) {\n        if (multiselect && event.shiftKey && event.ctrlKey && !treeWalker.current.currentNode.getAttribute('aria-disabled')) {\n          nodeIds.push(treeWalker.current.currentNode?.id);\n        }\n        while (match(event, Home) ? treeWalker.current.previousNode() : treeWalker.current.nextNode()) {\n          nextFocusNode = treeWalker.current.currentNode;\n          if (multiselect && event.shiftKey && event.ctrlKey && !nextFocusNode.getAttribute('aria-disabled')) {\n            nodeIds.push(nextFocusNode?.id);\n          }\n        }\n      }\n      if (match(event, {\n        code: 'KeyA'\n      }) && event.ctrlKey) {\n        treeWalker.current.currentNode = treeWalker.current.root;\n        while (treeWalker.current.nextNode()) {\n          if (!treeWalker.current.currentNode.getAttribute('aria-disabled')) {\n            nodeIds.push(treeWalker.current.currentNode?.id);\n          }\n        }\n      }\n      setSelected(selected.concat(nodeIds));\n    }\n    if (nextFocusNode && nextFocusNode !== event.target) {\n      resetNodeTabIndices();\n      nextFocusNode.tabIndex = 0;\n      nextFocusNode.focus();\n    }\n    rest?.onKeyDown?.(event);\n  }\n  useEffect(() => {\n    treeWalker.current = treeWalker.current ?? document.createTreeWalker(treeRootRef?.current, NodeFilter.SHOW_ELEMENT, {\n      acceptNode: function (node) {\n        if (node.classList.contains(`${prefix}--tree-node--disabled`)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n        if (node.matches(`li.${prefix}--tree-node`)) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n        return NodeFilter.FILTER_SKIP;\n      }\n    });\n  }, [prefix]);\n  const useActiveAndSelectedOnMount = () => useEffect(() => {\n    if (preselected.length) {\n      setSelected(preselected);\n    }\n    if (prespecifiedActive) {\n      setActive(prespecifiedActive);\n    }\n  }, []);\n  useActiveAndSelectedOnMount();\n  const labelId = `${treeId}__label`;\n  const TreeLabel = () => !hideLabel && /*#__PURE__*/React__default.createElement(\"label\", {\n    id: labelId,\n    className: `${prefix}--label`\n  }, label);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(TreeLabel, null), /*#__PURE__*/React__default.createElement(\"ul\", _extends({}, rest, {\n    \"aria-label\": hideLabel ? label : null,\n    \"aria-labelledby\": !hideLabel ? labelId : null,\n    \"aria-multiselectable\": multiselect || null,\n    className: treeClasses,\n    onKeyDown: handleKeyDown,\n    ref: treeRootRef,\n    role: \"tree\"\n  }), nodesWithProps));\n}\nTreeView.propTypes = {\n  /**\n   * Mark the active node in the tree, represented by its value\n   */\n  active: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Specify the children of the TreeView\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the TreeView\n   */\n  className: PropTypes.string,\n  /**\n   * Specify whether or not the label should be hidden\n   */\n  hideLabel: PropTypes.bool,\n  /**\n   * Provide the label text that will be read by a screen reader\n   */\n  label: PropTypes.string.isRequired,\n  /**\n   * **[Experimental]** Specify the selection mode of the tree.\n   * If `multiselect` is `false` then only one node can be selected at a time\n   */\n  multiselect: PropTypes.bool,\n  /**\n   * Callback function that is called when any node is selected\n   */\n  onSelect: PropTypes.func,\n  /**\n   * Array representing all selected node IDs in the tree\n   */\n  selected: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  /**\n   * Specify the size of the tree from a list of available sizes.\n   */\n  size: PropTypes.oneOf(['xs', 'sm'])\n};\n\nexport { TreeView as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}