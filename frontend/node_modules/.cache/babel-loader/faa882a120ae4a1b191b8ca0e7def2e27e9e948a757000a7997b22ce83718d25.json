{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default, { forwardRef } from 'react';\nimport deprecate from '../../prop-types/deprecate.js';\n\n// Note: Maybe we should use `as` instead of `element`? `as` appears to be\n// standard and is used in other places in this project.\nfunction LinkRenderFunction(_ref, ref) {\n  let {\n    element,\n    as: BaseComponent,\n    // Captured here to prevent it from being passed into the created element.\n    // See https://github.com/carbon-design-system/carbon/issues/3970\n    isSideNavExpanded: _isSideNavExpanded,\n    ...rest\n  } = _ref;\n  const BaseComponentAsAny = BaseComponent ?? element ?? 'a';\n  return /*#__PURE__*/React__default.createElement(BaseComponentAsAny, _extends({\n    ref: ref\n  }, rest));\n}\n\n/**\n * Link is a custom component that allows us to supporting rendering elements\n * other than `a` in our markup. The goal is to allow users to support passing\n * in their own components to support use-cases like `react-router` or\n * `@reach/router`\n */\nconst Link = /*#__PURE__*/forwardRef(LinkRenderFunction);\nconst LinkPropTypes = {\n  /**\n   * Provide a custom element or component to render the top-level node for the\n   * component.\n   */\n  as: PropTypes.elementType,\n  /**\n   * The base element to use to build the link. Defaults to `a`, can also accept\n   * alternative tag names or custom components like `Link` from `react-router`.\n   * @deprecated Use `as` instead\n   *\n   */\n  element: deprecate(PropTypes.elementType, 'The `element` prop for `Link` has been deprecated. Please use `as` ' + 'instead. This will be removed in the next major release.'),\n  /**\n   * Property to indicate if the side nav container is open (or not). Use to\n   * keep local state and styling in step with the SideNav expansion state.\n   */\n  isSideNavExpanded: PropTypes.bool\n};\nLink.displayName = 'Link';\nLink.propTypes = LinkPropTypes;\nvar Link$1 = Link;\nexport { LinkPropTypes, Link$1 as default };","map":{"version":3,"names":["extends","_extends","PropTypes","React__default","forwardRef","deprecate","LinkRenderFunction","_ref","ref","element","as","BaseComponent","isSideNavExpanded","_isSideNavExpanded","rest","BaseComponentAsAny","createElement","Link","LinkPropTypes","elementType","bool","displayName","propTypes","Link$1","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/UIShell/Link.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default, { forwardRef } from 'react';\nimport deprecate from '../../prop-types/deprecate.js';\n\n// Note: Maybe we should use `as` instead of `element`? `as` appears to be\n// standard and is used in other places in this project.\nfunction LinkRenderFunction(_ref, ref) {\n  let {\n    element,\n    as: BaseComponent,\n    // Captured here to prevent it from being passed into the created element.\n    // See https://github.com/carbon-design-system/carbon/issues/3970\n    isSideNavExpanded: _isSideNavExpanded,\n    ...rest\n  } = _ref;\n  const BaseComponentAsAny = BaseComponent ?? element ?? 'a';\n  return /*#__PURE__*/React__default.createElement(BaseComponentAsAny, _extends({\n    ref: ref\n  }, rest));\n}\n\n/**\n * Link is a custom component that allows us to supporting rendering elements\n * other than `a` in our markup. The goal is to allow users to support passing\n * in their own components to support use-cases like `react-router` or\n * `@reach/router`\n */\nconst Link = /*#__PURE__*/forwardRef(LinkRenderFunction);\nconst LinkPropTypes = {\n  /**\n   * Provide a custom element or component to render the top-level node for the\n   * component.\n   */\n  as: PropTypes.elementType,\n  /**\n   * The base element to use to build the link. Defaults to `a`, can also accept\n   * alternative tag names or custom components like `Link` from `react-router`.\n   * @deprecated Use `as` instead\n   *\n   */\n  element: deprecate(PropTypes.elementType, 'The `element` prop for `Link` has been deprecated. Please use `as` ' + 'instead. This will be removed in the next major release.'),\n  /**\n   * Property to indicate if the side nav container is open (or not). Use to\n   * keep local state and styling in step with the SideNav expansion state.\n   */\n  isSideNavExpanded: PropTypes.bool\n};\nLink.displayName = 'Link';\nLink.propTypes = LinkPropTypes;\nvar Link$1 = Link;\n\nexport { LinkPropTypes, Link$1 as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,OAAO,IAAIC,QAAQ,QAAQ,6CAA6C;AACjF,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,IAAIC,UAAU,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,+BAA+B;;AAErD;AACA;AACA,SAASC,kBAAkBA,CAACC,IAAI,EAAEC,GAAG,EAAE;EACrC,IAAI;IACFC,OAAO;IACPC,EAAE,EAAEC,aAAa;IACjB;IACA;IACAC,iBAAiB,EAAEC,kBAAkB;IACrC,GAAGC;EACL,CAAC,GAAGP,IAAI;EACR,MAAMQ,kBAAkB,GAAGJ,aAAa,IAAIF,OAAO,IAAI,GAAG;EAC1D,OAAO,aAAaN,cAAc,CAACa,aAAa,CAACD,kBAAkB,EAAEd,QAAQ,CAAC;IAC5EO,GAAG,EAAEA;EACP,CAAC,EAAEM,IAAI,CAAC,CAAC;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,IAAI,GAAG,aAAab,UAAU,CAACE,kBAAkB,CAAC;AACxD,MAAMY,aAAa,GAAG;EACpB;AACF;AACA;AACA;EACER,EAAE,EAAER,SAAS,CAACiB,WAAW;EACzB;AACF;AACA;AACA;AACA;AACA;EACEV,OAAO,EAAEJ,SAAS,CAACH,SAAS,CAACiB,WAAW,EAAE,qEAAqE,GAAG,0DAA0D,CAAC;EAC7K;AACF;AACA;AACA;EACEP,iBAAiB,EAAEV,SAAS,CAACkB;AAC/B,CAAC;AACDH,IAAI,CAACI,WAAW,GAAG,MAAM;AACzBJ,IAAI,CAACK,SAAS,GAAGJ,aAAa;AAC9B,IAAIK,MAAM,GAAGN,IAAI;AAEjB,SAASC,aAAa,EAAEK,MAAM,IAAIC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}