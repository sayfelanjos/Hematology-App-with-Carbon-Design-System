{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default, { useRef, useState, useMemo, useEffect } from 'react';\nimport Search from '../Search/Search.js';\nimport '../Search/Search.Skeleton.js';\nimport setupGetInstanceId from './tools/instanceId.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nconst getInstanceId = setupGetInstanceId();\nconst translationKeys = {\n  'carbon.table.toolbar.search.label': 'Filter table',\n  'carbon.table.toolbar.search.placeholder': 'Filter table'\n};\nconst translateWithId = id => {\n  return translationKeys[id];\n};\nconst TableToolbarSearch = _ref => {\n  let {\n    className,\n    searchContainerClass,\n    onChange: onChangeProp,\n    onClear,\n    translateWithId: t,\n    placeholder,\n    labelText,\n    expanded: expandedProp,\n    defaultExpanded,\n    defaultValue,\n    disabled,\n    onExpand,\n    persistent,\n    id,\n    onBlur,\n    onFocus,\n    size = 'lg',\n    ...rest\n  } = _ref;\n  const {\n    current: controlled\n  } = useRef(expandedProp !== undefined);\n  const [expandedState, setExpandedState] = useState(defaultExpanded || defaultValue);\n  const expanded = controlled ? expandedProp : expandedState;\n  const [value, setValue] = useState(defaultValue || '');\n  const uniqueId = useMemo(getInstanceId, []);\n  const [focusTarget, setFocusTarget] = useState(null);\n  const prefix = usePrefix();\n  useEffect(() => {\n    if (focusTarget) {\n      focusTarget.current.querySelector('input').focus();\n      setFocusTarget(null);\n    }\n  }, [focusTarget]);\n  useEffect(() => {\n    if (defaultValue) {\n      onChangeProp('', defaultValue);\n    }\n  },\n  //eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  const searchClasses = cx(className, {\n    [searchContainerClass]: searchContainerClass,\n    [`${prefix}--toolbar-search-container-active`]: expanded,\n    [`${prefix}--toolbar-search-container-disabled`]: disabled,\n    [`${prefix}--toolbar-search-container-expandable`]: !persistent,\n    [`${prefix}--toolbar-search-container-persistent`]: persistent\n  });\n  const handleExpand = function (event) {\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !expanded;\n    if (!disabled) {\n      if (!controlled && !persistent) {\n        setExpandedState(value);\n      }\n      if (onExpand) {\n        onExpand(event, value);\n      }\n    }\n  };\n  const onChange = e => {\n    setValue(e.target.value);\n    if (onChangeProp) {\n      onChangeProp(e);\n    }\n  };\n  const handleOnFocus = event => handleExpand(event, true);\n  const handleOnBlur = event => !value && handleExpand(event, false);\n  return /*#__PURE__*/React__default.createElement(Search, _extends({\n    disabled: disabled,\n    className: searchClasses,\n    value: value,\n    id: typeof id !== 'undefined' ? id : uniqueId.toString(),\n    labelText: labelText || t('carbon.table.toolbar.search.label'),\n    placeholder: placeholder || t('carbon.table.toolbar.search.placeholder'),\n    onChange: onChange,\n    onClear: onClear,\n    onFocus: onFocus ? event => onFocus(event, handleExpand) : handleOnFocus,\n    onBlur: onBlur ? event => onBlur(event, handleExpand) : handleOnBlur,\n    size: size\n  }, rest));\n};\nTableToolbarSearch.propTypes = {\n  children: PropTypes.node,\n  /**\n   * Provide an optional class name for the search container\n   */\n  className: PropTypes.string,\n  /**\n   * Specifies if the search should initially render in an expanded state\n   */\n  defaultExpanded: PropTypes.bool,\n  /**\n   * Provide an optional default value for the Search component\n   */\n  defaultValue: PropTypes.string,\n  /**\n   * Specifies if the search should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specifies if the search should expand\n   */\n  expanded: PropTypes.bool,\n  /**\n   * Provide an optional id for the search container\n   */\n  id: PropTypes.string,\n  /**\n   * Provide an optional label text for the Search component icon\n   */\n  labelText: PropTypes.string,\n  /**\n   * Provide an optional function to be called when the search input loses focus, this will be\n   * passed the event as the first parameter and a function to handle the expanding of the search\n   * input as the second\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Provide an optional hook that is called each time the input is updated\n   */\n  onChange: PropTypes.func,\n  /**\n   * Optional callback called when the search value is cleared.\n   */\n  onClear: PropTypes.func,\n  /**\n   * Provide an optional hook that is called each time the input is expanded\n   */\n  onExpand: PropTypes.func,\n  /**\n   * Provide an optional function to be called when the search input gains focus, this will be\n   * passed the event as the first parameter and a function to handle the expanding of the search\n   * input as the second.\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Whether the search should be allowed to expand\n   */\n  persistent: PropTypes.bool,\n  /**\n   * Provide an optional placeholder text for the Search component\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Provide an optional className for the overall container of the Search\n   */\n  searchContainerClass: PropTypes.string,\n  /**\n   * Specify the size of the Search\n   */\n  size: PropTypes.oneOf(['sm', 'md', 'lg']),\n  /**\n   * Optional prop to specify the tabIndex of the <Search> (in expanded state) or the container (in collapsed state)\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Provide custom text for the component for each translation id\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nTableToolbarSearch.defaultProps = {\n  tabIndex: '0',\n  translateWithId,\n  persistent: false,\n  onClear: () => {}\n};\nvar TableToolbarSearch$1 = TableToolbarSearch;\nexport { TableToolbarSearch$1 as default };","map":{"version":3,"names":["extends","_extends","cx","PropTypes","React__default","useRef","useState","useMemo","useEffect","Search","setupGetInstanceId","usePrefix","getInstanceId","translationKeys","translateWithId","id","TableToolbarSearch","_ref","className","searchContainerClass","onChange","onChangeProp","onClear","t","placeholder","labelText","expanded","expandedProp","defaultExpanded","defaultValue","disabled","onExpand","persistent","onBlur","onFocus","size","rest","current","controlled","undefined","expandedState","setExpandedState","value","setValue","uniqueId","focusTarget","setFocusTarget","prefix","querySelector","focus","searchClasses","handleExpand","event","arguments","length","e","target","handleOnFocus","handleOnBlur","createElement","toString","propTypes","children","node","string","bool","func","oneOf","tabIndex","oneOfType","number","isRequired","defaultProps","TableToolbarSearch$1","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/DataTable/TableToolbarSearch.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default, { useRef, useState, useMemo, useEffect } from 'react';\nimport Search from '../Search/Search.js';\nimport '../Search/Search.Skeleton.js';\nimport setupGetInstanceId from './tools/instanceId.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\nconst getInstanceId = setupGetInstanceId();\nconst translationKeys = {\n  'carbon.table.toolbar.search.label': 'Filter table',\n  'carbon.table.toolbar.search.placeholder': 'Filter table'\n};\nconst translateWithId = id => {\n  return translationKeys[id];\n};\nconst TableToolbarSearch = _ref => {\n  let {\n    className,\n    searchContainerClass,\n    onChange: onChangeProp,\n    onClear,\n    translateWithId: t,\n    placeholder,\n    labelText,\n    expanded: expandedProp,\n    defaultExpanded,\n    defaultValue,\n    disabled,\n    onExpand,\n    persistent,\n    id,\n    onBlur,\n    onFocus,\n    size = 'lg',\n    ...rest\n  } = _ref;\n  const {\n    current: controlled\n  } = useRef(expandedProp !== undefined);\n  const [expandedState, setExpandedState] = useState(defaultExpanded || defaultValue);\n  const expanded = controlled ? expandedProp : expandedState;\n  const [value, setValue] = useState(defaultValue || '');\n  const uniqueId = useMemo(getInstanceId, []);\n  const [focusTarget, setFocusTarget] = useState(null);\n  const prefix = usePrefix();\n  useEffect(() => {\n    if (focusTarget) {\n      focusTarget.current.querySelector('input').focus();\n      setFocusTarget(null);\n    }\n  }, [focusTarget]);\n  useEffect(() => {\n    if (defaultValue) {\n      onChangeProp('', defaultValue);\n    }\n  },\n  //eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  const searchClasses = cx(className, {\n    [searchContainerClass]: searchContainerClass,\n    [`${prefix}--toolbar-search-container-active`]: expanded,\n    [`${prefix}--toolbar-search-container-disabled`]: disabled,\n    [`${prefix}--toolbar-search-container-expandable`]: !persistent,\n    [`${prefix}--toolbar-search-container-persistent`]: persistent\n  });\n  const handleExpand = function (event) {\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !expanded;\n    if (!disabled) {\n      if (!controlled && !persistent) {\n        setExpandedState(value);\n      }\n      if (onExpand) {\n        onExpand(event, value);\n      }\n    }\n  };\n  const onChange = e => {\n    setValue(e.target.value);\n    if (onChangeProp) {\n      onChangeProp(e);\n    }\n  };\n  const handleOnFocus = event => handleExpand(event, true);\n  const handleOnBlur = event => !value && handleExpand(event, false);\n  return /*#__PURE__*/React__default.createElement(Search, _extends({\n    disabled: disabled,\n    className: searchClasses,\n    value: value,\n    id: typeof id !== 'undefined' ? id : uniqueId.toString(),\n    labelText: labelText || t('carbon.table.toolbar.search.label'),\n    placeholder: placeholder || t('carbon.table.toolbar.search.placeholder'),\n    onChange: onChange,\n    onClear: onClear,\n    onFocus: onFocus ? event => onFocus(event, handleExpand) : handleOnFocus,\n    onBlur: onBlur ? event => onBlur(event, handleExpand) : handleOnBlur,\n    size: size\n  }, rest));\n};\nTableToolbarSearch.propTypes = {\n  children: PropTypes.node,\n  /**\n   * Provide an optional class name for the search container\n   */\n  className: PropTypes.string,\n  /**\n   * Specifies if the search should initially render in an expanded state\n   */\n  defaultExpanded: PropTypes.bool,\n  /**\n   * Provide an optional default value for the Search component\n   */\n  defaultValue: PropTypes.string,\n  /**\n   * Specifies if the search should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specifies if the search should expand\n   */\n  expanded: PropTypes.bool,\n  /**\n   * Provide an optional id for the search container\n   */\n  id: PropTypes.string,\n  /**\n   * Provide an optional label text for the Search component icon\n   */\n  labelText: PropTypes.string,\n  /**\n   * Provide an optional function to be called when the search input loses focus, this will be\n   * passed the event as the first parameter and a function to handle the expanding of the search\n   * input as the second\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Provide an optional hook that is called each time the input is updated\n   */\n  onChange: PropTypes.func,\n  /**\n   * Optional callback called when the search value is cleared.\n   */\n  onClear: PropTypes.func,\n  /**\n   * Provide an optional hook that is called each time the input is expanded\n   */\n  onExpand: PropTypes.func,\n  /**\n   * Provide an optional function to be called when the search input gains focus, this will be\n   * passed the event as the first parameter and a function to handle the expanding of the search\n   * input as the second.\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Whether the search should be allowed to expand\n   */\n  persistent: PropTypes.bool,\n  /**\n   * Provide an optional placeholder text for the Search component\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Provide an optional className for the overall container of the Search\n   */\n  searchContainerClass: PropTypes.string,\n  /**\n   * Specify the size of the Search\n   */\n  size: PropTypes.oneOf(['sm', 'md', 'lg']),\n  /**\n   * Optional prop to specify the tabIndex of the <Search> (in expanded state) or the container (in collapsed state)\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Provide custom text for the component for each translation id\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nTableToolbarSearch.defaultProps = {\n  tabIndex: '0',\n  translateWithId,\n  persistent: false,\n  onClear: () => {}\n};\nvar TableToolbarSearch$1 = TableToolbarSearch;\n\nexport { TableToolbarSearch$1 as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}