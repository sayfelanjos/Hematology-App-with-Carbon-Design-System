{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { initialSortState, getSortedState } from './sorting.js';\nimport normalize from '../tools/normalize.js';\n\n/**\n * Helper to derive the next state from the given props and the\n * prevState. Potential future-facing API hook for React v17.\n *\n * Currently, it's being used as a way to normalize the incoming data that we\n * are receiving for rows\n */\nconst getDerivedStateFromProps = (props, prevState) => {\n  const {\n    rowIds,\n    rowsById,\n    cellsById\n  } = normalize(props.rows, props.headers, prevState);\n  const state = {\n    rowIds,\n    rowsById,\n    cellsById,\n    sortDirection: prevState.sortDirection || initialSortState,\n    sortHeaderKey: prevState.sortHeaderKey || null,\n    // Copy over rowIds so the reference doesn't mutate the stored\n    // `initialRowOrder`\n    initialRowOrder: rowIds.slice(),\n    filterInputValue: prevState.filterInputValue || null,\n    // Optional state field to indicate whether a consumer should show a\n    // batch actions menu\n    shouldShowBatchActions: prevState.shouldShowBatchActions || false\n  };\n  if (prevState.sortDirection && prevState.sortHeaderKey) {\n    const {\n      rowIds\n    } = getSortedState(props, state, prevState.sortHeaderKey, prevState.sortDirection);\n    state.rowIds = rowIds;\n  }\n  state.isExpandedAll = state.rowIds.every(id => {\n    return state.rowsById[id].isExpanded === true;\n  });\n  return state;\n};\nvar getDerivedStateFromProps$1 = getDerivedStateFromProps;\nexport { getDerivedStateFromProps$1 as default };","map":{"version":3,"names":["initialSortState","getSortedState","normalize","getDerivedStateFromProps","props","prevState","rowIds","rowsById","cellsById","rows","headers","state","sortDirection","sortHeaderKey","initialRowOrder","slice","filterInputValue","shouldShowBatchActions","isExpandedAll","every","id","isExpanded","getDerivedStateFromProps$1","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/DataTable/state/getDerivedStateFromProps.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { initialSortState, getSortedState } from './sorting.js';\nimport normalize from '../tools/normalize.js';\n\n/**\n * Helper to derive the next state from the given props and the\n * prevState. Potential future-facing API hook for React v17.\n *\n * Currently, it's being used as a way to normalize the incoming data that we\n * are receiving for rows\n */\nconst getDerivedStateFromProps = (props, prevState) => {\n  const {\n    rowIds,\n    rowsById,\n    cellsById\n  } = normalize(props.rows, props.headers, prevState);\n  const state = {\n    rowIds,\n    rowsById,\n    cellsById,\n    sortDirection: prevState.sortDirection || initialSortState,\n    sortHeaderKey: prevState.sortHeaderKey || null,\n    // Copy over rowIds so the reference doesn't mutate the stored\n    // `initialRowOrder`\n    initialRowOrder: rowIds.slice(),\n    filterInputValue: prevState.filterInputValue || null,\n    // Optional state field to indicate whether a consumer should show a\n    // batch actions menu\n    shouldShowBatchActions: prevState.shouldShowBatchActions || false\n  };\n  if (prevState.sortDirection && prevState.sortHeaderKey) {\n    const {\n      rowIds\n    } = getSortedState(props, state, prevState.sortHeaderKey, prevState.sortDirection);\n    state.rowIds = rowIds;\n  }\n  state.isExpandedAll = state.rowIds.every(id => {\n    return state.rowsById[id].isExpanded === true;\n  });\n  return state;\n};\nvar getDerivedStateFromProps$1 = getDerivedStateFromProps;\n\nexport { getDerivedStateFromProps$1 as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,gBAAgB,EAAEC,cAAc,QAAQ,cAAc;AAC/D,OAAOC,SAAS,MAAM,uBAAuB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,wBAAwB,GAAGA,CAACC,KAAK,EAAEC,SAAS,KAAK;EACrD,MAAM;IACJC,MAAM;IACNC,QAAQ;IACRC;EACF,CAAC,GAAGN,SAAS,CAACE,KAAK,CAACK,IAAI,EAAEL,KAAK,CAACM,OAAO,EAAEL,SAAS,CAAC;EACnD,MAAMM,KAAK,GAAG;IACZL,MAAM;IACNC,QAAQ;IACRC,SAAS;IACTI,aAAa,EAAEP,SAAS,CAACO,aAAa,IAAIZ,gBAAgB;IAC1Da,aAAa,EAAER,SAAS,CAACQ,aAAa,IAAI,IAAI;IAC9C;IACA;IACAC,eAAe,EAAER,MAAM,CAACS,KAAK,CAAC,CAAC;IAC/BC,gBAAgB,EAAEX,SAAS,CAACW,gBAAgB,IAAI,IAAI;IACpD;IACA;IACAC,sBAAsB,EAAEZ,SAAS,CAACY,sBAAsB,IAAI;EAC9D,CAAC;EACD,IAAIZ,SAAS,CAACO,aAAa,IAAIP,SAAS,CAACQ,aAAa,EAAE;IACtD,MAAM;MACJP;IACF,CAAC,GAAGL,cAAc,CAACG,KAAK,EAAEO,KAAK,EAAEN,SAAS,CAACQ,aAAa,EAAER,SAAS,CAACO,aAAa,CAAC;IAClFD,KAAK,CAACL,MAAM,GAAGA,MAAM;EACvB;EACAK,KAAK,CAACO,aAAa,GAAGP,KAAK,CAACL,MAAM,CAACa,KAAK,CAACC,EAAE,IAAI;IAC7C,OAAOT,KAAK,CAACJ,QAAQ,CAACa,EAAE,CAAC,CAACC,UAAU,KAAK,IAAI;EAC/C,CAAC,CAAC;EACF,OAAOV,KAAK;AACd,CAAC;AACD,IAAIW,0BAA0B,GAAGnB,wBAAwB;AAEzD,SAASmB,0BAA0B,IAAIC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}