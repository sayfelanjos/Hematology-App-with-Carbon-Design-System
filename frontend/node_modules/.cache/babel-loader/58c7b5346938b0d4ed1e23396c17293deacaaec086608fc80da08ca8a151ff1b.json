{"ast":null,"code":"import _toConsumableArray from \"/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectWithoutProperties from \"/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"paragraph\", \"lineCount\", \"width\", \"heading\", \"className\"];\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default, { useRef } from 'react';\nimport cx from 'classnames';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport useIsomorphicEffect from '../../internal/useIsomorphicEffect.js';\nvar randoms = [0.973051493507435, 0.15334737213558558, 0.5671034553053769];\nfunction getRandomInt(min, max, n) {\n  return Math.floor(randoms[n % 3] * (max - min + 1)) + min;\n}\nvar SkeletonText = function SkeletonText(_ref) {\n  var _cx;\n  var _ref$paragraph = _ref.paragraph,\n    paragraph = _ref$paragraph === void 0 ? false : _ref$paragraph,\n    _ref$lineCount = _ref.lineCount,\n    lineCount = _ref$lineCount === void 0 ? 3 : _ref$lineCount,\n    _ref$width = _ref.width,\n    width = _ref$width === void 0 ? '100%' : _ref$width,\n    _ref$heading = _ref.heading,\n    heading = _ref$heading === void 0 ? false : _ref$heading,\n    _ref$className = _ref.className,\n    className = _ref$className === void 0 ? '' : _ref$className,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var prefix = usePrefix();\n  var skeletonTextClasses = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--skeleton__text\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--skeleton__heading\"), heading), _defineProperty(_cx, className, className), _cx));\n  var widthNum = parseInt(width, 10);\n  var widthPx = width.includes('px');\n  var widthPercent = width.includes('%');\n  var lineCountNumber = 1;\n  if (paragraph) {\n    lineCountNumber = lineCount;\n  }\n  var refs = useRef([]);\n  useIsomorphicEffect(function () {\n    refs.current.map(function (item, j) {\n      var randomPercentWidth = getRandomInt(0, 75, j) + 'px';\n      var randomPxWidth = getRandomInt(Math.max(widthNum - 75, 0), widthNum, j) + 'px';\n      if (item) {\n        if (widthPercent && paragraph) {\n          item.style.width = \"calc(\".concat(width, \" - \").concat(randomPercentWidth, \")\");\n        } else if (widthPx && paragraph) {\n          item.style.width = randomPxWidth;\n        } else {\n          item.style.width = width;\n        }\n      }\n    });\n  }, [lineCountNumber, paragraph, refs, width, widthNum, widthPercent, widthPx]);\n  var lines = [];\n  for (var i = 0; i < lineCountNumber; i++) {\n    lines.push( /*#__PURE__*/React__default.createElement(\"p\", _extends({\n      className: skeletonTextClasses,\n      key: i,\n      ref: function ref(el) {\n        return refs.current = [].concat(_toConsumableArray(refs.current), [el]);\n      }\n    }, rest)));\n  }\n  if (lineCountNumber !== 1) {\n    return /*#__PURE__*/React__default.createElement(\"div\", null, lines);\n  }\n\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, lines);\n};\nSkeletonText.propTypes = {\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n  /**\n   * generates skeleton text at a larger size\n   */\n  heading: PropTypes.bool,\n  /**\n   * the number of lines shown if paragraph is true\n   */\n  lineCount: PropTypes.number,\n  /**\n   * will generate multiple lines of text\n   */\n  paragraph: PropTypes.bool,\n  /**\n   * width (in px or %) of single line of text or max-width of paragraph lines\n   */\n  width: PropTypes.string\n};\nSkeletonText.defaultProps = {\n  paragraph: false,\n  width: '100%',\n  heading: false,\n  lineCount: 3\n};\nexport { SkeletonText as default };","map":{"version":3,"names":["extends","_extends","PropTypes","React__default","useRef","cx","usePrefix","useIsomorphicEffect","randoms","getRandomInt","min","max","n","Math","floor","SkeletonText","_ref","_cx","_ref$paragraph","paragraph","_ref$lineCount","lineCount","_ref$width","width","_ref$heading","heading","_ref$className","className","rest","_objectWithoutProperties","_excluded","prefix","skeletonTextClasses","_defineProperty","concat","widthNum","parseInt","widthPx","includes","widthPercent","lineCountNumber","refs","current","map","item","j","randomPercentWidth","randomPxWidth","style","lines","i","push","createElement","key","ref","el","_toConsumableArray","Fragment","propTypes","string","bool","number","defaultProps","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/SkeletonText/SkeletonText.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default, { useRef } from 'react';\nimport cx from 'classnames';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport useIsomorphicEffect from '../../internal/useIsomorphicEffect.js';\n\nconst randoms = [0.973051493507435, 0.15334737213558558, 0.5671034553053769];\nfunction getRandomInt(min, max, n) {\n  return Math.floor(randoms[n % 3] * (max - min + 1)) + min;\n}\nconst SkeletonText = _ref => {\n  let {\n    paragraph = false,\n    lineCount = 3,\n    width = '100%',\n    heading = false,\n    className = '',\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const skeletonTextClasses = cx({\n    [`${prefix}--skeleton__text`]: true,\n    [`${prefix}--skeleton__heading`]: heading,\n    [className]: className\n  });\n  const widthNum = parseInt(width, 10);\n  const widthPx = width.includes('px');\n  const widthPercent = width.includes('%');\n  let lineCountNumber = 1;\n  if (paragraph) {\n    lineCountNumber = lineCount;\n  }\n  const refs = useRef([]);\n  useIsomorphicEffect(() => {\n    refs.current.map((item, j) => {\n      const randomPercentWidth = getRandomInt(0, 75, j) + 'px';\n      const randomPxWidth = getRandomInt(Math.max(widthNum - 75, 0), widthNum, j) + 'px';\n      if (item) {\n        if (widthPercent && paragraph) {\n          item.style.width = `calc(${width} - ${randomPercentWidth})`;\n        } else if (widthPx && paragraph) {\n          item.style.width = randomPxWidth;\n        } else {\n          item.style.width = width;\n        }\n      }\n    });\n  }, [lineCountNumber, paragraph, refs, width, widthNum, widthPercent, widthPx]);\n  const lines = [];\n  for (let i = 0; i < lineCountNumber; i++) {\n    lines.push( /*#__PURE__*/React__default.createElement(\"p\", _extends({\n      className: skeletonTextClasses,\n      key: i,\n      ref: el => refs.current = [...refs.current, el]\n    }, rest)));\n  }\n  if (lineCountNumber !== 1) {\n    return /*#__PURE__*/React__default.createElement(\"div\", null, lines);\n  }\n\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, lines);\n};\nSkeletonText.propTypes = {\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n  /**\n   * generates skeleton text at a larger size\n   */\n  heading: PropTypes.bool,\n  /**\n   * the number of lines shown if paragraph is true\n   */\n  lineCount: PropTypes.number,\n  /**\n   * will generate multiple lines of text\n   */\n  paragraph: PropTypes.bool,\n  /**\n   * width (in px or %) of single line of text or max-width of paragraph lines\n   */\n  width: PropTypes.string\n};\nSkeletonText.defaultProps = {\n  paragraph: false,\n  width: '100%',\n  heading: false,\n  lineCount: 3\n};\n\nexport { SkeletonText as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}