{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Default implementation of how we filter rows internally. The idea behind this\n * implementation is to use the given list of row ids and headers to get the\n * individual cell values for a row. Then, we go through each cell value and see\n * if any of them includes the given inputValue.\n *\n * @param {object} config\n * @param {Array<string>} config.rowIds array of all the row ids in the table\n * @param {Array<object>} config.headers\n * @param {object} config.cellsById object containing a map of cell id to cell\n * @param {string} config.inputValue the current input value in the Table Search\n * @param {Function} config.getCellId\n * @returns {Array<string>} rowIds\n */\nconst defaultFilterRows = _ref => {\n  let {\n    rowIds,\n    headers,\n    cellsById,\n    inputValue,\n    getCellId\n  } = _ref;\n  return rowIds.filter(rowId => headers.some(_ref2 => {\n    let {\n      key\n    } = _ref2;\n    const id = getCellId(rowId, key);\n    if (typeof cellsById[id].value === 'boolean') {\n      return false;\n    }\n    return ('' + cellsById[id].value).toLowerCase().includes(inputValue.toLowerCase());\n  }));\n};\nexport { defaultFilterRows };","map":{"version":3,"names":["defaultFilterRows","_ref","rowIds","headers","cellsById","inputValue","getCellId","filter","rowId","some","_ref2","key","id","value","toLowerCase","includes"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/DataTable/tools/filter.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Default implementation of how we filter rows internally. The idea behind this\n * implementation is to use the given list of row ids and headers to get the\n * individual cell values for a row. Then, we go through each cell value and see\n * if any of them includes the given inputValue.\n *\n * @param {object} config\n * @param {Array<string>} config.rowIds array of all the row ids in the table\n * @param {Array<object>} config.headers\n * @param {object} config.cellsById object containing a map of cell id to cell\n * @param {string} config.inputValue the current input value in the Table Search\n * @param {Function} config.getCellId\n * @returns {Array<string>} rowIds\n */\nconst defaultFilterRows = _ref => {\n  let {\n    rowIds,\n    headers,\n    cellsById,\n    inputValue,\n    getCellId\n  } = _ref;\n  return rowIds.filter(rowId => headers.some(_ref2 => {\n    let {\n      key\n    } = _ref2;\n    const id = getCellId(rowId, key);\n    if (typeof cellsById[id].value === 'boolean') {\n      return false;\n    }\n    return ('' + cellsById[id].value).toLowerCase().includes(inputValue.toLowerCase());\n  }));\n};\n\nexport { defaultFilterRows };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,iBAAiB,GAAGC,IAAI,IAAI;EAChC,IAAI;IACFC,MAAM;IACNC,OAAO;IACPC,SAAS;IACTC,UAAU;IACVC;EACF,CAAC,GAAGL,IAAI;EACR,OAAOC,MAAM,CAACK,MAAM,CAACC,KAAK,IAAIL,OAAO,CAACM,IAAI,CAACC,KAAK,IAAI;IAClD,IAAI;MACFC;IACF,CAAC,GAAGD,KAAK;IACT,MAAME,EAAE,GAAGN,SAAS,CAACE,KAAK,EAAEG,GAAG,CAAC;IAChC,IAAI,OAAOP,SAAS,CAACQ,EAAE,CAAC,CAACC,KAAK,KAAK,SAAS,EAAE;MAC5C,OAAO,KAAK;IACd;IACA,OAAO,CAAC,EAAE,GAAGT,SAAS,CAACQ,EAAE,CAAC,CAACC,KAAK,EAAEC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACV,UAAU,CAACS,WAAW,CAAC,CAAC,CAAC;EACpF,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAASd,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}