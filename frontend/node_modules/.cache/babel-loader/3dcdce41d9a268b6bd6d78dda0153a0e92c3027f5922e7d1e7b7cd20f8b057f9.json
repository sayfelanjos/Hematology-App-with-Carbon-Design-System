{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport rangePlugin from 'flatpickr/dist/plugins/rangePlugin';\n\n/**\n * @param {object} config Plugin configuration.\n * @returns {Plugin} An extension of Flatpickr `rangePlugin` that does the following:\n *   * Better ensures the calendar dropdown is always aligned to the `<input>` for the starting date.\n *     Workaround for: https://github.com/flatpickr/flatpickr/issues/1944\n *   * A logic to ensure `fp.setDate()` call won't end up with \"startDate to endDate\" set to the first `<input>`\n */\nvar carbonFlatpickrRangePlugin = config => {\n  const factory = rangePlugin(Object.assign({\n    position: 'left'\n  }, config));\n  return fp => {\n    const origSetDate = fp.setDate;\n    const init = () => {\n      fp.setDate = function setDate(dates, triggerChange, format) {\n        origSetDate.call(this, dates, triggerChange, format);\n        // If `triggerChange` is `true`, `onValueUpdate` Flatpickr event is fired\n        // where Flatpickr's range plugin takes care of fixing the first `<input>`\n        if (!triggerChange) {\n          const {\n            _input: inputFrom\n          } = fp;\n          const {\n            input: inputTo\n          } = config;\n          [inputFrom, inputTo].forEach((input, i) => {\n            if (input) {\n              input.value = !dates[i] ? '' : fp.formatDate(new Date(dates[i]), fp.config.dateFormat);\n            }\n          });\n        }\n      };\n    };\n    const origRangePlugin = factory(fp);\n    const {\n      onReady: origOnReady\n    } = origRangePlugin;\n    return Object.assign(origRangePlugin, {\n      onReady: [init, origOnReady],\n      onPreCalendarPosition() {}\n    });\n  };\n};\nexport { carbonFlatpickrRangePlugin as default };","map":{"version":3,"names":["rangePlugin","carbonFlatpickrRangePlugin","config","factory","Object","assign","position","fp","origSetDate","setDate","init","dates","triggerChange","format","call","_input","inputFrom","input","inputTo","forEach","i","value","formatDate","Date","dateFormat","origRangePlugin","onReady","origOnReady","onPreCalendarPosition","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/DatePicker/plugins/rangePlugin.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport rangePlugin from 'flatpickr/dist/plugins/rangePlugin';\n\n/**\n * @param {object} config Plugin configuration.\n * @returns {Plugin} An extension of Flatpickr `rangePlugin` that does the following:\n *   * Better ensures the calendar dropdown is always aligned to the `<input>` for the starting date.\n *     Workaround for: https://github.com/flatpickr/flatpickr/issues/1944\n *   * A logic to ensure `fp.setDate()` call won't end up with \"startDate to endDate\" set to the first `<input>`\n */\nvar carbonFlatpickrRangePlugin = (config => {\n  const factory = rangePlugin(Object.assign({\n    position: 'left'\n  }, config));\n  return fp => {\n    const origSetDate = fp.setDate;\n    const init = () => {\n      fp.setDate = function setDate(dates, triggerChange, format) {\n        origSetDate.call(this, dates, triggerChange, format);\n        // If `triggerChange` is `true`, `onValueUpdate` Flatpickr event is fired\n        // where Flatpickr's range plugin takes care of fixing the first `<input>`\n        if (!triggerChange) {\n          const {\n            _input: inputFrom\n          } = fp;\n          const {\n            input: inputTo\n          } = config;\n          [inputFrom, inputTo].forEach((input, i) => {\n            if (input) {\n              input.value = !dates[i] ? '' : fp.formatDate(new Date(dates[i]), fp.config.dateFormat);\n            }\n          });\n        }\n      };\n    };\n    const origRangePlugin = factory(fp);\n    const {\n      onReady: origOnReady\n    } = origRangePlugin;\n    return Object.assign(origRangePlugin, {\n      onReady: [init, origOnReady],\n      onPreCalendarPosition() {}\n    });\n  };\n});\n\nexport { carbonFlatpickrRangePlugin as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,WAAW,MAAM,oCAAoC;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,0BAA0B,GAAIC,MAAM,IAAI;EAC1C,MAAMC,OAAO,GAAGH,WAAW,CAACI,MAAM,CAACC,MAAM,CAAC;IACxCC,QAAQ,EAAE;EACZ,CAAC,EAAEJ,MAAM,CAAC,CAAC;EACX,OAAOK,EAAE,IAAI;IACX,MAAMC,WAAW,GAAGD,EAAE,CAACE,OAAO;IAC9B,MAAMC,IAAI,GAAGA,CAAA,KAAM;MACjBH,EAAE,CAACE,OAAO,GAAG,SAASA,OAAOA,CAACE,KAAK,EAAEC,aAAa,EAAEC,MAAM,EAAE;QAC1DL,WAAW,CAACM,IAAI,CAAC,IAAI,EAAEH,KAAK,EAAEC,aAAa,EAAEC,MAAM,CAAC;QACpD;QACA;QACA,IAAI,CAACD,aAAa,EAAE;UAClB,MAAM;YACJG,MAAM,EAAEC;UACV,CAAC,GAAGT,EAAE;UACN,MAAM;YACJU,KAAK,EAAEC;UACT,CAAC,GAAGhB,MAAM;UACV,CAACc,SAAS,EAAEE,OAAO,CAAC,CAACC,OAAO,CAAC,CAACF,KAAK,EAAEG,CAAC,KAAK;YACzC,IAAIH,KAAK,EAAE;cACTA,KAAK,CAACI,KAAK,GAAG,CAACV,KAAK,CAACS,CAAC,CAAC,GAAG,EAAE,GAAGb,EAAE,CAACe,UAAU,CAAC,IAAIC,IAAI,CAACZ,KAAK,CAACS,CAAC,CAAC,CAAC,EAAEb,EAAE,CAACL,MAAM,CAACsB,UAAU,CAAC;YACxF;UACF,CAAC,CAAC;QACJ;MACF,CAAC;IACH,CAAC;IACD,MAAMC,eAAe,GAAGtB,OAAO,CAACI,EAAE,CAAC;IACnC,MAAM;MACJmB,OAAO,EAAEC;IACX,CAAC,GAAGF,eAAe;IACnB,OAAOrB,MAAM,CAACC,MAAM,CAACoB,eAAe,EAAE;MACpCC,OAAO,EAAE,CAAChB,IAAI,EAAEiB,WAAW,CAAC;MAC5BC,qBAAqBA,CAAA,EAAG,CAAC;IAC3B,CAAC,CAAC;EACJ,CAAC;AACH,CAAE;AAEF,SAAS3B,0BAA0B,IAAI4B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}