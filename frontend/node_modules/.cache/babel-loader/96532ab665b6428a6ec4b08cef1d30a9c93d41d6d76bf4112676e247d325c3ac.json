{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { useControllableState } from '../../internal/useControllableState.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nvar _path;\nfunction Toggle(_ref) {\n  let {\n    'aria-labelledby': ariaLabelledby,\n    className,\n    defaultToggled = false,\n    disabled = false,\n    hideLabel = false,\n    id,\n    labelA = 'Off',\n    labelB = 'On',\n    labelText,\n    onClick,\n    onToggle,\n    readOnly,\n    size = 'md',\n    toggled,\n    ...other\n  } = _ref;\n  const prefix = usePrefix();\n  const buttonElement = useRef(null);\n  const [checked, setChecked] = useControllableState({\n    value: toggled,\n    onChange: onToggle,\n    defaultValue: defaultToggled\n  });\n  function handleClick(e) {\n    if (!readOnly) {\n      setChecked(!checked);\n    }\n    if (onClick) {\n      onClick(e);\n    }\n  }\n  const isSm = size === 'sm';\n  const sideLabel = hideLabel ? labelText : checked ? labelB : labelA;\n  const renderSideLabel = !(hideLabel && !labelText);\n  const LabelComponent = labelText ? 'label' : 'div';\n  const wrapperClasses = cx(`${prefix}--toggle`, {\n    [`${prefix}--toggle--disabled`]: disabled,\n    [`${prefix}--toggle--readonly`]: readOnly\n  }, className);\n  const labelTextClasses = cx(`${prefix}--toggle__label-text`, {\n    [`${prefix}--visually-hidden`]: hideLabel\n  });\n  const appearanceClasses = cx(`${prefix}--toggle__appearance`, {\n    [`${prefix}--toggle__appearance--sm`]: isSm\n  });\n  const switchClasses = cx(`${prefix}--toggle__switch`, {\n    [`${prefix}--toggle__switch--checked`]: checked\n  });\n  return /*#__PURE__*/(\n    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n    React__default.createElement(\"div\", {\n      className: wrapperClasses,\n      onClick: !labelText ? e => {\n        // the underlying <button> can only be activated by keyboard as it is visually hidden;\n        // therefore, if this event's target is the <button>, it had to be triggered by\n        // the keyboard event which already calls handleClick. if we wouldn't catch this, the\n        // onClick and onToggle functions would be called twice whenever the user activates the\n        // toggle by keyboard and props['aria-labelledby'] is passed.\n        if (buttonElement.current && e.target !== buttonElement.current && !disabled) {\n          handleClick(e);\n          buttonElement.current.focus();\n        }\n      } : undefined\n    }, /*#__PURE__*/React__default.createElement(\"button\", _extends({}, other, {\n      ref: buttonElement,\n      id: id,\n      className: `${prefix}--toggle__button`,\n      role: \"switch\",\n      type: \"button\",\n      \"aria-checked\": checked,\n      \"aria-labelledby\": ariaLabelledby,\n      disabled: disabled,\n      onClick: handleClick\n    })), /*#__PURE__*/React__default.createElement(LabelComponent, {\n      htmlFor: ariaLabelledby ? undefined : id,\n      className: `${prefix}--toggle__label`\n    }, labelText && /*#__PURE__*/React__default.createElement(\"span\", {\n      className: labelTextClasses\n    }, labelText), /*#__PURE__*/React__default.createElement(\"div\", {\n      className: appearanceClasses\n    }, /*#__PURE__*/React__default.createElement(\"div\", {\n      className: switchClasses\n    }, isSm && /*#__PURE__*/React__default.createElement(\"svg\", {\n      className: `${prefix}--toggle__check`,\n      width: \"6px\",\n      height: \"5px\",\n      viewBox: \"0 0 6 5\"\n    }, _path || (_path = /*#__PURE__*/React__default.createElement(\"path\", {\n      d: \"M2.2 2.7L5 0 6 1 2.2 5 0 2.7 1 1.5z\"\n    })))), renderSideLabel && /*#__PURE__*/React__default.createElement(\"span\", {\n      className: `${prefix}--toggle__text`,\n      \"aria-hidden\": \"true\"\n    }, sideLabel))))\n  );\n}\nToggle.propTypes = {\n  /**\n   * Specify another element's id to be used as the label for this toggle\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\n   * Specify a custom className to apply to the form-item node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify whether the toggle should be on by default\n   */\n  defaultToggled: PropTypes.bool,\n  /**\n   * Whether this control should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If true, the side labels (props.labelA and props.labelB) will be replaced by\n   * props.labelText (if passed), so that the toggle doesn't render a top label.\n   */\n  hideLabel: PropTypes.bool,\n  /**\n   * Provide an id that unique represents the underlying `<button>`\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Specify the label for the \"off\" position\n   */\n  labelA: PropTypes.node,\n  /**\n   * Specify the label for the \"on\" position\n   */\n  labelB: PropTypes.node,\n  /**\n   * Provide the text that will be read by a screen reader when visiting this\n   * control. This should be provided unless 'aria-labelledby' is set instead\n   * or you use an external <label> element with its \"for\" attribute set to the\n   * toggle's id.\n   */\n  labelText: PropTypes.string,\n  /**\n   * Provide an event listener that is called when the control is clicked\n   */\n  onClick: PropTypes.func,\n  /**\n   * Provide an event listener that is called when the control is toggled\n   */\n  onToggle: PropTypes.func,\n  /**\n   * Whether the toggle should be read-only\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Specify the size of the Toggle. Currently only supports 'sm' or 'md' (default)\n   */\n  size: PropTypes.oneOf(['sm', 'md']),\n  /**\n   * Specify whether the control is toggled\n   */\n  toggled: PropTypes.bool\n};\nexport { Toggle, Toggle as default };","map":{"version":3,"names":["extends","_extends","React__default","useRef","PropTypes","cx","useControllableState","usePrefix","_path","Toggle","_ref","ariaLabelledby","className","defaultToggled","disabled","hideLabel","id","labelA","labelB","labelText","onClick","onToggle","readOnly","size","toggled","other","prefix","buttonElement","checked","setChecked","value","onChange","defaultValue","handleClick","e","isSm","sideLabel","renderSideLabel","LabelComponent","wrapperClasses","labelTextClasses","appearanceClasses","switchClasses","createElement","current","target","focus","undefined","ref","role","type","htmlFor","width","height","viewBox","d","propTypes","string","bool","isRequired","node","func","oneOf","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/Toggle/Toggle.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { useControllableState } from '../../internal/useControllableState.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\nvar _path;\nfunction Toggle(_ref) {\n  let {\n    'aria-labelledby': ariaLabelledby,\n    className,\n    defaultToggled = false,\n    disabled = false,\n    hideLabel = false,\n    id,\n    labelA = 'Off',\n    labelB = 'On',\n    labelText,\n    onClick,\n    onToggle,\n    readOnly,\n    size = 'md',\n    toggled,\n    ...other\n  } = _ref;\n  const prefix = usePrefix();\n  const buttonElement = useRef(null);\n  const [checked, setChecked] = useControllableState({\n    value: toggled,\n    onChange: onToggle,\n    defaultValue: defaultToggled\n  });\n  function handleClick(e) {\n    if (!readOnly) {\n      setChecked(!checked);\n    }\n    if (onClick) {\n      onClick(e);\n    }\n  }\n  const isSm = size === 'sm';\n  const sideLabel = hideLabel ? labelText : checked ? labelB : labelA;\n  const renderSideLabel = !(hideLabel && !labelText);\n  const LabelComponent = labelText ? 'label' : 'div';\n  const wrapperClasses = cx(`${prefix}--toggle`, {\n    [`${prefix}--toggle--disabled`]: disabled,\n    [`${prefix}--toggle--readonly`]: readOnly\n  }, className);\n  const labelTextClasses = cx(`${prefix}--toggle__label-text`, {\n    [`${prefix}--visually-hidden`]: hideLabel\n  });\n  const appearanceClasses = cx(`${prefix}--toggle__appearance`, {\n    [`${prefix}--toggle__appearance--sm`]: isSm\n  });\n  const switchClasses = cx(`${prefix}--toggle__switch`, {\n    [`${prefix}--toggle__switch--checked`]: checked\n  });\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n    React__default.createElement(\"div\", {\n      className: wrapperClasses,\n      onClick: !labelText ? e => {\n        // the underlying <button> can only be activated by keyboard as it is visually hidden;\n        // therefore, if this event's target is the <button>, it had to be triggered by\n        // the keyboard event which already calls handleClick. if we wouldn't catch this, the\n        // onClick and onToggle functions would be called twice whenever the user activates the\n        // toggle by keyboard and props['aria-labelledby'] is passed.\n        if (buttonElement.current && e.target !== buttonElement.current && !disabled) {\n          handleClick(e);\n          buttonElement.current.focus();\n        }\n      } : undefined\n    }, /*#__PURE__*/React__default.createElement(\"button\", _extends({}, other, {\n      ref: buttonElement,\n      id: id,\n      className: `${prefix}--toggle__button`,\n      role: \"switch\",\n      type: \"button\",\n      \"aria-checked\": checked,\n      \"aria-labelledby\": ariaLabelledby,\n      disabled: disabled,\n      onClick: handleClick\n    })), /*#__PURE__*/React__default.createElement(LabelComponent, {\n      htmlFor: ariaLabelledby ? undefined : id,\n      className: `${prefix}--toggle__label`\n    }, labelText && /*#__PURE__*/React__default.createElement(\"span\", {\n      className: labelTextClasses\n    }, labelText), /*#__PURE__*/React__default.createElement(\"div\", {\n      className: appearanceClasses\n    }, /*#__PURE__*/React__default.createElement(\"div\", {\n      className: switchClasses\n    }, isSm && /*#__PURE__*/React__default.createElement(\"svg\", {\n      className: `${prefix}--toggle__check`,\n      width: \"6px\",\n      height: \"5px\",\n      viewBox: \"0 0 6 5\"\n    }, _path || (_path = /*#__PURE__*/React__default.createElement(\"path\", {\n      d: \"M2.2 2.7L5 0 6 1 2.2 5 0 2.7 1 1.5z\"\n    })))), renderSideLabel && /*#__PURE__*/React__default.createElement(\"span\", {\n      className: `${prefix}--toggle__text`,\n      \"aria-hidden\": \"true\"\n    }, sideLabel))))\n  );\n}\nToggle.propTypes = {\n  /**\n   * Specify another element's id to be used as the label for this toggle\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\n   * Specify a custom className to apply to the form-item node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify whether the toggle should be on by default\n   */\n  defaultToggled: PropTypes.bool,\n  /**\n   * Whether this control should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If true, the side labels (props.labelA and props.labelB) will be replaced by\n   * props.labelText (if passed), so that the toggle doesn't render a top label.\n   */\n  hideLabel: PropTypes.bool,\n  /**\n   * Provide an id that unique represents the underlying `<button>`\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Specify the label for the \"off\" position\n   */\n  labelA: PropTypes.node,\n  /**\n   * Specify the label for the \"on\" position\n   */\n  labelB: PropTypes.node,\n  /**\n   * Provide the text that will be read by a screen reader when visiting this\n   * control. This should be provided unless 'aria-labelledby' is set instead\n   * or you use an external <label> element with its \"for\" attribute set to the\n   * toggle's id.\n   */\n  labelText: PropTypes.string,\n  /**\n   * Provide an event listener that is called when the control is clicked\n   */\n  onClick: PropTypes.func,\n  /**\n   * Provide an event listener that is called when the control is toggled\n   */\n  onToggle: PropTypes.func,\n  /**\n   * Whether the toggle should be read-only\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Specify the size of the Toggle. Currently only supports 'sm' or 'md' (default)\n   */\n  size: PropTypes.oneOf(['sm', 'md']),\n  /**\n   * Specify whether the control is toggled\n   */\n  toggled: PropTypes.bool\n};\n\nexport { Toggle, Toggle as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}