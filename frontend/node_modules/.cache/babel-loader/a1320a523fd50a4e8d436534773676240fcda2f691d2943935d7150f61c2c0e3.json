{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { initialSortState, getSortedState } from './sorting.js';\nimport normalize from '../tools/normalize.js';\n\n/**\n * Helper to derive the next state from the given props and the\n * prevState. Potential future-facing API hook for React v17.\n *\n * Currently, it's being used as a way to normalize the incoming data that we\n * are receiving for rows\n */\nvar getDerivedStateFromProps = function getDerivedStateFromProps(props, prevState) {\n  var _normalize = normalize(props.rows, props.headers, prevState),\n    rowIds = _normalize.rowIds,\n    rowsById = _normalize.rowsById,\n    cellsById = _normalize.cellsById;\n  var state = {\n    rowIds: rowIds,\n    rowsById: rowsById,\n    cellsById: cellsById,\n    sortDirection: prevState.sortDirection || initialSortState,\n    sortHeaderKey: prevState.sortHeaderKey || null,\n    // Copy over rowIds so the reference doesn't mutate the stored\n    // `initialRowOrder`\n    initialRowOrder: rowIds.slice(),\n    filterInputValue: prevState.filterInputValue || null,\n    // Optional state field to indicate whether a consumer should show a\n    // batch actions menu\n    shouldShowBatchActions: prevState.shouldShowBatchActions || false\n  };\n  if (prevState.sortDirection && prevState.sortHeaderKey) {\n    var _getSortedState = getSortedState(props, state, prevState.sortHeaderKey, prevState.sortDirection),\n      _rowIds = _getSortedState.rowIds;\n    state.rowIds = _rowIds;\n  }\n  state.isExpandedAll = state.rowIds.every(function (id) {\n    return state.rowsById[id].isExpanded === true;\n  });\n  return state;\n};\nvar getDerivedStateFromProps$1 = getDerivedStateFromProps;\nexport { getDerivedStateFromProps$1 as default };","map":{"version":3,"names":["initialSortState","getSortedState","normalize","getDerivedStateFromProps","props","prevState","_normalize","rows","headers","rowIds","rowsById","cellsById","state","sortDirection","sortHeaderKey","initialRowOrder","slice","filterInputValue","shouldShowBatchActions","_getSortedState","isExpandedAll","every","id","isExpanded","getDerivedStateFromProps$1","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/DataTable/state/getDerivedStateFromProps.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { initialSortState, getSortedState } from './sorting.js';\nimport normalize from '../tools/normalize.js';\n\n/**\n * Helper to derive the next state from the given props and the\n * prevState. Potential future-facing API hook for React v17.\n *\n * Currently, it's being used as a way to normalize the incoming data that we\n * are receiving for rows\n */\nconst getDerivedStateFromProps = (props, prevState) => {\n  const {\n    rowIds,\n    rowsById,\n    cellsById\n  } = normalize(props.rows, props.headers, prevState);\n  const state = {\n    rowIds,\n    rowsById,\n    cellsById,\n    sortDirection: prevState.sortDirection || initialSortState,\n    sortHeaderKey: prevState.sortHeaderKey || null,\n    // Copy over rowIds so the reference doesn't mutate the stored\n    // `initialRowOrder`\n    initialRowOrder: rowIds.slice(),\n    filterInputValue: prevState.filterInputValue || null,\n    // Optional state field to indicate whether a consumer should show a\n    // batch actions menu\n    shouldShowBatchActions: prevState.shouldShowBatchActions || false\n  };\n  if (prevState.sortDirection && prevState.sortHeaderKey) {\n    const {\n      rowIds\n    } = getSortedState(props, state, prevState.sortHeaderKey, prevState.sortDirection);\n    state.rowIds = rowIds;\n  }\n  state.isExpandedAll = state.rowIds.every(id => {\n    return state.rowsById[id].isExpanded === true;\n  });\n  return state;\n};\nvar getDerivedStateFromProps$1 = getDerivedStateFromProps;\n\nexport { getDerivedStateFromProps$1 as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,gBAAgB,EAAEC,cAAc,QAAQ,cAAc;AAC/D,OAAOC,SAAS,MAAM,uBAAuB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAIC,KAAK,EAAEC,SAAS,EAAK;EACrD,IAAAC,UAAA,GAIIJ,SAAS,CAACE,KAAK,CAACG,IAAI,EAAEH,KAAK,CAACI,OAAO,EAAEH,SAAS,CAAC;IAHjDI,MAAM,GAAAH,UAAA,CAANG,MAAM;IACNC,QAAQ,GAAAJ,UAAA,CAARI,QAAQ;IACRC,SAAS,GAAAL,UAAA,CAATK,SAAS;EAEX,IAAMC,KAAK,GAAG;IACZH,MAAM,EAANA,MAAM;IACNC,QAAQ,EAARA,QAAQ;IACRC,SAAS,EAATA,SAAS;IACTE,aAAa,EAAER,SAAS,CAACQ,aAAa,IAAIb,gBAAgB;IAC1Dc,aAAa,EAAET,SAAS,CAACS,aAAa,IAAI,IAAI;IAC9C;IACA;IACAC,eAAe,EAAEN,MAAM,CAACO,KAAK,CAAC,CAAC;IAC/BC,gBAAgB,EAAEZ,SAAS,CAACY,gBAAgB,IAAI,IAAI;IACpD;IACA;IACAC,sBAAsB,EAAEb,SAAS,CAACa,sBAAsB,IAAI;EAC9D,CAAC;EACD,IAAIb,SAAS,CAACQ,aAAa,IAAIR,SAAS,CAACS,aAAa,EAAE;IACtD,IAAAK,eAAA,GAEIlB,cAAc,CAACG,KAAK,EAAEQ,KAAK,EAAEP,SAAS,CAACS,aAAa,EAAET,SAAS,CAACQ,aAAa,CAAC;MADhFJ,OAAM,GAAAU,eAAA,CAANV,MAAM;IAERG,KAAK,CAACH,MAAM,GAAGA,OAAM;EACvB;EACAG,KAAK,CAACQ,aAAa,GAAGR,KAAK,CAACH,MAAM,CAACY,KAAK,CAAC,UAAAC,EAAE,EAAI;IAC7C,OAAOV,KAAK,CAACF,QAAQ,CAACY,EAAE,CAAC,CAACC,UAAU,KAAK,IAAI;EAC/C,CAAC,CAAC;EACF,OAAOX,KAAK;AACd,CAAC;AACD,IAAIY,0BAA0B,GAAGrB,wBAAwB;AAEzD,SAASqB,0BAA0B,IAAIC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}