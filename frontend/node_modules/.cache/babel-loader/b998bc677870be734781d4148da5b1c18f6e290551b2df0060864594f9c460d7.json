{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport cx from 'classnames';\nimport { Copy as Copy$1 } from '@carbon/icons-react';\nimport Copy from '../Copy/Copy.js';\nimport { LayoutConstraint } from '../Layout/index.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nfunction CopyButton(_ref) {\n  let {\n    iconDescription,\n    className,\n    ...other\n  } = _ref;\n  const prefix = usePrefix();\n  return /*#__PURE__*/React__default.createElement(LayoutConstraint, {\n    size: {\n      default: 'md',\n      max: 'lg'\n    }\n  }, /*#__PURE__*/React__default.createElement(Copy, _extends({\n    className: cx(className, `${prefix}--copy-btn`),\n    \"aria-label\": iconDescription\n  }, other), /*#__PURE__*/React__default.createElement(Copy$1, {\n    className: `${prefix}--snippet__icon`\n  })));\n}\nCopyButton.propTypes = {\n  /**\n   * Specify an optional className to be applied to the underlying `<button>`\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the string that is displayed when the button is clicked and the\n   * content is copied\n   */\n  feedback: PropTypes.string,\n  /**\n   * Specify the time it takes for the feedback message to timeout\n   */\n  feedbackTimeout: PropTypes.number,\n  /**\n   * Provide a description for the icon representing the copy action that can\n   * be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n  /**\n   * Specify an optional `onClick` handler that is called when the underlying\n   * `<button>` is clicked\n   */\n  onClick: PropTypes.func\n};\nCopyButton.defaultProps = {\n  iconDescription: 'Copy to clipboard',\n  feedback: 'Copied!',\n  feedbackTimeout: 2000,\n  onClick: () => {}\n};\nexport { CopyButton as default };","map":{"version":3,"names":["extends","_extends","PropTypes","React__default","cx","Copy","Copy$1","LayoutConstraint","usePrefix","CopyButton","_ref","iconDescription","className","other","prefix","createElement","size","default","max","propTypes","string","feedback","feedbackTimeout","number","onClick","func","defaultProps"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/CopyButton/CopyButton.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport cx from 'classnames';\nimport { Copy as Copy$1 } from '@carbon/icons-react';\nimport Copy from '../Copy/Copy.js';\nimport { LayoutConstraint } from '../Layout/index.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\nfunction CopyButton(_ref) {\n  let {\n    iconDescription,\n    className,\n    ...other\n  } = _ref;\n  const prefix = usePrefix();\n  return /*#__PURE__*/React__default.createElement(LayoutConstraint, {\n    size: {\n      default: 'md',\n      max: 'lg'\n    }\n  }, /*#__PURE__*/React__default.createElement(Copy, _extends({\n    className: cx(className, `${prefix}--copy-btn`),\n    \"aria-label\": iconDescription\n  }, other), /*#__PURE__*/React__default.createElement(Copy$1, {\n    className: `${prefix}--snippet__icon`\n  })));\n}\nCopyButton.propTypes = {\n  /**\n   * Specify an optional className to be applied to the underlying `<button>`\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the string that is displayed when the button is clicked and the\n   * content is copied\n   */\n  feedback: PropTypes.string,\n  /**\n   * Specify the time it takes for the feedback message to timeout\n   */\n  feedbackTimeout: PropTypes.number,\n  /**\n   * Provide a description for the icon representing the copy action that can\n   * be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n  /**\n   * Specify an optional `onClick` handler that is called when the underlying\n   * `<button>` is clicked\n   */\n  onClick: PropTypes.func\n};\nCopyButton.defaultProps = {\n  iconDescription: 'Copy to clipboard',\n  feedback: 'Copied!',\n  feedbackTimeout: 2000,\n  onClick: () => {}\n};\n\nexport { CopyButton as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,OAAO,IAAIC,QAAQ,QAAQ,6CAA6C;AACjF,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,IAAI,IAAIC,MAAM,QAAQ,qBAAqB;AACpD,OAAOD,IAAI,MAAM,iBAAiB;AAClC,SAASE,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,SAASC,UAAUA,CAACC,IAAI,EAAE;EACxB,IAAI;IACFC,eAAe;IACfC,SAAS;IACT,GAAGC;EACL,CAAC,GAAGH,IAAI;EACR,MAAMI,MAAM,GAAGN,SAAS,CAAC,CAAC;EAC1B,OAAO,aAAaL,cAAc,CAACY,aAAa,CAACR,gBAAgB,EAAE;IACjES,IAAI,EAAE;MACJC,OAAO,EAAE,IAAI;MACbC,GAAG,EAAE;IACP;EACF,CAAC,EAAE,aAAaf,cAAc,CAACY,aAAa,CAACV,IAAI,EAAEJ,QAAQ,CAAC;IAC1DW,SAAS,EAAER,EAAE,CAACQ,SAAS,EAAG,GAAEE,MAAO,YAAW,CAAC;IAC/C,YAAY,EAAEH;EAChB,CAAC,EAAEE,KAAK,CAAC,EAAE,aAAaV,cAAc,CAACY,aAAa,CAACT,MAAM,EAAE;IAC3DM,SAAS,EAAG,GAAEE,MAAO;EACvB,CAAC,CAAC,CAAC,CAAC;AACN;AACAL,UAAU,CAACU,SAAS,GAAG;EACrB;AACF;AACA;EACEP,SAAS,EAAEV,SAAS,CAACkB,MAAM;EAC3B;AACF;AACA;AACA;EACEC,QAAQ,EAAEnB,SAAS,CAACkB,MAAM;EAC1B;AACF;AACA;EACEE,eAAe,EAAEpB,SAAS,CAACqB,MAAM;EACjC;AACF;AACA;AACA;EACEZ,eAAe,EAAET,SAAS,CAACkB,MAAM;EACjC;AACF;AACA;AACA;EACEI,OAAO,EAAEtB,SAAS,CAACuB;AACrB,CAAC;AACDhB,UAAU,CAACiB,YAAY,GAAG;EACxBf,eAAe,EAAE,mBAAmB;EACpCU,QAAQ,EAAE,SAAS;EACnBC,eAAe,EAAE,IAAI;EACrBE,OAAO,EAAEA,CAAA,KAAM,CAAC;AAClB,CAAC;AAED,SAASf,UAAU,IAAIQ,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}