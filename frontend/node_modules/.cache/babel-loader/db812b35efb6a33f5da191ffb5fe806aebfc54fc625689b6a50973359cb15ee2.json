{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { match } from '../../../internal/keyboard/match.js';\nimport { Enter, ArrowLeft, ArrowRight, ArrowDown } from '../../../internal/keyboard/keys.js';\n\n/**\n * @param {object} config Plugin configuration.\n * @returns {Plugin} A Flatpickr plugin to fix Flatpickr's behavior of certain events.\n */\nvar carbonFlatpickrFixEventsPlugin = config => fp => {\n  const {\n    inputFrom,\n    inputTo,\n    lastStartValue\n  } = config;\n  /**\n   * Handles `keydown` event.\n   */\n  const handleKeydown = event => {\n    const {\n      target\n    } = event;\n    if (inputFrom === target || inputTo === target) {\n      if (match(event, Enter)) {\n        // Makes sure the hitting enter key picks up pending values of both `<input>`\n        // Workaround for: https://github.com/flatpickr/flatpickr/issues/1942\n        fp.setDate([inputFrom.value, inputTo && inputTo.value], true, fp.config.dateFormat);\n        event.stopPropagation();\n      } else if (match(event, ArrowLeft) || match(event, ArrowRight)) {\n        // Prevents Flatpickr code from canceling the event if left/right arrow keys are hit on `<input>`,\n        // so user can move the keyboard cursor for editing dates\n        // Workaround for: https://github.com/flatpickr/flatpickr/issues/1943\n        event.stopPropagation();\n      } else if (match(event, ArrowDown)) {\n        event.preventDefault();\n        fp.open();\n      }\n    }\n  };\n  const parseDateWithFormat = dateStr => fp.parseDate(dateStr, fp.config.dateFormat);\n\n  /**\n   * Handles `blur` event.\n   *\n   * For whatever reason, manual changes within the `to` input do not update the\n   * calendar on blur. If a manual change is made within the input, this block will\n   * set the date again, triggering the calendar to update.\n   */\n  const handleBlur = event => {\n    const {\n      target\n    } = event;\n\n    // Only fall into this logic if the event is on the `to` input and there is a\n    // `to` date selected\n    if (inputTo === target && fp.selectedDates[1]) {\n      // Using getTime() enables the ability to more readily compare the date currently\n      // selected in the calendar and the date currently in the value of the input\n      const withoutTime = date => date.setHours(0, 0, 0, 0);\n      const selectedToDate = withoutTime(new Date(fp.selectedDates[1]));\n      const currentValueToDate = withoutTime(parseDateWithFormat(inputTo.value));\n\n      // The date should only be set if both dates are valid dates, and they don't match.\n      // When they don't match, this indiciates that the date selected in the calendar is stale,\n      // and the current value in the input should be set for the calendar to update.\n      if (selectedToDate && currentValueToDate && selectedToDate !== currentValueToDate) {\n        // Update the calendar with the value of the `to` date input\n        fp.setDate([inputFrom.value, inputTo && inputTo.value], true, fp.config.dateFormat);\n      }\n    }\n    const isValidDate = date => date.toString() !== 'Invalid Date';\n    // save end date in calendar inmediately after it's been written down\n    if (inputTo === target && fp.selectedDates.length === 1 && inputTo.value) {\n      if (isValidDate(parseDateWithFormat(inputTo.value))) {\n        fp.setDate([inputFrom.value, inputTo.value], true, fp.config.dateFormat);\n      }\n    }\n\n    // overriding the flatpickr bug where the startDate gets deleted on blur\n    if (inputTo === target && !inputFrom.value && lastStartValue.current) {\n      if (isValidDate(parseDateWithFormat(lastStartValue.current))) {\n        inputFrom.value = lastStartValue.current;\n        if (inputTo.value) {\n          fp.setDate([inputFrom.value, inputTo.value], true, fp.config.dateFormat);\n        }\n      }\n    }\n  };\n\n  /**\n   * Releases event listeners used in this Flatpickr plugin.\n   */\n  const release = () => {\n    const {\n      inputFrom,\n      inputTo\n    } = config;\n    if (inputTo) {\n      inputTo.removeEventListener('keydown', handleKeydown, true);\n      inputTo.removeEventListener('blur', handleBlur, true);\n    }\n    inputFrom.removeEventListener('keydown', handleKeydown, true);\n  };\n\n  /**\n   * Sets up event listeners used for this Flatpickr plugin.\n   */\n  const init = () => {\n    release();\n    const {\n      inputFrom,\n      inputTo\n    } = config;\n    inputFrom.addEventListener('keydown', handleKeydown, true);\n    if (inputTo) {\n      inputTo.addEventListener('keydown', handleKeydown, true);\n      inputTo.addEventListener('blur', handleBlur, true);\n    }\n  };\n\n  /**\n   * Registers this Flatpickr plugin.\n   */\n  const register = () => {\n    fp.loadedPlugins.push('carbonFlatpickrFixEventsPlugin');\n  };\n  return {\n    onReady: [register, init],\n    onDestroy: [release]\n  };\n};\nexport { carbonFlatpickrFixEventsPlugin as default };","map":{"version":3,"names":["match","Enter","ArrowLeft","ArrowRight","ArrowDown","carbonFlatpickrFixEventsPlugin","config","fp","inputFrom","inputTo","lastStartValue","handleKeydown","event","target","setDate","value","dateFormat","stopPropagation","preventDefault","open","parseDateWithFormat","dateStr","parseDate","handleBlur","selectedDates","withoutTime","date","setHours","selectedToDate","Date","currentValueToDate","isValidDate","toString","length","current","release","removeEventListener","init","addEventListener","register","loadedPlugins","push","onReady","onDestroy","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/DatePicker/plugins/fixEventsPlugin.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { match } from '../../../internal/keyboard/match.js';\nimport { Enter, ArrowLeft, ArrowRight, ArrowDown } from '../../../internal/keyboard/keys.js';\n\n/**\n * @param {object} config Plugin configuration.\n * @returns {Plugin} A Flatpickr plugin to fix Flatpickr's behavior of certain events.\n */\nvar carbonFlatpickrFixEventsPlugin = (config => fp => {\n  const {\n    inputFrom,\n    inputTo,\n    lastStartValue\n  } = config;\n  /**\n   * Handles `keydown` event.\n   */\n  const handleKeydown = event => {\n    const {\n      target\n    } = event;\n    if (inputFrom === target || inputTo === target) {\n      if (match(event, Enter)) {\n        // Makes sure the hitting enter key picks up pending values of both `<input>`\n        // Workaround for: https://github.com/flatpickr/flatpickr/issues/1942\n        fp.setDate([inputFrom.value, inputTo && inputTo.value], true, fp.config.dateFormat);\n        event.stopPropagation();\n      } else if (match(event, ArrowLeft) || match(event, ArrowRight)) {\n        // Prevents Flatpickr code from canceling the event if left/right arrow keys are hit on `<input>`,\n        // so user can move the keyboard cursor for editing dates\n        // Workaround for: https://github.com/flatpickr/flatpickr/issues/1943\n        event.stopPropagation();\n      } else if (match(event, ArrowDown)) {\n        event.preventDefault();\n        fp.open();\n      }\n    }\n  };\n  const parseDateWithFormat = dateStr => fp.parseDate(dateStr, fp.config.dateFormat);\n\n  /**\n   * Handles `blur` event.\n   *\n   * For whatever reason, manual changes within the `to` input do not update the\n   * calendar on blur. If a manual change is made within the input, this block will\n   * set the date again, triggering the calendar to update.\n   */\n  const handleBlur = event => {\n    const {\n      target\n    } = event;\n\n    // Only fall into this logic if the event is on the `to` input and there is a\n    // `to` date selected\n    if (inputTo === target && fp.selectedDates[1]) {\n      // Using getTime() enables the ability to more readily compare the date currently\n      // selected in the calendar and the date currently in the value of the input\n      const withoutTime = date => date.setHours(0, 0, 0, 0);\n      const selectedToDate = withoutTime(new Date(fp.selectedDates[1]));\n      const currentValueToDate = withoutTime(parseDateWithFormat(inputTo.value));\n\n      // The date should only be set if both dates are valid dates, and they don't match.\n      // When they don't match, this indiciates that the date selected in the calendar is stale,\n      // and the current value in the input should be set for the calendar to update.\n      if (selectedToDate && currentValueToDate && selectedToDate !== currentValueToDate) {\n        // Update the calendar with the value of the `to` date input\n        fp.setDate([inputFrom.value, inputTo && inputTo.value], true, fp.config.dateFormat);\n      }\n    }\n    const isValidDate = date => date.toString() !== 'Invalid Date';\n    // save end date in calendar inmediately after it's been written down\n    if (inputTo === target && fp.selectedDates.length === 1 && inputTo.value) {\n      if (isValidDate(parseDateWithFormat(inputTo.value))) {\n        fp.setDate([inputFrom.value, inputTo.value], true, fp.config.dateFormat);\n      }\n    }\n\n    // overriding the flatpickr bug where the startDate gets deleted on blur\n    if (inputTo === target && !inputFrom.value && lastStartValue.current) {\n      if (isValidDate(parseDateWithFormat(lastStartValue.current))) {\n        inputFrom.value = lastStartValue.current;\n        if (inputTo.value) {\n          fp.setDate([inputFrom.value, inputTo.value], true, fp.config.dateFormat);\n        }\n      }\n    }\n  };\n\n  /**\n   * Releases event listeners used in this Flatpickr plugin.\n   */\n  const release = () => {\n    const {\n      inputFrom,\n      inputTo\n    } = config;\n    if (inputTo) {\n      inputTo.removeEventListener('keydown', handleKeydown, true);\n      inputTo.removeEventListener('blur', handleBlur, true);\n    }\n    inputFrom.removeEventListener('keydown', handleKeydown, true);\n  };\n\n  /**\n   * Sets up event listeners used for this Flatpickr plugin.\n   */\n  const init = () => {\n    release();\n    const {\n      inputFrom,\n      inputTo\n    } = config;\n    inputFrom.addEventListener('keydown', handleKeydown, true);\n    if (inputTo) {\n      inputTo.addEventListener('keydown', handleKeydown, true);\n      inputTo.addEventListener('blur', handleBlur, true);\n    }\n  };\n\n  /**\n   * Registers this Flatpickr plugin.\n   */\n  const register = () => {\n    fp.loadedPlugins.push('carbonFlatpickrFixEventsPlugin');\n  };\n  return {\n    onReady: [register, init],\n    onDestroy: [release]\n  };\n});\n\nexport { carbonFlatpickrFixEventsPlugin as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}