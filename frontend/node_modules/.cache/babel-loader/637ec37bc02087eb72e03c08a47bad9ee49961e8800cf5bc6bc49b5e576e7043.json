{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport throttle from 'lodash.throttle';\nimport { ArrowDown, ArrowLeft, ArrowUp, ArrowRight } from '../../internal/keyboard/keys.js';\nimport { matches } from '../../internal/keyboard/match.js';\nimport { PrefixContext } from '../../internal/usePrefix.js';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { FeatureFlagContext } from '../FeatureFlags/index.js';\nimport { WarningFilled, WarningAltFilled } from '@carbon/icons-react';\nconst defaultFormatLabel = (value, label) => {\n  return typeof label === 'function' ? label(value) : `${value}${label}`;\n};\n\n/**\n * Minimum time between processed \"drag\" events.\n */\nconst EVENT_THROTTLE = 16; // ms\n\n/**\n * Event types that trigger \"drags\".\n */\nconst DRAG_EVENT_TYPES = new Set(['mousemove', 'touchmove']);\n\n/**\n * Event types that trigger a \"drag\" to stop.\n */\nconst DRAG_STOP_EVENT_TYPES = new Set(['mouseup', 'touchend', 'touchcancel']);\nclass Slider extends PureComponent {\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"state\", {\n      value: this.props.value,\n      left: 0,\n      needsOnRelease: false,\n      isValid: true\n    });\n    _defineProperty(this, \"thumbRef\", void 0);\n    _defineProperty(this, \"filledTrackRef\", void 0);\n    _defineProperty(this, \"element\", null);\n    _defineProperty(this, \"inputId\", '');\n    _defineProperty(this, \"track\", void 0);\n    /**\n     * Sets up \"drag\" event handlers and calls `this.onDrag` in case dragging\n     * started on somewhere other than the thumb without a corresponding \"move\"\n     * event.\n     *\n     * @param {Event} evt The event.\n     */\n    _defineProperty(this, \"onDragStart\", evt => {\n      // Do nothing if component is disabled\n      if (this.props.disabled || this.props.readOnly) {\n        return;\n      }\n\n      // Register drag stop handlers\n      DRAG_STOP_EVENT_TYPES.forEach(element => {\n        this.element?.ownerDocument.addEventListener(element, this.onDragStop);\n      });\n\n      // Register drag handlers\n      DRAG_EVENT_TYPES.forEach(element => {\n        this.element?.ownerDocument.addEventListener(element, this.onDrag);\n      });\n\n      // Perform first recalculation since we probably didn't click exactly in the\n      // middle of the thumb\n      this.onDrag(evt);\n    });\n    /**\n     * Unregisters \"drag\" and \"drag stop\" event handlers and calls sets the flag\n     * indicating that the `onRelease` callback should be called.\n     */\n    _defineProperty(this, \"onDragStop\", () => {\n      // Do nothing if component is disabled\n      if (this.props.disabled || this.props.readOnly) {\n        return;\n      }\n\n      // Remove drag stop handlers\n      DRAG_STOP_EVENT_TYPES.forEach(element => {\n        this.element?.ownerDocument.removeEventListener(element, this.onDragStop);\n      });\n\n      // Remove drag handlers\n      DRAG_EVENT_TYPES.forEach(element => {\n        this.element?.ownerDocument.removeEventListener(element, this.onDrag);\n      });\n\n      // Set needsOnRelease flag so event fires on next update\n      this.setState({\n        needsOnRelease: true,\n        isValid: true\n      });\n    });\n    /**\n     * Handles a \"drag\" event by recalculating the value/thumb and setting state\n     * accordingly.\n     *\n     * @param {Event} evt The event.\n     */\n    _defineProperty(this, \"_onDrag\", evt => {\n      // Do nothing if component is disabled or we have no event\n      if (this.props.disabled || this.props.readOnly || !evt) {\n        return;\n      }\n      let clientX;\n      if ('clientX' in evt) {\n        clientX = evt.clientX;\n      } else if ('touches' in evt && 0 in evt.touches && 'clientX' in evt.touches[0]) {\n        clientX = evt.touches[0].clientX;\n      } else {\n        // Do nothing if we have no valid clientX\n        return;\n      }\n      const {\n        value,\n        left\n      } = this.calcValue({\n        clientX\n      });\n      this.setState({\n        value,\n        left,\n        isValid: true\n      });\n    });\n    /**\n     * Throttles calls to `this._onDrag` by limiting events to being processed at\n     * most once every `EVENT_THROTTLE` milliseconds.\n     */\n    _defineProperty(this, \"onDrag\", throttle(this._onDrag, EVENT_THROTTLE, {\n      leading: true,\n      trailing: false\n    }));\n    /**\n     * Handles a `keydown` event by recalculating the value/thumb and setting\n     * state accordingly.\n     *\n     * @param {Event} evt The event.\n     */\n    _defineProperty(this, \"onKeyDown\", evt => {\n      // Do nothing if component is disabled or we don't have a valid event\n      if (this.props.disabled || this.props.readOnly || !('which' in evt)) {\n        return;\n      }\n      let delta = 0;\n      if (matches(evt.which, [ArrowDown, ArrowLeft])) {\n        delta = -(this.props.step ?? Slider.defaultProps.step);\n      } else if (matches(evt.which, [ArrowUp, ArrowRight])) {\n        delta = this.props.step ?? Slider.defaultProps.step;\n      } else {\n        // Ignore keys we don't want to handle\n        return;\n      }\n\n      // If shift was held, account for the stepMultiplier\n      if (evt.shiftKey) {\n        const stepMultiplier = this.props.stepMultiplier;\n        delta *= stepMultiplier ?? Slider.defaultProps.stepMultiplier;\n      }\n      Math.floor(this.state.value / (this.props.step ?? Slider.defaultProps.step)) * (this.props.step ?? Slider.defaultProps.step);\n      const {\n        value,\n        left\n      } = this.calcValue({\n        // Ensures custom value from `<input>` won't cause skipping next stepping point with right arrow key,\n        // e.g. Typing 51 in `<input>`, moving focus onto the thumb and the hitting right arrow key should yield 52 instead of 54\n        value: (delta > 0 ? Math.floor(this.state.value / (this.props.step ?? Slider.defaultProps.step)) * (this.props.step ?? Slider.defaultProps.step) : this.state.value) + delta\n      });\n      this.setState({\n        value,\n        left,\n        isValid: true\n      });\n    });\n    /**\n     * Provides the two-way binding for the input field of the Slider. It also\n     * Handles a change to the input field by recalculating the value/thumb and\n     * setting state accordingly.\n     *\n     * @param {Event} evt The event.\n     */\n    _defineProperty(this, \"onChange\", evt => {\n      // Do nothing if component is disabled\n      if (this.props.disabled || this.props.readOnly) {\n        return;\n      }\n\n      // Do nothing if we have no valid event, target, or value\n      if (!evt || !('target' in evt) || typeof evt.target.value !== 'string') {\n        return;\n      }\n      const targetValue = Number.parseFloat(evt.target.value);\n\n      // Avoid calling calcValue for invalid numbers, but still update the state\n      if (isNaN(targetValue)) {\n        this.setState({\n          value: evt.target.value\n        });\n      } else {\n        const {\n          value,\n          left\n        } = this.calcValue({\n          value: targetValue,\n          useRawValue: true\n        });\n        this.setState({\n          value,\n          left\n        });\n      }\n    });\n    /**\n     * Checks for validity of input value after clicking out of the input. It also\n     * Handles state change to isValid state.\n     *\n     * @param {Event} evt The event.\n     */\n    _defineProperty(this, \"onBlur\", evt => {\n      // Do nothing if we have no valid event, target, or value\n      if (!evt || !('target' in evt) || typeof evt.target.value !== 'string') {\n        return;\n      }\n\n      // determine validity of input change after clicking out of input\n      const validity = evt.target.checkValidity();\n      const {\n        value\n      } = evt.target;\n      this.setState({\n        isValid: validity\n      });\n      this.props.onBlur?.({\n        value\n      });\n    });\n    /**\n     * Calculates a new Slider `value` and `left` (thumb offset) given a `clientX`,\n     * `value`, or neither of those.\n     * - If `clientX` is specified, it will be used in\n     *   conjunction with the Slider's bounding rectangle to calculate the new\n     *   values.\n     * - If `clientX` is not specified and `value` is, it will be used to\n     *   calculate new values as though it were the current value of the Slider.\n     * - If neither `clientX` nor `value` are specified, `this.props.value` will\n     *   be used to calculate the new values as though it were the current value\n     *   of the Slider.\n     *\n     * @param {object} params\n     * @param {number} [params.clientX] Optional clientX value expected to be from\n     *   an event fired by one of the Slider's `DRAG_EVENT_TYPES` events.\n     * @param {number} [params.value] Optional value use during calculations if\n     *   clientX is not provided.\n     * @param {boolean} [params.useRawValue=false] `true` to use the given value as-is.\n     */\n    _defineProperty(this, \"calcValue\", _ref => {\n      let {\n        clientX,\n        value,\n        useRawValue = false\n      } = _ref;\n      const range = this.props.max - this.props.min;\n      const boundingRect = this.element?.getBoundingClientRect?.();\n      const totalSteps = range / (this.props.step ?? Slider.defaultProps.step);\n      let width = boundingRect ? boundingRect.right - boundingRect.left : 0;\n\n      // Enforce a minimum width of at least 1 for calculations\n      if (width <= 0) {\n        width = 1;\n      }\n\n      // If a clientX is specified, use it to calculate the leftPercent. If not,\n      // use the provided value or state's value to calculate it instead.\n      let leftPercent;\n      if (clientX != null) {\n        const leftOffset = clientX - (boundingRect?.left ?? 0);\n        leftPercent = leftOffset / width;\n      } else {\n        if (value == null) {\n          value = this.state.value;\n        }\n        // prevent NaN calculation if the range is 0\n        leftPercent = range === 0 ? 0 : (value - this.props.min) / range;\n      }\n      if (useRawValue) {\n        // Adjusts only for min/max of thumb position\n        return {\n          value,\n          left: Math.min(1, Math.max(0, leftPercent)) * 100\n        };\n      }\n      let steppedValue = Math.round(leftPercent * totalSteps) * (this.props.step ?? Slider.defaultProps.step);\n      const steppedPercent = this.clamp(steppedValue / range, 0, 1);\n      steppedValue = this.clamp(steppedValue + this.props.min, this.props.min, this.props.max);\n      return {\n        value: steppedValue,\n        left: steppedPercent * 100\n      };\n    });\n    this.thumbRef = /*#__PURE__*/React__default.createRef();\n    this.filledTrackRef = /*#__PURE__*/React__default.createRef();\n  }\n\n  /**\n   * Sets up initial slider position and value in response to component mount.\n   */\n  componentDidMount() {\n    if (this.element) {\n      const {\n        value,\n        left\n      } = this.calcValue({\n        useRawValue: true\n      });\n      this.setState({\n        value,\n        left\n      });\n    }\n  }\n\n  /**\n   * Handles firing of `onChange` and `onRelease` callbacks to parent in\n   * response to state changes.\n   *\n   * @param {*} prevProps prevProps\n   * @param {*} prevState The previous Slider state, used to see if callbacks\n   * should be called.\n   */\n  componentDidUpdate(prevProps, prevState) {\n    // Fire onChange event handler if present, if there's a usable value, and\n    // if the value is different from the last one\n\n    if (this.thumbRef.current) {\n      this.thumbRef.current.style.left = `${this.state.left}%`;\n    }\n    if (this.filledTrackRef.current) {\n      this.filledTrackRef.current.style.transform = `translate(0%, -50%) scaleX(${this.state.left / 100})`;\n    }\n    if (prevState.value !== this.state.value && typeof this.props.onChange === 'function') {\n      this.props.onChange({\n        value: this.state.value\n      });\n    }\n\n    // Fire onRelease event handler if present and if needed\n    if (this.state.needsOnRelease && typeof this.props.onRelease === 'function') {\n      this.props.onRelease({\n        value: this.state.value\n      });\n      // Reset the flag\n      this.setState({\n        needsOnRelease: false\n      });\n    }\n\n    // If value from props does not change, do nothing here.\n    // Otherwise, do prop -> state sync without \"value capping\".\n    if (prevProps.value === this.props.value && prevProps.max === this.props.max && prevProps.min === this.props.min) {\n      return;\n    }\n    this.setState(this.calcValue({\n      value: this.props.value,\n      useRawValue: true\n    }));\n  }\n\n  /**\n   * Synonymous to ECMA2017+ `Math.clamp`.\n   *\n   * @param {number} val\n   * @param {number} min\n   * @param {number} max\n   *\n   * @returns `val` if `max>=val>=min`; `min` if `val<min`; `max` if `val>max`.\n   */\n  clamp(val, min, max) {\n    return Math.max(min, Math.min(val, max));\n  }\n  // syncs invalid state and prop\n  static getDerivedStateFromProps(props, state) {\n    const {\n      isValid\n    } = state;\n    // will override state in favor of invalid prop\n    if (props.invalid === true && isValid === true) {\n      return {\n        isValid: false\n      };\n    }\n    if (props.invalid === false && isValid === false) {\n      return {\n        isValid: true\n      };\n    }\n    //if invalid prop is not provided, state will remain the same\n    return null;\n  }\n  render() {\n    const {\n      ariaLabelInput,\n      className,\n      hideTextInput,\n      id = this.inputId = this.inputId || `__carbon-slider_${Math.random().toString(36).substr(2)}`,\n      min,\n      minLabel,\n      max,\n      maxLabel,\n      formatLabel = defaultFormatLabel,\n      labelText,\n      step,\n      stepMultiplier: _stepMultiplier,\n      inputType,\n      invalidText,\n      required,\n      disabled,\n      name,\n      light,\n      readOnly,\n      warn,\n      warnText,\n      ...other\n    } = this.props;\n    delete other.onRelease;\n    delete other.invalid;\n    const {\n      value,\n      isValid\n    } = this.state;\n    return /*#__PURE__*/React__default.createElement(PrefixContext.Consumer, null, prefix => {\n      const labelId = `${id}-label`;\n      const labelClasses = cx(`${prefix}--label`, {\n        [`${prefix}--label--disabled`]: disabled\n      });\n      const sliderClasses = cx(`${prefix}--slider`, {\n        [`${prefix}--slider--disabled`]: disabled\n      }, {\n        [`${prefix}--slider--readonly`]: readOnly\n      });\n      const inputClasses = cx(`${prefix}--text-input`, `${prefix}--slider-text-input`, {\n        [`${prefix}--text-input--light`]: light,\n        [`${prefix}--text-input--invalid`]: !readOnly && isValid === false,\n        [`${prefix}--slider-text-input--hidden`]: hideTextInput,\n        [`${prefix}--slider-text-input--warn`]: !readOnly && warn\n      });\n      return /*#__PURE__*/React__default.createElement(\"div\", {\n        className: cx(`${prefix}--form-item`, className)\n      }, /*#__PURE__*/React__default.createElement(\"label\", {\n        htmlFor: id,\n        className: labelClasses,\n        id: labelId\n      }, labelText), /*#__PURE__*/React__default.createElement(\"div\", {\n        className: `${prefix}--slider-container`\n      }, /*#__PURE__*/React__default.createElement(\"span\", {\n        className: `${prefix}--slider__range-label`\n      }, formatLabel(min, minLabel)), /*#__PURE__*/React__default.createElement(\"div\", _extends({\n        className: sliderClasses,\n        ref: node => {\n          this.element = node;\n        },\n        onMouseDown: this.onDragStart,\n        onTouchStart: this.onDragStart,\n        onKeyDown: this.onKeyDown,\n        role: \"presentation\",\n        tabIndex: -1,\n        \"data-invalid\": !isValid && !readOnly ? true : null\n      }, other), /*#__PURE__*/React__default.createElement(\"div\", {\n        className: `${prefix}--slider__thumb`,\n        role: \"slider\",\n        id: id,\n        tabIndex: !readOnly ? 0 : -1,\n        \"aria-valuemax\": max,\n        \"aria-valuemin\": min,\n        \"aria-valuenow\": value,\n        \"aria-labelledby\": labelId,\n        ref: this.thumbRef\n      }), /*#__PURE__*/React__default.createElement(\"div\", {\n        className: `${prefix}--slider__track`,\n        ref: node => {\n          this.track = node;\n        }\n      }), /*#__PURE__*/React__default.createElement(\"div\", {\n        className: `${prefix}--slider__filled-track`,\n        ref: this.filledTrackRef\n      })), /*#__PURE__*/React__default.createElement(\"span\", {\n        className: `${prefix}--slider__range-label`\n      }, formatLabel(max, maxLabel)), /*#__PURE__*/React__default.createElement(\"input\", {\n        type: hideTextInput ? 'hidden' : inputType,\n        id: `${id}-input-for-slider`,\n        name: name,\n        className: inputClasses,\n        value: value,\n        \"aria-labelledby\": !ariaLabelInput ? labelId : undefined,\n        \"aria-label\": ariaLabelInput ? ariaLabelInput : undefined,\n        disabled: disabled,\n        required: required,\n        min: min,\n        max: max,\n        step: step,\n        onChange: this.onChange,\n        onBlur: this.onBlur,\n        onKeyUp: this.props.onInputKeyUp,\n        \"data-invalid\": !isValid && !readOnly ? true : null,\n        \"aria-invalid\": !isValid && !readOnly ? true : undefined,\n        readOnly: readOnly\n      }), !readOnly && isValid === false && /*#__PURE__*/React__default.createElement(WarningFilled, {\n        className: `${prefix}--slider__invalid-icon`\n      }), !readOnly && warn && isValid && /*#__PURE__*/React__default.createElement(WarningAltFilled, {\n        className: `${prefix}--slider__invalid-icon ${prefix}--slider__invalid-icon--warning`\n      })), !readOnly && isValid === false && /*#__PURE__*/React__default.createElement(\"div\", {\n        className: cx(`${prefix}--slider__validation-msg`, `${prefix}--slider__validation-msg--invalid`, `${prefix}--form-requirement`)\n      }, invalidText), !readOnly && warn && isValid && /*#__PURE__*/React__default.createElement(\"div\", {\n        className: cx(`${prefix}--slider__validation-msg`, `${prefix}--form-requirement`)\n      }, warnText));\n    });\n  }\n}\n_defineProperty(Slider, \"propTypes\", {\n  /**\n   * The `ariaLabel` for the `<input>`.\n   */\n  ariaLabelInput: PropTypes.string,\n  /**\n   * The child nodes.\n   */\n  children: PropTypes.node,\n  /**\n   * The CSS class name for the slider.\n   */\n  className: PropTypes.string,\n  /**\n   * `true` to disable this slider.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * The callback to format the label associated with the minimum/maximum value.\n   */\n  formatLabel: PropTypes.func,\n  /**\n   * `true` to hide the number input box.\n   */\n  hideTextInput: PropTypes.bool,\n  /**\n   * The ID of the `<input>`.\n   */\n  id: PropTypes.string,\n  /**\n   * The `type` attribute of the `<input>`.\n   */\n  inputType: PropTypes.string,\n  /**\n   * `Specify whether the Slider is currently invalid\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the Slider is in an invalid state\n   */\n  invalidText: PropTypes.node,\n  /**\n   * The label for the slider.\n   */\n  labelText: PropTypes.node,\n  /**\n   * `true` to use the light version.\n   */\n  light: deprecate(PropTypes.bool, 'The `light` prop for `Slider` is no longer needed and has ' + 'been deprecated in v11 in favor of the new `Layer` component. It will be moved in the next major release.'),\n  /**\n   * The maximum value.\n   */\n  max: PropTypes.number.isRequired,\n  /**\n   * The label associated with the maximum value.\n   */\n  maxLabel: PropTypes.string,\n  /**\n   * The minimum value.\n   */\n  min: PropTypes.number.isRequired,\n  /**\n   * The label associated with the minimum value.\n   */\n  minLabel: PropTypes.string,\n  /**\n   * The `name` attribute of the `<input>`.\n   */\n  name: PropTypes.string,\n  /**\n   * Provide an optional function to be called when the input element\n   * loses focus\n   */\n  onBlur: PropTypes.func,\n  /**\n   * The callback to get notified of change in value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Provide an optional function to be called when a key is pressed in the number input\n   */\n  onInputKeyUp: PropTypes.func,\n  /**\n   * The callback to get notified of value on handle release.\n   */\n  onRelease: PropTypes.func,\n  /**\n   * Whether the slider should be read-only\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * `true` to specify if the control is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * A value determining how much the value should increase/decrease by moving the thumb by mouse. If a value other than 1 is provided and the input is *not* hidden, the new step requirement should be added to a visible label. Values outside of the `step` increment will be considered invalid.\n   */\n  step: PropTypes.number,\n  /**\n   * A value determining how much the value should increase/decrease by Shift+arrow keys,\n   * which will be `(max - min) / stepMultiplier`.\n   */\n  stepMultiplier: PropTypes.number,\n  /**\n   * The value.\n   */\n  value: PropTypes.number.isRequired,\n  /**\n   * `Specify whether the Slider is in a warn state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the Slider is in an warn state\n   */\n  warnText: PropTypes.node\n});\n_defineProperty(Slider, \"defaultProps\", {\n  hideTextInput: false,\n  step: 1,\n  stepMultiplier: 4,\n  disabled: false,\n  minLabel: '',\n  maxLabel: '',\n  inputType: 'number',\n  readOnly: false\n});\n_defineProperty(Slider, \"contextType\", FeatureFlagContext);\nexport { Slider as default };","map":{"version":3,"names":["defineProperty","_defineProperty","extends","_extends","React__default","PureComponent","PropTypes","cx","throttle","ArrowDown","ArrowLeft","ArrowUp","ArrowRight","matches","PrefixContext","deprecate","FeatureFlagContext","WarningFilled","WarningAltFilled","defaultFormatLabel","value","label","EVENT_THROTTLE","DRAG_EVENT_TYPES","Set","DRAG_STOP_EVENT_TYPES","Slider","constructor","props","left","needsOnRelease","isValid","evt","disabled","readOnly","forEach","element","ownerDocument","addEventListener","onDragStop","onDrag","removeEventListener","setState","clientX","touches","calcValue","_onDrag","leading","trailing","delta","which","step","defaultProps","shiftKey","stepMultiplier","Math","floor","state","target","targetValue","Number","parseFloat","isNaN","useRawValue","validity","checkValidity","onBlur","_ref","range","max","min","boundingRect","getBoundingClientRect","totalSteps","width","right","leftPercent","leftOffset","steppedValue","round","steppedPercent","clamp","thumbRef","createRef","filledTrackRef","componentDidMount","componentDidUpdate","prevProps","prevState","current","style","transform","onChange","onRelease","val","getDerivedStateFromProps","invalid","render","ariaLabelInput","className","hideTextInput","id","inputId","random","toString","substr","minLabel","maxLabel","formatLabel","labelText","_stepMultiplier","inputType","invalidText","required","name","light","warn","warnText","other","createElement","Consumer","prefix","labelId","labelClasses","sliderClasses","inputClasses","htmlFor","ref","node","onMouseDown","onDragStart","onTouchStart","onKeyDown","role","tabIndex","track","type","undefined","onKeyUp","onInputKeyUp","string","children","bool","func","number","isRequired","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/Slider/Slider.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport throttle from 'lodash.throttle';\nimport { ArrowDown, ArrowLeft, ArrowUp, ArrowRight } from '../../internal/keyboard/keys.js';\nimport { matches } from '../../internal/keyboard/match.js';\nimport { PrefixContext } from '../../internal/usePrefix.js';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { FeatureFlagContext } from '../FeatureFlags/index.js';\nimport { WarningFilled, WarningAltFilled } from '@carbon/icons-react';\n\nconst defaultFormatLabel = (value, label) => {\n  return typeof label === 'function' ? label(value) : `${value}${label}`;\n};\n\n/**\n * Minimum time between processed \"drag\" events.\n */\nconst EVENT_THROTTLE = 16; // ms\n\n/**\n * Event types that trigger \"drags\".\n */\nconst DRAG_EVENT_TYPES = new Set(['mousemove', 'touchmove']);\n\n/**\n * Event types that trigger a \"drag\" to stop.\n */\nconst DRAG_STOP_EVENT_TYPES = new Set(['mouseup', 'touchend', 'touchcancel']);\nclass Slider extends PureComponent {\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"state\", {\n      value: this.props.value,\n      left: 0,\n      needsOnRelease: false,\n      isValid: true\n    });\n    _defineProperty(this, \"thumbRef\", void 0);\n    _defineProperty(this, \"filledTrackRef\", void 0);\n    _defineProperty(this, \"element\", null);\n    _defineProperty(this, \"inputId\", '');\n    _defineProperty(this, \"track\", void 0);\n    /**\n     * Sets up \"drag\" event handlers and calls `this.onDrag` in case dragging\n     * started on somewhere other than the thumb without a corresponding \"move\"\n     * event.\n     *\n     * @param {Event} evt The event.\n     */\n    _defineProperty(this, \"onDragStart\", evt => {\n      // Do nothing if component is disabled\n      if (this.props.disabled || this.props.readOnly) {\n        return;\n      }\n\n      // Register drag stop handlers\n      DRAG_STOP_EVENT_TYPES.forEach(element => {\n        this.element?.ownerDocument.addEventListener(element, this.onDragStop);\n      });\n\n      // Register drag handlers\n      DRAG_EVENT_TYPES.forEach(element => {\n        this.element?.ownerDocument.addEventListener(element, this.onDrag);\n      });\n\n      // Perform first recalculation since we probably didn't click exactly in the\n      // middle of the thumb\n      this.onDrag(evt);\n    });\n    /**\n     * Unregisters \"drag\" and \"drag stop\" event handlers and calls sets the flag\n     * indicating that the `onRelease` callback should be called.\n     */\n    _defineProperty(this, \"onDragStop\", () => {\n      // Do nothing if component is disabled\n      if (this.props.disabled || this.props.readOnly) {\n        return;\n      }\n\n      // Remove drag stop handlers\n      DRAG_STOP_EVENT_TYPES.forEach(element => {\n        this.element?.ownerDocument.removeEventListener(element, this.onDragStop);\n      });\n\n      // Remove drag handlers\n      DRAG_EVENT_TYPES.forEach(element => {\n        this.element?.ownerDocument.removeEventListener(element, this.onDrag);\n      });\n\n      // Set needsOnRelease flag so event fires on next update\n      this.setState({\n        needsOnRelease: true,\n        isValid: true\n      });\n    });\n    /**\n     * Handles a \"drag\" event by recalculating the value/thumb and setting state\n     * accordingly.\n     *\n     * @param {Event} evt The event.\n     */\n    _defineProperty(this, \"_onDrag\", evt => {\n      // Do nothing if component is disabled or we have no event\n      if (this.props.disabled || this.props.readOnly || !evt) {\n        return;\n      }\n      let clientX;\n      if ('clientX' in evt) {\n        clientX = evt.clientX;\n      } else if ('touches' in evt && 0 in evt.touches && 'clientX' in evt.touches[0]) {\n        clientX = evt.touches[0].clientX;\n      } else {\n        // Do nothing if we have no valid clientX\n        return;\n      }\n      const {\n        value,\n        left\n      } = this.calcValue({\n        clientX\n      });\n      this.setState({\n        value,\n        left,\n        isValid: true\n      });\n    });\n    /**\n     * Throttles calls to `this._onDrag` by limiting events to being processed at\n     * most once every `EVENT_THROTTLE` milliseconds.\n     */\n    _defineProperty(this, \"onDrag\", throttle(this._onDrag, EVENT_THROTTLE, {\n      leading: true,\n      trailing: false\n    }));\n    /**\n     * Handles a `keydown` event by recalculating the value/thumb and setting\n     * state accordingly.\n     *\n     * @param {Event} evt The event.\n     */\n    _defineProperty(this, \"onKeyDown\", evt => {\n      // Do nothing if component is disabled or we don't have a valid event\n      if (this.props.disabled || this.props.readOnly || !('which' in evt)) {\n        return;\n      }\n      let delta = 0;\n      if (matches(evt.which, [ArrowDown, ArrowLeft])) {\n        delta = -(this.props.step ?? Slider.defaultProps.step);\n      } else if (matches(evt.which, [ArrowUp, ArrowRight])) {\n        delta = this.props.step ?? Slider.defaultProps.step;\n      } else {\n        // Ignore keys we don't want to handle\n        return;\n      }\n\n      // If shift was held, account for the stepMultiplier\n      if (evt.shiftKey) {\n        const stepMultiplier = this.props.stepMultiplier;\n        delta *= stepMultiplier ?? Slider.defaultProps.stepMultiplier;\n      }\n      Math.floor(this.state.value / (this.props.step ?? Slider.defaultProps.step)) * (this.props.step ?? Slider.defaultProps.step);\n      const {\n        value,\n        left\n      } = this.calcValue({\n        // Ensures custom value from `<input>` won't cause skipping next stepping point with right arrow key,\n        // e.g. Typing 51 in `<input>`, moving focus onto the thumb and the hitting right arrow key should yield 52 instead of 54\n        value: (delta > 0 ? Math.floor(this.state.value / (this.props.step ?? Slider.defaultProps.step)) * (this.props.step ?? Slider.defaultProps.step) : this.state.value) + delta\n      });\n      this.setState({\n        value,\n        left,\n        isValid: true\n      });\n    });\n    /**\n     * Provides the two-way binding for the input field of the Slider. It also\n     * Handles a change to the input field by recalculating the value/thumb and\n     * setting state accordingly.\n     *\n     * @param {Event} evt The event.\n     */\n    _defineProperty(this, \"onChange\", evt => {\n      // Do nothing if component is disabled\n      if (this.props.disabled || this.props.readOnly) {\n        return;\n      }\n\n      // Do nothing if we have no valid event, target, or value\n      if (!evt || !('target' in evt) || typeof evt.target.value !== 'string') {\n        return;\n      }\n      const targetValue = Number.parseFloat(evt.target.value);\n\n      // Avoid calling calcValue for invalid numbers, but still update the state\n      if (isNaN(targetValue)) {\n        this.setState({\n          value: evt.target.value\n        });\n      } else {\n        const {\n          value,\n          left\n        } = this.calcValue({\n          value: targetValue,\n          useRawValue: true\n        });\n        this.setState({\n          value,\n          left\n        });\n      }\n    });\n    /**\n     * Checks for validity of input value after clicking out of the input. It also\n     * Handles state change to isValid state.\n     *\n     * @param {Event} evt The event.\n     */\n    _defineProperty(this, \"onBlur\", evt => {\n      // Do nothing if we have no valid event, target, or value\n      if (!evt || !('target' in evt) || typeof evt.target.value !== 'string') {\n        return;\n      }\n\n      // determine validity of input change after clicking out of input\n      const validity = evt.target.checkValidity();\n      const {\n        value\n      } = evt.target;\n      this.setState({\n        isValid: validity\n      });\n      this.props.onBlur?.({\n        value\n      });\n    });\n    /**\n     * Calculates a new Slider `value` and `left` (thumb offset) given a `clientX`,\n     * `value`, or neither of those.\n     * - If `clientX` is specified, it will be used in\n     *   conjunction with the Slider's bounding rectangle to calculate the new\n     *   values.\n     * - If `clientX` is not specified and `value` is, it will be used to\n     *   calculate new values as though it were the current value of the Slider.\n     * - If neither `clientX` nor `value` are specified, `this.props.value` will\n     *   be used to calculate the new values as though it were the current value\n     *   of the Slider.\n     *\n     * @param {object} params\n     * @param {number} [params.clientX] Optional clientX value expected to be from\n     *   an event fired by one of the Slider's `DRAG_EVENT_TYPES` events.\n     * @param {number} [params.value] Optional value use during calculations if\n     *   clientX is not provided.\n     * @param {boolean} [params.useRawValue=false] `true` to use the given value as-is.\n     */\n    _defineProperty(this, \"calcValue\", _ref => {\n      let {\n        clientX,\n        value,\n        useRawValue = false\n      } = _ref;\n      const range = this.props.max - this.props.min;\n      const boundingRect = this.element?.getBoundingClientRect?.();\n      const totalSteps = range / (this.props.step ?? Slider.defaultProps.step);\n      let width = boundingRect ? boundingRect.right - boundingRect.left : 0;\n\n      // Enforce a minimum width of at least 1 for calculations\n      if (width <= 0) {\n        width = 1;\n      }\n\n      // If a clientX is specified, use it to calculate the leftPercent. If not,\n      // use the provided value or state's value to calculate it instead.\n      let leftPercent;\n      if (clientX != null) {\n        const leftOffset = clientX - (boundingRect?.left ?? 0);\n        leftPercent = leftOffset / width;\n      } else {\n        if (value == null) {\n          value = this.state.value;\n        }\n        // prevent NaN calculation if the range is 0\n        leftPercent = range === 0 ? 0 : (value - this.props.min) / range;\n      }\n      if (useRawValue) {\n        // Adjusts only for min/max of thumb position\n        return {\n          value,\n          left: Math.min(1, Math.max(0, leftPercent)) * 100\n        };\n      }\n      let steppedValue = Math.round(leftPercent * totalSteps) * (this.props.step ?? Slider.defaultProps.step);\n      const steppedPercent = this.clamp(steppedValue / range, 0, 1);\n      steppedValue = this.clamp(steppedValue + this.props.min, this.props.min, this.props.max);\n      return {\n        value: steppedValue,\n        left: steppedPercent * 100\n      };\n    });\n    this.thumbRef = /*#__PURE__*/React__default.createRef();\n    this.filledTrackRef = /*#__PURE__*/React__default.createRef();\n  }\n\n  /**\n   * Sets up initial slider position and value in response to component mount.\n   */\n  componentDidMount() {\n    if (this.element) {\n      const {\n        value,\n        left\n      } = this.calcValue({\n        useRawValue: true\n      });\n      this.setState({\n        value,\n        left\n      });\n    }\n  }\n\n  /**\n   * Handles firing of `onChange` and `onRelease` callbacks to parent in\n   * response to state changes.\n   *\n   * @param {*} prevProps prevProps\n   * @param {*} prevState The previous Slider state, used to see if callbacks\n   * should be called.\n   */\n  componentDidUpdate(prevProps, prevState) {\n    // Fire onChange event handler if present, if there's a usable value, and\n    // if the value is different from the last one\n\n    if (this.thumbRef.current) {\n      this.thumbRef.current.style.left = `${this.state.left}%`;\n    }\n    if (this.filledTrackRef.current) {\n      this.filledTrackRef.current.style.transform = `translate(0%, -50%) scaleX(${this.state.left / 100})`;\n    }\n    if (prevState.value !== this.state.value && typeof this.props.onChange === 'function') {\n      this.props.onChange({\n        value: this.state.value\n      });\n    }\n\n    // Fire onRelease event handler if present and if needed\n    if (this.state.needsOnRelease && typeof this.props.onRelease === 'function') {\n      this.props.onRelease({\n        value: this.state.value\n      });\n      // Reset the flag\n      this.setState({\n        needsOnRelease: false\n      });\n    }\n\n    // If value from props does not change, do nothing here.\n    // Otherwise, do prop -> state sync without \"value capping\".\n    if (prevProps.value === this.props.value && prevProps.max === this.props.max && prevProps.min === this.props.min) {\n      return;\n    }\n    this.setState(this.calcValue({\n      value: this.props.value,\n      useRawValue: true\n    }));\n  }\n\n  /**\n   * Synonymous to ECMA2017+ `Math.clamp`.\n   *\n   * @param {number} val\n   * @param {number} min\n   * @param {number} max\n   *\n   * @returns `val` if `max>=val>=min`; `min` if `val<min`; `max` if `val>max`.\n   */\n  clamp(val, min, max) {\n    return Math.max(min, Math.min(val, max));\n  }\n  // syncs invalid state and prop\n  static getDerivedStateFromProps(props, state) {\n    const {\n      isValid\n    } = state;\n    // will override state in favor of invalid prop\n    if (props.invalid === true && isValid === true) {\n      return {\n        isValid: false\n      };\n    }\n    if (props.invalid === false && isValid === false) {\n      return {\n        isValid: true\n      };\n    }\n    //if invalid prop is not provided, state will remain the same\n    return null;\n  }\n  render() {\n    const {\n      ariaLabelInput,\n      className,\n      hideTextInput,\n      id = this.inputId = this.inputId || `__carbon-slider_${Math.random().toString(36).substr(2)}`,\n      min,\n      minLabel,\n      max,\n      maxLabel,\n      formatLabel = defaultFormatLabel,\n      labelText,\n      step,\n      stepMultiplier: _stepMultiplier,\n      inputType,\n      invalidText,\n      required,\n      disabled,\n      name,\n      light,\n      readOnly,\n      warn,\n      warnText,\n      ...other\n    } = this.props;\n    delete other.onRelease;\n    delete other.invalid;\n    const {\n      value,\n      isValid\n    } = this.state;\n    return /*#__PURE__*/React__default.createElement(PrefixContext.Consumer, null, prefix => {\n      const labelId = `${id}-label`;\n      const labelClasses = cx(`${prefix}--label`, {\n        [`${prefix}--label--disabled`]: disabled\n      });\n      const sliderClasses = cx(`${prefix}--slider`, {\n        [`${prefix}--slider--disabled`]: disabled\n      }, {\n        [`${prefix}--slider--readonly`]: readOnly\n      });\n      const inputClasses = cx(`${prefix}--text-input`, `${prefix}--slider-text-input`, {\n        [`${prefix}--text-input--light`]: light,\n        [`${prefix}--text-input--invalid`]: !readOnly && isValid === false,\n        [`${prefix}--slider-text-input--hidden`]: hideTextInput,\n        [`${prefix}--slider-text-input--warn`]: !readOnly && warn\n      });\n      return /*#__PURE__*/React__default.createElement(\"div\", {\n        className: cx(`${prefix}--form-item`, className)\n      }, /*#__PURE__*/React__default.createElement(\"label\", {\n        htmlFor: id,\n        className: labelClasses,\n        id: labelId\n      }, labelText), /*#__PURE__*/React__default.createElement(\"div\", {\n        className: `${prefix}--slider-container`\n      }, /*#__PURE__*/React__default.createElement(\"span\", {\n        className: `${prefix}--slider__range-label`\n      }, formatLabel(min, minLabel)), /*#__PURE__*/React__default.createElement(\"div\", _extends({\n        className: sliderClasses,\n        ref: node => {\n          this.element = node;\n        },\n        onMouseDown: this.onDragStart,\n        onTouchStart: this.onDragStart,\n        onKeyDown: this.onKeyDown,\n        role: \"presentation\",\n        tabIndex: -1,\n        \"data-invalid\": !isValid && !readOnly ? true : null\n      }, other), /*#__PURE__*/React__default.createElement(\"div\", {\n        className: `${prefix}--slider__thumb`,\n        role: \"slider\",\n        id: id,\n        tabIndex: !readOnly ? 0 : -1,\n        \"aria-valuemax\": max,\n        \"aria-valuemin\": min,\n        \"aria-valuenow\": value,\n        \"aria-labelledby\": labelId,\n        ref: this.thumbRef\n      }), /*#__PURE__*/React__default.createElement(\"div\", {\n        className: `${prefix}--slider__track`,\n        ref: node => {\n          this.track = node;\n        }\n      }), /*#__PURE__*/React__default.createElement(\"div\", {\n        className: `${prefix}--slider__filled-track`,\n        ref: this.filledTrackRef\n      })), /*#__PURE__*/React__default.createElement(\"span\", {\n        className: `${prefix}--slider__range-label`\n      }, formatLabel(max, maxLabel)), /*#__PURE__*/React__default.createElement(\"input\", {\n        type: hideTextInput ? 'hidden' : inputType,\n        id: `${id}-input-for-slider`,\n        name: name,\n        className: inputClasses,\n        value: value,\n        \"aria-labelledby\": !ariaLabelInput ? labelId : undefined,\n        \"aria-label\": ariaLabelInput ? ariaLabelInput : undefined,\n        disabled: disabled,\n        required: required,\n        min: min,\n        max: max,\n        step: step,\n        onChange: this.onChange,\n        onBlur: this.onBlur,\n        onKeyUp: this.props.onInputKeyUp,\n        \"data-invalid\": !isValid && !readOnly ? true : null,\n        \"aria-invalid\": !isValid && !readOnly ? true : undefined,\n        readOnly: readOnly\n      }), !readOnly && isValid === false && /*#__PURE__*/React__default.createElement(WarningFilled, {\n        className: `${prefix}--slider__invalid-icon`\n      }), !readOnly && warn && isValid && /*#__PURE__*/React__default.createElement(WarningAltFilled, {\n        className: `${prefix}--slider__invalid-icon ${prefix}--slider__invalid-icon--warning`\n      })), !readOnly && isValid === false && /*#__PURE__*/React__default.createElement(\"div\", {\n        className: cx(`${prefix}--slider__validation-msg`, `${prefix}--slider__validation-msg--invalid`, `${prefix}--form-requirement`)\n      }, invalidText), !readOnly && warn && isValid && /*#__PURE__*/React__default.createElement(\"div\", {\n        className: cx(`${prefix}--slider__validation-msg`, `${prefix}--form-requirement`)\n      }, warnText));\n    });\n  }\n}\n_defineProperty(Slider, \"propTypes\", {\n  /**\n   * The `ariaLabel` for the `<input>`.\n   */\n  ariaLabelInput: PropTypes.string,\n  /**\n   * The child nodes.\n   */\n  children: PropTypes.node,\n  /**\n   * The CSS class name for the slider.\n   */\n  className: PropTypes.string,\n  /**\n   * `true` to disable this slider.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * The callback to format the label associated with the minimum/maximum value.\n   */\n  formatLabel: PropTypes.func,\n  /**\n   * `true` to hide the number input box.\n   */\n  hideTextInput: PropTypes.bool,\n  /**\n   * The ID of the `<input>`.\n   */\n  id: PropTypes.string,\n  /**\n   * The `type` attribute of the `<input>`.\n   */\n  inputType: PropTypes.string,\n  /**\n   * `Specify whether the Slider is currently invalid\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the Slider is in an invalid state\n   */\n  invalidText: PropTypes.node,\n  /**\n   * The label for the slider.\n   */\n  labelText: PropTypes.node,\n  /**\n   * `true` to use the light version.\n   */\n  light: deprecate(PropTypes.bool, 'The `light` prop for `Slider` is no longer needed and has ' + 'been deprecated in v11 in favor of the new `Layer` component. It will be moved in the next major release.'),\n  /**\n   * The maximum value.\n   */\n  max: PropTypes.number.isRequired,\n  /**\n   * The label associated with the maximum value.\n   */\n  maxLabel: PropTypes.string,\n  /**\n   * The minimum value.\n   */\n  min: PropTypes.number.isRequired,\n  /**\n   * The label associated with the minimum value.\n   */\n  minLabel: PropTypes.string,\n  /**\n   * The `name` attribute of the `<input>`.\n   */\n  name: PropTypes.string,\n  /**\n   * Provide an optional function to be called when the input element\n   * loses focus\n   */\n  onBlur: PropTypes.func,\n  /**\n   * The callback to get notified of change in value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Provide an optional function to be called when a key is pressed in the number input\n   */\n  onInputKeyUp: PropTypes.func,\n  /**\n   * The callback to get notified of value on handle release.\n   */\n  onRelease: PropTypes.func,\n  /**\n   * Whether the slider should be read-only\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * `true` to specify if the control is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * A value determining how much the value should increase/decrease by moving the thumb by mouse. If a value other than 1 is provided and the input is *not* hidden, the new step requirement should be added to a visible label. Values outside of the `step` increment will be considered invalid.\n   */\n  step: PropTypes.number,\n  /**\n   * A value determining how much the value should increase/decrease by Shift+arrow keys,\n   * which will be `(max - min) / stepMultiplier`.\n   */\n  stepMultiplier: PropTypes.number,\n  /**\n   * The value.\n   */\n  value: PropTypes.number.isRequired,\n  /**\n   * `Specify whether the Slider is in a warn state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the Slider is in an warn state\n   */\n  warnText: PropTypes.node\n});\n_defineProperty(Slider, \"defaultProps\", {\n  hideTextInput: false,\n  step: 1,\n  stepMultiplier: 4,\n  disabled: false,\n  minLabel: '',\n  maxLabel: '',\n  inputType: 'number',\n  readOnly: false\n});\n_defineProperty(Slider, \"contextType\", FeatureFlagContext);\n\nexport { Slider as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}