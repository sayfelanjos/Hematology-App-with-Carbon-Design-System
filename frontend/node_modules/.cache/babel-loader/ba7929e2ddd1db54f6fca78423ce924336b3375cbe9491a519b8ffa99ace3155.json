{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport cx from 'classnames';\nimport React__default from 'react';\nimport PropTypes from 'prop-types';\nimport { AriaLabelPropType } from '../../prop-types/AriaPropTypes.js';\nimport Button from '../Button/Button.js';\nimport '../Button/Button.Skeleton.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\n/**\n * HeaderGlobalAction is used as a part of the `HeaderGlobalBar`. It is\n * essentially an Icon Button with an additional state to indicate whether it is\n * \"active\". The active state comes from when a user clicks on the global action\n * which should trigger a panel to appear.\n *\n * Note: children passed to this component should be an Icon.\n */\nconst HeaderGlobalAction = /*#__PURE__*/React__default.forwardRef(function HeaderGlobalAction(_ref, ref) {\n  let {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    children,\n    className: customClassName,\n    onClick,\n    isActive,\n    tooltipAlignment,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx({\n    [customClassName]: !!customClassName,\n    [`${prefix}--header__action`]: true,\n    [`${prefix}--header__action--active`]: isActive\n  });\n  const accessibilityLabel = {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy\n  };\n  return /*#__PURE__*/React__default.createElement(Button, _extends({}, rest, accessibilityLabel, {\n    className: className,\n    onClick: onClick,\n    type: \"button\",\n    hasIconOnly: true,\n    iconDescription: ariaLabel,\n    tooltipPosition: \"bottom\",\n    tooltipAlignment: tooltipAlignment,\n    ref: ref\n  }), children);\n});\nHeaderGlobalAction.propTypes = {\n  /**\n   * Required props for the accessibility label of the button\n   */\n  ...AriaLabelPropType,\n  /**\n   * Provide a custom icon for this global action\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Optionally provide a custom class name that is applied to the underlying\n   * button\n   */\n  className: PropTypes.string,\n  /**\n   * Specify whether the action is currently active\n   */\n  isActive: PropTypes.bool,\n  /**\n   * Optionally provide an onClick handler that is called when the underlying\n   * button fires it's onclick event\n   */\n  onClick: PropTypes.func,\n  /**\n   * Specify the alignment of the tooltip to the icon-only button.\n   * Can be one of: start, center, or end.\n   */\n  tooltipAlignment: PropTypes.oneOf(['start', 'center', 'end'])\n};\nHeaderGlobalAction.displayName = 'HeaderGlobalAction';\nvar HeaderGlobalAction$1 = HeaderGlobalAction;\nexport { HeaderGlobalAction$1 as default };","map":{"version":3,"names":["extends","_extends","cx","React__default","PropTypes","AriaLabelPropType","Button","usePrefix","HeaderGlobalAction","forwardRef","_ref","ref","ariaLabel","ariaLabelledBy","children","className","customClassName","onClick","isActive","tooltipAlignment","rest","prefix","accessibilityLabel","createElement","type","hasIconOnly","iconDescription","tooltipPosition","propTypes","node","isRequired","string","bool","func","oneOf","displayName","HeaderGlobalAction$1","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/UIShell/HeaderGlobalAction.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport cx from 'classnames';\nimport React__default from 'react';\nimport PropTypes from 'prop-types';\nimport { AriaLabelPropType } from '../../prop-types/AriaPropTypes.js';\nimport Button from '../Button/Button.js';\nimport '../Button/Button.Skeleton.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\n/**\n * HeaderGlobalAction is used as a part of the `HeaderGlobalBar`. It is\n * essentially an Icon Button with an additional state to indicate whether it is\n * \"active\". The active state comes from when a user clicks on the global action\n * which should trigger a panel to appear.\n *\n * Note: children passed to this component should be an Icon.\n */\nconst HeaderGlobalAction = /*#__PURE__*/React__default.forwardRef(function HeaderGlobalAction(_ref, ref) {\n  let {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    children,\n    className: customClassName,\n    onClick,\n    isActive,\n    tooltipAlignment,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx({\n    [customClassName]: !!customClassName,\n    [`${prefix}--header__action`]: true,\n    [`${prefix}--header__action--active`]: isActive\n  });\n  const accessibilityLabel = {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy\n  };\n  return /*#__PURE__*/React__default.createElement(Button, _extends({}, rest, accessibilityLabel, {\n    className: className,\n    onClick: onClick,\n    type: \"button\",\n    hasIconOnly: true,\n    iconDescription: ariaLabel,\n    tooltipPosition: \"bottom\",\n    tooltipAlignment: tooltipAlignment,\n    ref: ref\n  }), children);\n});\nHeaderGlobalAction.propTypes = {\n  /**\n   * Required props for the accessibility label of the button\n   */\n  ...AriaLabelPropType,\n  /**\n   * Provide a custom icon for this global action\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Optionally provide a custom class name that is applied to the underlying\n   * button\n   */\n  className: PropTypes.string,\n  /**\n   * Specify whether the action is currently active\n   */\n  isActive: PropTypes.bool,\n  /**\n   * Optionally provide an onClick handler that is called when the underlying\n   * button fires it's onclick event\n   */\n  onClick: PropTypes.func,\n  /**\n   * Specify the alignment of the tooltip to the icon-only button.\n   * Can be one of: start, center, or end.\n   */\n  tooltipAlignment: PropTypes.oneOf(['start', 'center', 'end'])\n};\nHeaderGlobalAction.displayName = 'HeaderGlobalAction';\nvar HeaderGlobalAction$1 = HeaderGlobalAction;\n\nexport { HeaderGlobalAction$1 as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,OAAO,IAAIC,QAAQ,QAAQ,6CAA6C;AACjF,OAAOC,EAAE,MAAM,YAAY;AAC3B,OAAOC,cAAc,MAAM,OAAO;AAClC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,iBAAiB,QAAQ,mCAAmC;AACrE,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAO,8BAA8B;AACrC,SAASC,SAAS,QAAQ,6BAA6B;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,aAAaL,cAAc,CAACM,UAAU,CAAC,SAASD,kBAAkBA,CAACE,IAAI,EAAEC,GAAG,EAAE;EACvG,IAAI;IACF,YAAY,EAAEC,SAAS;IACvB,iBAAiB,EAAEC,cAAc;IACjCC,QAAQ;IACRC,SAAS,EAAEC,eAAe;IAC1BC,OAAO;IACPC,QAAQ;IACRC,gBAAgB;IAChB,GAAGC;EACL,CAAC,GAAGV,IAAI;EACR,MAAMW,MAAM,GAAGd,SAAS,CAAC,CAAC;EAC1B,MAAMQ,SAAS,GAAGb,EAAE,CAAC;IACnB,CAACc,eAAe,GAAG,CAAC,CAACA,eAAe;IACpC,CAAE,GAAEK,MAAO,kBAAiB,GAAG,IAAI;IACnC,CAAE,GAAEA,MAAO,0BAAyB,GAAGH;EACzC,CAAC,CAAC;EACF,MAAMI,kBAAkB,GAAG;IACzB,YAAY,EAAEV,SAAS;IACvB,iBAAiB,EAAEC;EACrB,CAAC;EACD,OAAO,aAAaV,cAAc,CAACoB,aAAa,CAACjB,MAAM,EAAEL,QAAQ,CAAC,CAAC,CAAC,EAAEmB,IAAI,EAAEE,kBAAkB,EAAE;IAC9FP,SAAS,EAAEA,SAAS;IACpBE,OAAO,EAAEA,OAAO;IAChBO,IAAI,EAAE,QAAQ;IACdC,WAAW,EAAE,IAAI;IACjBC,eAAe,EAAEd,SAAS;IAC1Be,eAAe,EAAE,QAAQ;IACzBR,gBAAgB,EAAEA,gBAAgB;IAClCR,GAAG,EAAEA;EACP,CAAC,CAAC,EAAEG,QAAQ,CAAC;AACf,CAAC,CAAC;AACFN,kBAAkB,CAACoB,SAAS,GAAG;EAC7B;AACF;AACA;EACE,GAAGvB,iBAAiB;EACpB;AACF;AACA;EACES,QAAQ,EAAEV,SAAS,CAACyB,IAAI,CAACC,UAAU;EACnC;AACF;AACA;AACA;EACEf,SAAS,EAAEX,SAAS,CAAC2B,MAAM;EAC3B;AACF;AACA;EACEb,QAAQ,EAAEd,SAAS,CAAC4B,IAAI;EACxB;AACF;AACA;AACA;EACEf,OAAO,EAAEb,SAAS,CAAC6B,IAAI;EACvB;AACF;AACA;AACA;EACEd,gBAAgB,EAAEf,SAAS,CAAC8B,KAAK,CAAC,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC;AAC9D,CAAC;AACD1B,kBAAkB,CAAC2B,WAAW,GAAG,oBAAoB;AACrD,IAAIC,oBAAoB,GAAG5B,kBAAkB;AAE7C,SAAS4B,oBAAoB,IAAIC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}