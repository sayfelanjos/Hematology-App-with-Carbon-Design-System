{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport cx from 'classnames';\nimport Dropdown from '../Dropdown/Dropdown.js';\nimport '../Dropdown/Dropdown.Skeleton.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { FormContext } from '../FluidForm/FormContext.js';\nconst FluidDropdown = /*#__PURE__*/React__default.forwardRef(function FluidDropdown(_ref, ref) {\n  let {\n    className,\n    isCondensed,\n    ...other\n  } = _ref;\n  const prefix = usePrefix();\n  const classNames = cx(`${prefix}--list-box__wrapper--fluid`, className, {\n    [`${prefix}--list-box__wrapper--fluid--condensed`]: isCondensed\n  });\n  return /*#__PURE__*/React__default.createElement(FormContext.Provider, {\n    value: {\n      isFluid: true\n    }\n  }, /*#__PURE__*/React__default.createElement(Dropdown, _extends({\n    ref: ref,\n    className: classNames\n  }, other)));\n});\nFluidDropdown.propTypes = {\n  /**\n   * Specify an optional className to be applied to the outer FluidForm wrapper\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the direction of the dropdown. Can be either top or bottom.\n   */\n  direction: PropTypes.oneOf(['top', 'bottom']),\n  /**\n   * Specify whether the `<input>` should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify a custom `id` for the `<input>`\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Allow users to pass in an arbitrary item or a string (in case their items are an array of strings)\n   * from their collection that are pre-selected\n   */\n  initialSelectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number]),\n  /**\n   * Specify if the currently selected value is invalid.\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Specify if the `FluidDropdown` should render its menu items in condensed mode\n   */\n  isCondensed: PropTypes.bool,\n  /**\n   * Function to render items as custom components instead of strings.\n   * Defaults to null and is overridden by a getter\n   */\n  itemToElement: PropTypes.func,\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list.\n   */\n  itemToString: PropTypes.func,\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n  /**\n   * Generic `label` that will be used as the textual representation of what\n   * this field is for\n   */\n  label: PropTypes.node.isRequired,\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component what kind of internal state changes are occurring.\n   */\n  onChange: PropTypes.func,\n  /**\n   * An optional callback to render the currently selected item as a react element instead of only\n   * as a string.\n   */\n  renderSelectedItem: PropTypes.func,\n  /**\n   * In the case you want to control the dropdown selection entirely.\n   */\n  selectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number]),\n  /**\n   * Provide the title text that will be read by a screen reader when\n   * visiting this control\n   */\n  titleText: PropTypes.node,\n  /**\n   * Callback function for translating ListBoxMenuIcon SVG title\n   */\n  translateWithId: PropTypes.func,\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\nvar FluidDropdown$1 = FluidDropdown;\nexport { FluidDropdown$1 as default };","map":{"version":3,"names":["extends","_extends","PropTypes","React__default","cx","Dropdown","usePrefix","FormContext","FluidDropdown","forwardRef","_ref","ref","className","isCondensed","other","prefix","classNames","createElement","Provider","value","isFluid","propTypes","string","direction","oneOf","disabled","bool","id","isRequired","initialSelectedItem","oneOfType","object","number","invalid","invalidText","node","itemToElement","func","itemToString","items","array","label","onChange","renderSelectedItem","selectedItem","titleText","translateWithId","warn","warnText","FluidDropdown$1","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/FluidDropdown/FluidDropdown.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport cx from 'classnames';\nimport Dropdown from '../Dropdown/Dropdown.js';\nimport '../Dropdown/Dropdown.Skeleton.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { FormContext } from '../FluidForm/FormContext.js';\n\nconst FluidDropdown = /*#__PURE__*/React__default.forwardRef(function FluidDropdown(_ref, ref) {\n  let {\n    className,\n    isCondensed,\n    ...other\n  } = _ref;\n  const prefix = usePrefix();\n  const classNames = cx(`${prefix}--list-box__wrapper--fluid`, className, {\n    [`${prefix}--list-box__wrapper--fluid--condensed`]: isCondensed\n  });\n  return /*#__PURE__*/React__default.createElement(FormContext.Provider, {\n    value: {\n      isFluid: true\n    }\n  }, /*#__PURE__*/React__default.createElement(Dropdown, _extends({\n    ref: ref,\n    className: classNames\n  }, other)));\n});\nFluidDropdown.propTypes = {\n  /**\n   * Specify an optional className to be applied to the outer FluidForm wrapper\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the direction of the dropdown. Can be either top or bottom.\n   */\n  direction: PropTypes.oneOf(['top', 'bottom']),\n  /**\n   * Specify whether the `<input>` should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify a custom `id` for the `<input>`\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Allow users to pass in an arbitrary item or a string (in case their items are an array of strings)\n   * from their collection that are pre-selected\n   */\n  initialSelectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number]),\n  /**\n   * Specify if the currently selected value is invalid.\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Specify if the `FluidDropdown` should render its menu items in condensed mode\n   */\n  isCondensed: PropTypes.bool,\n  /**\n   * Function to render items as custom components instead of strings.\n   * Defaults to null and is overridden by a getter\n   */\n  itemToElement: PropTypes.func,\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list.\n   */\n  itemToString: PropTypes.func,\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n  /**\n   * Generic `label` that will be used as the textual representation of what\n   * this field is for\n   */\n  label: PropTypes.node.isRequired,\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component what kind of internal state changes are occurring.\n   */\n  onChange: PropTypes.func,\n  /**\n   * An optional callback to render the currently selected item as a react element instead of only\n   * as a string.\n   */\n  renderSelectedItem: PropTypes.func,\n  /**\n   * In the case you want to control the dropdown selection entirely.\n   */\n  selectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number]),\n  /**\n   * Provide the title text that will be read by a screen reader when\n   * visiting this control\n   */\n  titleText: PropTypes.node,\n  /**\n   * Callback function for translating ListBoxMenuIcon SVG title\n   */\n  translateWithId: PropTypes.func,\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\nvar FluidDropdown$1 = FluidDropdown;\n\nexport { FluidDropdown$1 as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}