{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport React__default from 'react';\nimport PropTypes from 'prop-types';\nimport { Close } from '@carbon/icons-react';\nimport { usePrefix } from '../../internal/usePrefix.js';\nvar _Close, _Close2;\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\nconst ListBoxSelection = _ref => {\n  let {\n    clearSelection,\n    selectionCount,\n    translateWithId: t,\n    disabled,\n    onClearSelection,\n    readOnly\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx(`${prefix}--list-box__selection`, {\n    [`${prefix}--tag--filter`]: selectionCount,\n    [`${prefix}--list-box__selection--multi`]: selectionCount\n  });\n  const handleOnClick = event => {\n    event.stopPropagation();\n    if (disabled || readOnly) {\n      return;\n    }\n    clearSelection(event);\n    if (onClearSelection) {\n      onClearSelection(event);\n    }\n  };\n  const description = selectionCount ? t('clear.all') : t('clear.selection');\n  const tagClasses = cx(`${prefix}--tag`, `${prefix}--tag--filter`, `${prefix}--tag--high-contrast`, {\n    [`${prefix}--tag--disabled`]: disabled\n  });\n\n  /* eslint-disable jsx-a11y/click-events-have-key-events */\n  return selectionCount ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: tagClasses\n  }, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: `${prefix}--tag__label`,\n    title: `${selectionCount}`\n  }, selectionCount), /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: -1,\n    className: `${prefix}--tag__close-icon`,\n    onClick: handleOnClick,\n    \"aria-label\": t('clear.all'),\n    title: description,\n    \"aria-disabled\": readOnly ? true : undefined\n  }, _Close || (_Close = /*#__PURE__*/React__default.createElement(Close, null)))) : /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    className: className,\n    tabIndex: -1,\n    onClick: handleOnClick,\n    \"aria-label\": description,\n    title: description\n  }, selectionCount, _Close2 || (_Close2 = /*#__PURE__*/React__default.createElement(Close, null)));\n};\nconst translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\nconst defaultTranslations = {\n  [translationIds['clear.all']]: 'Clear all selected items',\n  [translationIds['clear.selection']]: 'Clear selected item'\n};\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: PropTypes.func.isRequired,\n  /**\n   * Specify whether or not the clear selection element should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify an optional `onClearSelection` handler that is called when the underlying\n   * element is cleared\n   */\n  onClearSelection: PropTypes.func,\n  /**\n   * Whether or not the Dropdown is readonly\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: PropTypes.number,\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxSelection.defaultProps = {\n  translateWithId: id => defaultTranslations[id]\n};\nexport { ListBoxSelection as default, translationIds };","map":{"version":3,"names":["cx","React__default","PropTypes","Close","usePrefix","_Close","_Close2","ListBoxSelection","_ref","clearSelection","selectionCount","translateWithId","t","disabled","onClearSelection","readOnly","prefix","className","handleOnClick","event","stopPropagation","description","tagClasses","createElement","title","role","tabIndex","onClick","undefined","translationIds","defaultTranslations","propTypes","func","isRequired","bool","number","defaultProps","id","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/ListBox/ListBoxSelection.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport React__default from 'react';\nimport PropTypes from 'prop-types';\nimport { Close } from '@carbon/icons-react';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\nvar _Close, _Close2;\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\nconst ListBoxSelection = _ref => {\n  let {\n    clearSelection,\n    selectionCount,\n    translateWithId: t,\n    disabled,\n    onClearSelection,\n    readOnly\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx(`${prefix}--list-box__selection`, {\n    [`${prefix}--tag--filter`]: selectionCount,\n    [`${prefix}--list-box__selection--multi`]: selectionCount\n  });\n  const handleOnClick = event => {\n    event.stopPropagation();\n    if (disabled || readOnly) {\n      return;\n    }\n    clearSelection(event);\n    if (onClearSelection) {\n      onClearSelection(event);\n    }\n  };\n  const description = selectionCount ? t('clear.all') : t('clear.selection');\n  const tagClasses = cx(`${prefix}--tag`, `${prefix}--tag--filter`, `${prefix}--tag--high-contrast`, {\n    [`${prefix}--tag--disabled`]: disabled\n  });\n\n  /* eslint-disable jsx-a11y/click-events-have-key-events */\n  return selectionCount ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: tagClasses\n  }, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: `${prefix}--tag__label`,\n    title: `${selectionCount}`\n  }, selectionCount), /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: -1,\n    className: `${prefix}--tag__close-icon`,\n    onClick: handleOnClick,\n    \"aria-label\": t('clear.all'),\n    title: description,\n    \"aria-disabled\": readOnly ? true : undefined\n  }, _Close || (_Close = /*#__PURE__*/React__default.createElement(Close, null)))) : /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    className: className,\n    tabIndex: -1,\n    onClick: handleOnClick,\n    \"aria-label\": description,\n    title: description\n  }, selectionCount, _Close2 || (_Close2 = /*#__PURE__*/React__default.createElement(Close, null)));\n};\nconst translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\nconst defaultTranslations = {\n  [translationIds['clear.all']]: 'Clear all selected items',\n  [translationIds['clear.selection']]: 'Clear selected item'\n};\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: PropTypes.func.isRequired,\n  /**\n   * Specify whether or not the clear selection element should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify an optional `onClearSelection` handler that is called when the underlying\n   * element is cleared\n   */\n  onClearSelection: PropTypes.func,\n  /**\n   * Whether or not the Dropdown is readonly\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: PropTypes.number,\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxSelection.defaultProps = {\n  translateWithId: id => defaultTranslations[id]\n};\n\nexport { ListBoxSelection as default, translationIds };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}