{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport cx from 'classnames';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { WarningFilled, WarningAltFilled } from '@carbon/icons-react';\nimport setupGetInstanceId from '../../tools/setupGetInstanceId.js';\nconst getInstanceId = setupGetInstanceId();\nfunction CheckboxGroup(_ref) {\n  let {\n    children,\n    className,\n    helperText,\n    invalid,\n    invalidText,\n    legendId,\n    legendText,\n    readOnly,\n    warn,\n    warnText,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const showWarning = !readOnly && !invalid && warn;\n  const showHelper = !invalid && !warn;\n  const checkboxGroupInstanceId = getInstanceId();\n  const helperId = !helperText ? undefined : `checkbox-group-helper-text-${checkboxGroupInstanceId}`;\n  const helper = helperText ? /*#__PURE__*/React__default.createElement(\"div\", {\n    id: helperId,\n    className: `${prefix}--form__helper-text`\n  }, helperText) : null;\n  const fieldsetClasses = cx(`${prefix}--checkbox-group`, className, {\n    [`${prefix}--checkbox-group--readonly`]: readOnly,\n    [`${prefix}--checkbox-group--invalid`]: !readOnly && invalid,\n    [`${prefix}--checkbox-group--warning`]: showWarning\n  });\n  return /*#__PURE__*/React__default.createElement(\"fieldset\", _extends({\n    className: fieldsetClasses,\n    \"data-invalid\": invalid ? true : undefined,\n    \"aria-labelledby\": rest['aria-labelledby'] || legendId,\n    \"aria-readonly\": readOnly,\n    \"aria-describedby\": !invalid && !warn && helper ? helperId : undefined\n  }, rest), /*#__PURE__*/React__default.createElement(\"legend\", {\n    className: `${prefix}--label`,\n    id: legendId || rest['aria-labelledby']\n  }, legendText), children, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--checkbox-group__validation-msg`\n  }, !readOnly && invalid && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(WarningFilled, {\n    className: `${prefix}--checkbox__invalid-icon`\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--form-requirement`\n  }, invalidText)), showWarning && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(WarningAltFilled, {\n    className: `${prefix}--checkbox__invalid-icon ${prefix}--checkbox__invalid-icon--warning`\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--form-requirement`\n  }, warnText))), showHelper && helper);\n}\nCheckboxGroup.propTypes = {\n  /**\n   * Provide the children form elements to be rendered inside of the <fieldset>\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom className to be applied to the containing <fieldset> node\n   */\n  className: PropTypes.string,\n  /**\n   * Provide text for the form group for additional help\n   */\n  helperText: PropTypes.node,\n  /**\n   * Specify whether the form group is currently invalid\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the form group is in an invalid state\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Provide id for the fieldset <legend> which corresponds to the fieldset\n   * `aria-labelledby`\n   */\n  legendId: PropTypes.node,\n  /**\n   * Provide the text to be rendered inside of the fieldset <legend>\n   */\n  legendText: PropTypes.node.isRequired,\n  /**\n   * Whether the CheckboxGroup should be read-only\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Specify whether the form group is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the form group is in warning state\n   */\n  warnText: PropTypes.node\n};\nexport { CheckboxGroup as default };","map":{"version":3,"names":["extends","_extends","PropTypes","React__default","cx","usePrefix","WarningFilled","WarningAltFilled","setupGetInstanceId","getInstanceId","CheckboxGroup","_ref","children","className","helperText","invalid","invalidText","legendId","legendText","readOnly","warn","warnText","rest","prefix","showWarning","showHelper","checkboxGroupInstanceId","helperId","undefined","helper","createElement","id","fieldsetClasses","Fragment","propTypes","node","string","bool","isRequired","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/CheckboxGroup/CheckboxGroup.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport cx from 'classnames';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { WarningFilled, WarningAltFilled } from '@carbon/icons-react';\nimport setupGetInstanceId from '../../tools/setupGetInstanceId.js';\n\nconst getInstanceId = setupGetInstanceId();\nfunction CheckboxGroup(_ref) {\n  let {\n    children,\n    className,\n    helperText,\n    invalid,\n    invalidText,\n    legendId,\n    legendText,\n    readOnly,\n    warn,\n    warnText,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const showWarning = !readOnly && !invalid && warn;\n  const showHelper = !invalid && !warn;\n  const checkboxGroupInstanceId = getInstanceId();\n  const helperId = !helperText ? undefined : `checkbox-group-helper-text-${checkboxGroupInstanceId}`;\n  const helper = helperText ? /*#__PURE__*/React__default.createElement(\"div\", {\n    id: helperId,\n    className: `${prefix}--form__helper-text`\n  }, helperText) : null;\n  const fieldsetClasses = cx(`${prefix}--checkbox-group`, className, {\n    [`${prefix}--checkbox-group--readonly`]: readOnly,\n    [`${prefix}--checkbox-group--invalid`]: !readOnly && invalid,\n    [`${prefix}--checkbox-group--warning`]: showWarning\n  });\n  return /*#__PURE__*/React__default.createElement(\"fieldset\", _extends({\n    className: fieldsetClasses,\n    \"data-invalid\": invalid ? true : undefined,\n    \"aria-labelledby\": rest['aria-labelledby'] || legendId,\n    \"aria-readonly\": readOnly,\n    \"aria-describedby\": !invalid && !warn && helper ? helperId : undefined\n  }, rest), /*#__PURE__*/React__default.createElement(\"legend\", {\n    className: `${prefix}--label`,\n    id: legendId || rest['aria-labelledby']\n  }, legendText), children, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--checkbox-group__validation-msg`\n  }, !readOnly && invalid && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(WarningFilled, {\n    className: `${prefix}--checkbox__invalid-icon`\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--form-requirement`\n  }, invalidText)), showWarning && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(WarningAltFilled, {\n    className: `${prefix}--checkbox__invalid-icon ${prefix}--checkbox__invalid-icon--warning`\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--form-requirement`\n  }, warnText))), showHelper && helper);\n}\nCheckboxGroup.propTypes = {\n  /**\n   * Provide the children form elements to be rendered inside of the <fieldset>\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom className to be applied to the containing <fieldset> node\n   */\n  className: PropTypes.string,\n  /**\n   * Provide text for the form group for additional help\n   */\n  helperText: PropTypes.node,\n  /**\n   * Specify whether the form group is currently invalid\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the form group is in an invalid state\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Provide id for the fieldset <legend> which corresponds to the fieldset\n   * `aria-labelledby`\n   */\n  legendId: PropTypes.node,\n  /**\n   * Provide the text to be rendered inside of the fieldset <legend>\n   */\n  legendText: PropTypes.node.isRequired,\n  /**\n   * Whether the CheckboxGroup should be read-only\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Specify whether the form group is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the form group is in warning state\n   */\n  warnText: PropTypes.node\n};\n\nexport { CheckboxGroup as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,OAAO,IAAIC,QAAQ,QAAQ,6CAA6C;AACjF,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,aAAa,EAAEC,gBAAgB,QAAQ,qBAAqB;AACrE,OAAOC,kBAAkB,MAAM,mCAAmC;AAElE,MAAMC,aAAa,GAAGD,kBAAkB,CAAC,CAAC;AAC1C,SAASE,aAAaA,CAACC,IAAI,EAAE;EAC3B,IAAI;IACFC,QAAQ;IACRC,SAAS;IACTC,UAAU;IACVC,OAAO;IACPC,WAAW;IACXC,QAAQ;IACRC,UAAU;IACVC,QAAQ;IACRC,IAAI;IACJC,QAAQ;IACR,GAAGC;EACL,CAAC,GAAGX,IAAI;EACR,MAAMY,MAAM,GAAGlB,SAAS,CAAC,CAAC;EAC1B,MAAMmB,WAAW,GAAG,CAACL,QAAQ,IAAI,CAACJ,OAAO,IAAIK,IAAI;EACjD,MAAMK,UAAU,GAAG,CAACV,OAAO,IAAI,CAACK,IAAI;EACpC,MAAMM,uBAAuB,GAAGjB,aAAa,CAAC,CAAC;EAC/C,MAAMkB,QAAQ,GAAG,CAACb,UAAU,GAAGc,SAAS,GAAI,8BAA6BF,uBAAwB,EAAC;EAClG,MAAMG,MAAM,GAAGf,UAAU,GAAG,aAAaX,cAAc,CAAC2B,aAAa,CAAC,KAAK,EAAE;IAC3EC,EAAE,EAAEJ,QAAQ;IACZd,SAAS,EAAG,GAAEU,MAAO;EACvB,CAAC,EAAET,UAAU,CAAC,GAAG,IAAI;EACrB,MAAMkB,eAAe,GAAG5B,EAAE,CAAE,GAAEmB,MAAO,kBAAiB,EAAEV,SAAS,EAAE;IACjE,CAAE,GAAEU,MAAO,4BAA2B,GAAGJ,QAAQ;IACjD,CAAE,GAAEI,MAAO,2BAA0B,GAAG,CAACJ,QAAQ,IAAIJ,OAAO;IAC5D,CAAE,GAAEQ,MAAO,2BAA0B,GAAGC;EAC1C,CAAC,CAAC;EACF,OAAO,aAAarB,cAAc,CAAC2B,aAAa,CAAC,UAAU,EAAE7B,QAAQ,CAAC;IACpEY,SAAS,EAAEmB,eAAe;IAC1B,cAAc,EAAEjB,OAAO,GAAG,IAAI,GAAGa,SAAS;IAC1C,iBAAiB,EAAEN,IAAI,CAAC,iBAAiB,CAAC,IAAIL,QAAQ;IACtD,eAAe,EAAEE,QAAQ;IACzB,kBAAkB,EAAE,CAACJ,OAAO,IAAI,CAACK,IAAI,IAAIS,MAAM,GAAGF,QAAQ,GAAGC;EAC/D,CAAC,EAAEN,IAAI,CAAC,EAAE,aAAanB,cAAc,CAAC2B,aAAa,CAAC,QAAQ,EAAE;IAC5DjB,SAAS,EAAG,GAAEU,MAAO,SAAQ;IAC7BQ,EAAE,EAAEd,QAAQ,IAAIK,IAAI,CAAC,iBAAiB;EACxC,CAAC,EAAEJ,UAAU,CAAC,EAAEN,QAAQ,EAAE,aAAaT,cAAc,CAAC2B,aAAa,CAAC,KAAK,EAAE;IACzEjB,SAAS,EAAG,GAAEU,MAAO;EACvB,CAAC,EAAE,CAACJ,QAAQ,IAAIJ,OAAO,IAAI,aAAaZ,cAAc,CAAC2B,aAAa,CAAC3B,cAAc,CAAC8B,QAAQ,EAAE,IAAI,EAAE,aAAa9B,cAAc,CAAC2B,aAAa,CAACxB,aAAa,EAAE;IAC3JO,SAAS,EAAG,GAAEU,MAAO;EACvB,CAAC,CAAC,EAAE,aAAapB,cAAc,CAAC2B,aAAa,CAAC,KAAK,EAAE;IACnDjB,SAAS,EAAG,GAAEU,MAAO;EACvB,CAAC,EAAEP,WAAW,CAAC,CAAC,EAAEQ,WAAW,IAAI,aAAarB,cAAc,CAAC2B,aAAa,CAAC3B,cAAc,CAAC8B,QAAQ,EAAE,IAAI,EAAE,aAAa9B,cAAc,CAAC2B,aAAa,CAACvB,gBAAgB,EAAE;IACpKM,SAAS,EAAG,GAAEU,MAAO,4BAA2BA,MAAO;EACzD,CAAC,CAAC,EAAE,aAAapB,cAAc,CAAC2B,aAAa,CAAC,KAAK,EAAE;IACnDjB,SAAS,EAAG,GAAEU,MAAO;EACvB,CAAC,EAAEF,QAAQ,CAAC,CAAC,CAAC,EAAEI,UAAU,IAAII,MAAM,CAAC;AACvC;AACAnB,aAAa,CAACwB,SAAS,GAAG;EACxB;AACF;AACA;EACEtB,QAAQ,EAAEV,SAAS,CAACiC,IAAI;EACxB;AACF;AACA;EACEtB,SAAS,EAAEX,SAAS,CAACkC,MAAM;EAC3B;AACF;AACA;EACEtB,UAAU,EAAEZ,SAAS,CAACiC,IAAI;EAC1B;AACF;AACA;EACEpB,OAAO,EAAEb,SAAS,CAACmC,IAAI;EACvB;AACF;AACA;EACErB,WAAW,EAAEd,SAAS,CAACiC,IAAI;EAC3B;AACF;AACA;AACA;EACElB,QAAQ,EAAEf,SAAS,CAACiC,IAAI;EACxB;AACF;AACA;EACEjB,UAAU,EAAEhB,SAAS,CAACiC,IAAI,CAACG,UAAU;EACrC;AACF;AACA;EACEnB,QAAQ,EAAEjB,SAAS,CAACmC,IAAI;EACxB;AACF;AACA;EACEjB,IAAI,EAAElB,SAAS,CAACmC,IAAI;EACpB;AACF;AACA;EACEhB,QAAQ,EAAEnB,SAAS,CAACiC;AACtB,CAAC;AAED,SAASzB,aAAa,IAAI6B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}