{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { ChevronRight } from '@carbon/icons-react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default, { useState, useContext } from 'react';\nimport '../Text/index.js';\nimport { useId } from '../../internal/useId.js';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { AccordionContext } from './AccordionProvider.js';\nimport { Text } from '../Text/Text.js';\nimport { match } from '../../internal/keyboard/match.js';\nimport { Escape } from '../../internal/keyboard/keys.js';\nconst defaultRenderToggle = props => /*#__PURE__*/React__default.createElement(\"button\", _extends({\n  type: \"button\"\n}, props));\nfunction AccordionItem(_ref) {\n  let {\n    children,\n    className: customClassName = '',\n    open = false,\n    onHeadingClick,\n    renderExpando = defaultRenderToggle,\n    // remove renderExpando in next major release\n    renderToggle,\n    title = 'title',\n    disabled: controlledDisabled,\n    handleAnimationEnd,\n    ...rest\n  } = _ref;\n  const [isOpen, setIsOpen] = useState(open);\n  const [prevIsOpen, setPrevIsOpen] = useState(open);\n  const [animation, setAnimation] = useState('');\n  const accordionState = useContext(AccordionContext);\n  const disabledIsControlled = typeof controlledDisabled === 'boolean';\n  const disabled = disabledIsControlled ? controlledDisabled : accordionState.disabled;\n  const id = useId('accordion-item');\n  const prefix = usePrefix();\n  const className = cx({\n    [`${prefix}--accordion__item`]: true,\n    [`${prefix}--accordion__item--active`]: isOpen,\n    [`${prefix}--accordion__item--${animation}`]: animation,\n    [`${prefix}--accordion__item--disabled`]: disabled,\n    [customClassName]: !!customClassName\n  });\n  const Toggle = renderToggle || renderExpando; // remove renderExpando in next major release\n\n  if (open !== prevIsOpen) {\n    setAnimation(isOpen ? 'collapsing' : 'expanding');\n    setIsOpen(open);\n    setPrevIsOpen(open);\n  }\n\n  // When the AccordionItem heading is clicked, toggle the open state of the\n  // panel\n  function onClick(event) {\n    const nextValue = !isOpen;\n    setAnimation(isOpen ? 'collapsing' : 'expanding');\n    setIsOpen(nextValue);\n    if (onHeadingClick) {\n      // TODO: normalize signature, potentially:\n      // onHeadingClick :: (event: Event, state: { isOpen: Boolean }) => any\n      onHeadingClick({\n        isOpen: nextValue,\n        event\n      });\n    }\n  }\n\n  // If the AccordionItem is open, and the user hits the ESC key, then close it\n  function onKeyDown(event) {\n    if (isOpen && match(event, Escape)) {\n      setIsOpen(false);\n    }\n  }\n  function onAnimationEnd(event) {\n    if (handleAnimationEnd) {\n      handleAnimationEnd(event);\n    }\n    setAnimation('');\n  }\n  return /*#__PURE__*/React__default.createElement(\"li\", _extends({\n    className: className\n  }, rest, {\n    onAnimationEnd: onAnimationEnd\n  }), /*#__PURE__*/React__default.createElement(Toggle, {\n    disabled: disabled,\n    \"aria-controls\": id,\n    \"aria-expanded\": isOpen,\n    className: `${prefix}--accordion__heading`,\n    onClick: onClick,\n    onKeyDown: onKeyDown,\n    type: \"button\"\n  }, /*#__PURE__*/React__default.createElement(ChevronRight, {\n    className: `${prefix}--accordion__arrow`\n  }), /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--accordion__title`\n  }, title)), /*#__PURE__*/React__default.createElement(\"div\", {\n    id: id,\n    className: `${prefix}--accordion__content`\n  }, children));\n}\nAccordionItem.propTypes = {\n  /**\n   * Provide the contents of your AccordionItem\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify whether an individual AccordionItem should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * The handler of the massaged `click` event.\n   */\n  onClick: PropTypes.func,\n  /**\n   * The handler of the massaged `click` event on the heading.\n   */\n  onHeadingClick: PropTypes.func,\n  /**\n   * `true` to open the expand.\n   */\n  open: PropTypes.bool,\n  /**\n   * The callback function to render the expand button.\n   * Can be a React component class.\n   */\n  renderExpando: deprecate(PropTypes.func, 'The `renderExpando` prop has been deprecated and will be removed in the next major release of Carbon. Use the `renderToggle` prop instead.'),\n  /**\n   * The callback function to render the expand button.\n   * Can be a React component class.\n   */\n  renderToggle: PropTypes.func,\n  /**\n   * The accordion title.\n   */\n  title: PropTypes.node\n};\nexport { AccordionItem as default };","map":{"version":3,"names":["extends","_extends","ChevronRight","cx","PropTypes","React__default","useState","useContext","useId","deprecate","usePrefix","AccordionContext","Text","match","Escape","defaultRenderToggle","props","createElement","type","AccordionItem","_ref","children","className","customClassName","open","onHeadingClick","renderExpando","renderToggle","title","disabled","controlledDisabled","handleAnimationEnd","rest","isOpen","setIsOpen","prevIsOpen","setPrevIsOpen","animation","setAnimation","accordionState","disabledIsControlled","id","prefix","Toggle","onClick","event","nextValue","onKeyDown","onAnimationEnd","as","propTypes","node","string","bool","func","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/Accordion/AccordionItem.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { ChevronRight } from '@carbon/icons-react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default, { useState, useContext } from 'react';\nimport '../Text/index.js';\nimport { useId } from '../../internal/useId.js';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { AccordionContext } from './AccordionProvider.js';\nimport { Text } from '../Text/Text.js';\nimport { match } from '../../internal/keyboard/match.js';\nimport { Escape } from '../../internal/keyboard/keys.js';\n\nconst defaultRenderToggle = props => /*#__PURE__*/React__default.createElement(\"button\", _extends({\n  type: \"button\"\n}, props));\nfunction AccordionItem(_ref) {\n  let {\n    children,\n    className: customClassName = '',\n    open = false,\n    onHeadingClick,\n    renderExpando = defaultRenderToggle,\n    // remove renderExpando in next major release\n    renderToggle,\n    title = 'title',\n    disabled: controlledDisabled,\n    handleAnimationEnd,\n    ...rest\n  } = _ref;\n  const [isOpen, setIsOpen] = useState(open);\n  const [prevIsOpen, setPrevIsOpen] = useState(open);\n  const [animation, setAnimation] = useState('');\n  const accordionState = useContext(AccordionContext);\n  const disabledIsControlled = typeof controlledDisabled === 'boolean';\n  const disabled = disabledIsControlled ? controlledDisabled : accordionState.disabled;\n  const id = useId('accordion-item');\n  const prefix = usePrefix();\n  const className = cx({\n    [`${prefix}--accordion__item`]: true,\n    [`${prefix}--accordion__item--active`]: isOpen,\n    [`${prefix}--accordion__item--${animation}`]: animation,\n    [`${prefix}--accordion__item--disabled`]: disabled,\n    [customClassName]: !!customClassName\n  });\n  const Toggle = renderToggle || renderExpando; // remove renderExpando in next major release\n\n  if (open !== prevIsOpen) {\n    setAnimation(isOpen ? 'collapsing' : 'expanding');\n    setIsOpen(open);\n    setPrevIsOpen(open);\n  }\n\n  // When the AccordionItem heading is clicked, toggle the open state of the\n  // panel\n  function onClick(event) {\n    const nextValue = !isOpen;\n    setAnimation(isOpen ? 'collapsing' : 'expanding');\n    setIsOpen(nextValue);\n    if (onHeadingClick) {\n      // TODO: normalize signature, potentially:\n      // onHeadingClick :: (event: Event, state: { isOpen: Boolean }) => any\n      onHeadingClick({\n        isOpen: nextValue,\n        event\n      });\n    }\n  }\n\n  // If the AccordionItem is open, and the user hits the ESC key, then close it\n  function onKeyDown(event) {\n    if (isOpen && match(event, Escape)) {\n      setIsOpen(false);\n    }\n  }\n  function onAnimationEnd(event) {\n    if (handleAnimationEnd) {\n      handleAnimationEnd(event);\n    }\n    setAnimation('');\n  }\n  return /*#__PURE__*/React__default.createElement(\"li\", _extends({\n    className: className\n  }, rest, {\n    onAnimationEnd: onAnimationEnd\n  }), /*#__PURE__*/React__default.createElement(Toggle, {\n    disabled: disabled,\n    \"aria-controls\": id,\n    \"aria-expanded\": isOpen,\n    className: `${prefix}--accordion__heading`,\n    onClick: onClick,\n    onKeyDown: onKeyDown,\n    type: \"button\"\n  }, /*#__PURE__*/React__default.createElement(ChevronRight, {\n    className: `${prefix}--accordion__arrow`\n  }), /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--accordion__title`\n  }, title)), /*#__PURE__*/React__default.createElement(\"div\", {\n    id: id,\n    className: `${prefix}--accordion__content`\n  }, children));\n}\nAccordionItem.propTypes = {\n  /**\n   * Provide the contents of your AccordionItem\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify whether an individual AccordionItem should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * The handler of the massaged `click` event.\n   */\n  onClick: PropTypes.func,\n  /**\n   * The handler of the massaged `click` event on the heading.\n   */\n  onHeadingClick: PropTypes.func,\n  /**\n   * `true` to open the expand.\n   */\n  open: PropTypes.bool,\n  /**\n   * The callback function to render the expand button.\n   * Can be a React component class.\n   */\n  renderExpando: deprecate(PropTypes.func, 'The `renderExpando` prop has been deprecated and will be removed in the next major release of Carbon. Use the `renderToggle` prop instead.'),\n  /**\n   * The callback function to render the expand button.\n   * Can be a React component class.\n   */\n  renderToggle: PropTypes.func,\n  /**\n   * The accordion title.\n   */\n  title: PropTypes.node\n};\n\nexport { AccordionItem as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}