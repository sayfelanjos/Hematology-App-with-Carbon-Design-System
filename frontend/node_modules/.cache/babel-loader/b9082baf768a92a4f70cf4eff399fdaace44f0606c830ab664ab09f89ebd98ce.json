{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { getCellId } from './cells.js';\nimport { sortStates } from '../state/sortStates.js';\n\n/**\n * Compare two primitives to determine which comes first. Initially, this method\n * will try and figure out if both entries are the same type. If so, it will\n * apply the default sort algorithm for those types. Otherwise, it defaults to a\n * string conversion.\n *\n * @param {number|string} a\n * @param {number|string} b\n * @param {string} locale\n * @returns {number}\n */\nvar compare = function compare(a, b) {\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';\n  // prevent multiple null values in one column (sorting breaks)\n  a === null ? a = '' : null;\n  b === null ? b = '' : null;\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  }\n  if (typeof a === 'string' && typeof b === 'string') {\n    return compareStrings(a, b, locale);\n  }\n\n  // if column has React elements, this should sort by the child string if there is one\n  if (typeof a === 'object' && typeof b === 'object') {\n    if (typeof a.props.children === 'string' && typeof b.props.children === 'string') {\n      return compareStrings(a.props.children, b.props.children, locale);\n    }\n  }\n  return compareStrings('' + a, '' + b, locale);\n};\n\n/**\n * Use the built-in `localeCompare` function available on strings to compare two\n * strings.\n *\n * @param {string} a\n * @param {string} b\n * @param {string} locale\n * @returns {number}\n */\nvar compareStrings = function compareStrings(a, b) {\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';\n  // Only set `numeric: true` if the string only contains numbers\n  // https://stackoverflow.com/a/175787\n  if (!isNaN(a) && !isNaN(parseFloat(a)) && !isNaN(b) && !isNaN(parseFloat(b))) {\n    return a.localeCompare(b, locale, {\n      numeric: true\n    });\n  }\n  return a.localeCompare(b, locale);\n};\n\n/**\n * Default implementation of how we sort rows internally. The idea behind this\n * implementation is to use the given list of row ids to look up the cells in\n * the row by the given key. We then use the value of these cells and pipe them\n * into our local `compareStrings` method, including the locale where\n * appropriate.\n *\n * @param {object} config\n * @param {Array[string]} config.rowIds array of all the row ids in the table\n * @param {object} config.cellsById object containing a mapping of cell id to\n * cell\n * @param {string} config.key the header key that we use to lookup the cell\n * @param {string} [config.locale] optional locale used in the comparison\n * function\n * @param {string} config.sortDirection the sort direction used to determine the\n * order the comparison is called in\n * @param {Function} config.sortRow\n * @returns {Array[string]} array of sorted rowIds\n */\nvar sortRows = function sortRows(_ref) {\n  var rowIds = _ref.rowIds,\n    cellsById = _ref.cellsById,\n    sortDirection = _ref.sortDirection,\n    key = _ref.key,\n    locale = _ref.locale,\n    sortRow = _ref.sortRow;\n  return rowIds.slice().sort(function (a, b) {\n    var cellA = cellsById[getCellId(a, key)];\n    var cellB = cellsById[getCellId(b, key)];\n    return sortRow(cellA && cellA.value, cellB && cellB.value, {\n      key: key,\n      sortDirection: sortDirection,\n      locale: locale,\n      sortStates: sortStates,\n      compare: compare,\n      rowIds: [a, b]\n    });\n  });\n};\nvar defaultSortRow = function defaultSortRow(cellA, cellB, _ref2) {\n  var sortDirection = _ref2.sortDirection,\n    sortStates = _ref2.sortStates,\n    locale = _ref2.locale;\n  if (sortDirection === sortStates.ASC) {\n    return compare(cellA, cellB, locale);\n  }\n  return compare(cellB, cellA, locale);\n};\nexport { compare, compareStrings, defaultSortRow, sortRows };","map":{"version":3,"names":["getCellId","sortStates","compare","a","b","locale","arguments","length","undefined","compareStrings","props","children","isNaN","parseFloat","localeCompare","numeric","sortRows","_ref","rowIds","cellsById","sortDirection","key","sortRow","slice","sort","cellA","cellB","value","defaultSortRow","_ref2","ASC"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/DataTable/tools/sorting.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { getCellId } from './cells.js';\nimport { sortStates } from '../state/sortStates.js';\n\n/**\n * Compare two primitives to determine which comes first. Initially, this method\n * will try and figure out if both entries are the same type. If so, it will\n * apply the default sort algorithm for those types. Otherwise, it defaults to a\n * string conversion.\n *\n * @param {number|string} a\n * @param {number|string} b\n * @param {string} locale\n * @returns {number}\n */\nconst compare = function (a, b) {\n  let locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';\n  // prevent multiple null values in one column (sorting breaks)\n  a === null ? a = '' : null;\n  b === null ? b = '' : null;\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  }\n  if (typeof a === 'string' && typeof b === 'string') {\n    return compareStrings(a, b, locale);\n  }\n\n  // if column has React elements, this should sort by the child string if there is one\n  if (typeof a === 'object' && typeof b === 'object') {\n    if (typeof a.props.children === 'string' && typeof b.props.children === 'string') {\n      return compareStrings(a.props.children, b.props.children, locale);\n    }\n  }\n  return compareStrings('' + a, '' + b, locale);\n};\n\n/**\n * Use the built-in `localeCompare` function available on strings to compare two\n * strings.\n *\n * @param {string} a\n * @param {string} b\n * @param {string} locale\n * @returns {number}\n */\nconst compareStrings = function (a, b) {\n  let locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';\n  // Only set `numeric: true` if the string only contains numbers\n  // https://stackoverflow.com/a/175787\n  if (!isNaN(a) && !isNaN(parseFloat(a)) && !isNaN(b) && !isNaN(parseFloat(b))) {\n    return a.localeCompare(b, locale, {\n      numeric: true\n    });\n  }\n  return a.localeCompare(b, locale);\n};\n\n/**\n * Default implementation of how we sort rows internally. The idea behind this\n * implementation is to use the given list of row ids to look up the cells in\n * the row by the given key. We then use the value of these cells and pipe them\n * into our local `compareStrings` method, including the locale where\n * appropriate.\n *\n * @param {object} config\n * @param {Array[string]} config.rowIds array of all the row ids in the table\n * @param {object} config.cellsById object containing a mapping of cell id to\n * cell\n * @param {string} config.key the header key that we use to lookup the cell\n * @param {string} [config.locale] optional locale used in the comparison\n * function\n * @param {string} config.sortDirection the sort direction used to determine the\n * order the comparison is called in\n * @param {Function} config.sortRow\n * @returns {Array[string]} array of sorted rowIds\n */\nconst sortRows = _ref => {\n  let {\n    rowIds,\n    cellsById,\n    sortDirection,\n    key,\n    locale,\n    sortRow\n  } = _ref;\n  return rowIds.slice().sort((a, b) => {\n    const cellA = cellsById[getCellId(a, key)];\n    const cellB = cellsById[getCellId(b, key)];\n    return sortRow(cellA && cellA.value, cellB && cellB.value, {\n      key,\n      sortDirection,\n      locale,\n      sortStates,\n      compare,\n      rowIds: [a, b]\n    });\n  });\n};\nconst defaultSortRow = (cellA, cellB, _ref2) => {\n  let {\n    sortDirection,\n    sortStates,\n    locale\n  } = _ref2;\n  if (sortDirection === sortStates.ASC) {\n    return compare(cellA, cellB, locale);\n  }\n  return compare(cellB, cellA, locale);\n};\n\nexport { compare, compareStrings, defaultSortRow, sortRows };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}