{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport cx from 'classnames';\nimport InlineCheckbox from '../InlineCheckbox/InlineCheckbox.js';\nimport RadioButton from '../RadioButton/RadioButton.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nconst TableSelectRow = _ref => {\n  let {\n    ariaLabel,\n    checked,\n    id,\n    name,\n    onSelect,\n    onChange,\n    disabled,\n    radio,\n    className\n  } = _ref;\n  const prefix = usePrefix();\n  const selectionInputProps = {\n    id,\n    name,\n    onClick: onSelect,\n    onChange,\n    checked,\n    disabled\n  };\n  const InlineInputComponent = radio ? RadioButton : InlineCheckbox;\n  const tableSelectRowClasses = cx(`${prefix}--table-column-checkbox`, {\n    ...(className && {\n      [className]: true\n    }),\n    [`${prefix}--table-column-radio`]: radio\n  });\n  return /*#__PURE__*/React__default.createElement(\"td\", {\n    className: tableSelectRowClasses\n  }, /*#__PURE__*/React__default.createElement(InlineInputComponent, _extends({}, selectionInputProps, radio && {\n    labelText: ariaLabel,\n    hideLabel: true\n  }, !radio && {\n    ['aria-label']: ariaLabel\n  })));\n};\nTableSelectRow.propTypes = {\n  /**\n   * Specify the aria label for the underlying input control\n   */\n  ariaLabel: PropTypes.string.isRequired,\n  /**\n   * Specify whether this row is selected, or not\n   */\n  checked: PropTypes.bool.isRequired,\n  /**\n   * The CSS class names of the cell that wraps the underlying input control\n   */\n  className: PropTypes.string,\n  /**\n   * Specify whether the control is disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Provide an `id` for the underlying input control\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Provide a `name` for the underlying input control\n   */\n  name: PropTypes.string.isRequired,\n  /**\n   * Provide an optional hook that is called each time the input is updated\n   */\n  onChange: PropTypes.func,\n  /**\n   * Provide a handler to listen to when a user initiates a selection request\n   */\n  onSelect: PropTypes.func.isRequired,\n  /**\n   * Specify whether the control should be a radio button or inline checkbox\n   */\n  radio: PropTypes.bool\n};\nexport { TableSelectRow as default };","map":{"version":3,"names":["extends","_extends","PropTypes","React__default","cx","InlineCheckbox","RadioButton","usePrefix","TableSelectRow","_ref","ariaLabel","checked","id","name","onSelect","onChange","disabled","radio","className","prefix","selectionInputProps","onClick","InlineInputComponent","tableSelectRowClasses","createElement","labelText","hideLabel","propTypes","string","isRequired","bool","func","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/DataTable/TableSelectRow.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport cx from 'classnames';\nimport InlineCheckbox from '../InlineCheckbox/InlineCheckbox.js';\nimport RadioButton from '../RadioButton/RadioButton.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\nconst TableSelectRow = _ref => {\n  let {\n    ariaLabel,\n    checked,\n    id,\n    name,\n    onSelect,\n    onChange,\n    disabled,\n    radio,\n    className\n  } = _ref;\n  const prefix = usePrefix();\n  const selectionInputProps = {\n    id,\n    name,\n    onClick: onSelect,\n    onChange,\n    checked,\n    disabled\n  };\n  const InlineInputComponent = radio ? RadioButton : InlineCheckbox;\n  const tableSelectRowClasses = cx(`${prefix}--table-column-checkbox`, {\n    ...(className && {\n      [className]: true\n    }),\n    [`${prefix}--table-column-radio`]: radio\n  });\n  return /*#__PURE__*/React__default.createElement(\"td\", {\n    className: tableSelectRowClasses\n  }, /*#__PURE__*/React__default.createElement(InlineInputComponent, _extends({}, selectionInputProps, radio && {\n    labelText: ariaLabel,\n    hideLabel: true\n  }, !radio && {\n    ['aria-label']: ariaLabel\n  })));\n};\nTableSelectRow.propTypes = {\n  /**\n   * Specify the aria label for the underlying input control\n   */\n  ariaLabel: PropTypes.string.isRequired,\n  /**\n   * Specify whether this row is selected, or not\n   */\n  checked: PropTypes.bool.isRequired,\n  /**\n   * The CSS class names of the cell that wraps the underlying input control\n   */\n  className: PropTypes.string,\n  /**\n   * Specify whether the control is disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Provide an `id` for the underlying input control\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Provide a `name` for the underlying input control\n   */\n  name: PropTypes.string.isRequired,\n  /**\n   * Provide an optional hook that is called each time the input is updated\n   */\n  onChange: PropTypes.func,\n  /**\n   * Provide a handler to listen to when a user initiates a selection request\n   */\n  onSelect: PropTypes.func.isRequired,\n  /**\n   * Specify whether the control should be a radio button or inline checkbox\n   */\n  radio: PropTypes.bool\n};\n\nexport { TableSelectRow as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,OAAO,IAAIC,QAAQ,QAAQ,6CAA6C;AACjF,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,OAAO;AAClC,OAAOC,EAAE,MAAM,YAAY;AAC3B,OAAOC,cAAc,MAAM,qCAAqC;AAChE,OAAOC,WAAW,MAAM,+BAA+B;AACvD,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,MAAMC,cAAc,GAAGC,IAAI,IAAI;EAC7B,IAAI;IACFC,SAAS;IACTC,OAAO;IACPC,EAAE;IACFC,IAAI;IACJC,QAAQ;IACRC,QAAQ;IACRC,QAAQ;IACRC,KAAK;IACLC;EACF,CAAC,GAAGT,IAAI;EACR,MAAMU,MAAM,GAAGZ,SAAS,CAAC,CAAC;EAC1B,MAAMa,mBAAmB,GAAG;IAC1BR,EAAE;IACFC,IAAI;IACJQ,OAAO,EAAEP,QAAQ;IACjBC,QAAQ;IACRJ,OAAO;IACPK;EACF,CAAC;EACD,MAAMM,oBAAoB,GAAGL,KAAK,GAAGX,WAAW,GAAGD,cAAc;EACjE,MAAMkB,qBAAqB,GAAGnB,EAAE,CAAE,GAAEe,MAAO,yBAAwB,EAAE;IACnE,IAAID,SAAS,IAAI;MACf,CAACA,SAAS,GAAG;IACf,CAAC,CAAC;IACF,CAAE,GAAEC,MAAO,sBAAqB,GAAGF;EACrC,CAAC,CAAC;EACF,OAAO,aAAad,cAAc,CAACqB,aAAa,CAAC,IAAI,EAAE;IACrDN,SAAS,EAAEK;EACb,CAAC,EAAE,aAAapB,cAAc,CAACqB,aAAa,CAACF,oBAAoB,EAAErB,QAAQ,CAAC,CAAC,CAAC,EAAEmB,mBAAmB,EAAEH,KAAK,IAAI;IAC5GQ,SAAS,EAAEf,SAAS;IACpBgB,SAAS,EAAE;EACb,CAAC,EAAE,CAACT,KAAK,IAAI;IACX,CAAC,YAAY,GAAGP;EAClB,CAAC,CAAC,CAAC,CAAC;AACN,CAAC;AACDF,cAAc,CAACmB,SAAS,GAAG;EACzB;AACF;AACA;EACEjB,SAAS,EAAER,SAAS,CAAC0B,MAAM,CAACC,UAAU;EACtC;AACF;AACA;EACElB,OAAO,EAAET,SAAS,CAAC4B,IAAI,CAACD,UAAU;EAClC;AACF;AACA;EACEX,SAAS,EAAEhB,SAAS,CAAC0B,MAAM;EAC3B;AACF;AACA;EACEZ,QAAQ,EAAEd,SAAS,CAAC4B,IAAI;EACxB;AACF;AACA;EACElB,EAAE,EAAEV,SAAS,CAAC0B,MAAM,CAACC,UAAU;EAC/B;AACF;AACA;EACEhB,IAAI,EAAEX,SAAS,CAAC0B,MAAM,CAACC,UAAU;EACjC;AACF;AACA;EACEd,QAAQ,EAAEb,SAAS,CAAC6B,IAAI;EACxB;AACF;AACA;EACEjB,QAAQ,EAAEZ,SAAS,CAAC6B,IAAI,CAACF,UAAU;EACnC;AACF;AACA;EACEZ,KAAK,EAAEf,SAAS,CAAC4B;AACnB,CAAC;AAED,SAAStB,cAAc,IAAIwB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}