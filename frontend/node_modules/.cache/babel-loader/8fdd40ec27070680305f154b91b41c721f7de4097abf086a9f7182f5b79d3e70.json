{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { match } from '../../../internal/keyboard/match.js';\nimport { Enter, ArrowLeft, ArrowRight, ArrowDown } from '../../../internal/keyboard/keys.js';\n\n/**\n * @param {object} config Plugin configuration.\n * @returns {Plugin} A Flatpickr plugin to fix Flatpickr's behavior of certain events.\n */\nvar carbonFlatpickrFixEventsPlugin = function carbonFlatpickrFixEventsPlugin(config) {\n  return function (fp) {\n    var inputFrom = config.inputFrom,\n      inputTo = config.inputTo,\n      lastStartValue = config.lastStartValue;\n    /**\n     * Handles `keydown` event.\n     */\n    var handleKeydown = function handleKeydown(event) {\n      var target = event.target;\n      if (inputFrom === target || inputTo === target) {\n        if (match(event, Enter)) {\n          // Makes sure the hitting enter key picks up pending values of both `<input>`\n          // Workaround for: https://github.com/flatpickr/flatpickr/issues/1942\n          fp.setDate([inputFrom.value, inputTo && inputTo.value], true, fp.config.dateFormat);\n          event.stopPropagation();\n        } else if (match(event, ArrowLeft) || match(event, ArrowRight)) {\n          // Prevents Flatpickr code from canceling the event if left/right arrow keys are hit on `<input>`,\n          // so user can move the keyboard cursor for editing dates\n          // Workaround for: https://github.com/flatpickr/flatpickr/issues/1943\n          event.stopPropagation();\n        } else if (match(event, ArrowDown)) {\n          event.preventDefault();\n          fp.open();\n        }\n      }\n    };\n    var parseDateWithFormat = function parseDateWithFormat(dateStr) {\n      return fp.parseDate(dateStr, fp.config.dateFormat);\n    };\n\n    /**\n     * Handles `blur` event.\n     *\n     * For whatever reason, manual changes within the `to` input do not update the\n     * calendar on blur. If a manual change is made within the input, this block will\n     * set the date again, triggering the calendar to update.\n     */\n    var handleBlur = function handleBlur(event) {\n      var target = event.target;\n\n      // Only fall into this logic if the event is on the `to` input and there is a\n      // `to` date selected\n      if (inputTo === target && fp.selectedDates[1]) {\n        // Using getTime() enables the ability to more readily compare the date currently\n        // selected in the calendar and the date currently in the value of the input\n        var withoutTime = function withoutTime(date) {\n          return date.setHours(0, 0, 0, 0);\n        };\n        var selectedToDate = withoutTime(new Date(fp.selectedDates[1]));\n        var currentValueToDate = withoutTime(parseDateWithFormat(inputTo.value));\n\n        // The date should only be set if both dates are valid dates, and they don't match.\n        // When they don't match, this indiciates that the date selected in the calendar is stale,\n        // and the current value in the input should be set for the calendar to update.\n        if (selectedToDate && currentValueToDate && selectedToDate !== currentValueToDate) {\n          // Update the calendar with the value of the `to` date input\n          fp.setDate([inputFrom.value, inputTo && inputTo.value], true, fp.config.dateFormat);\n        }\n      }\n      var isValidDate = function isValidDate(date) {\n        return date.toString() !== 'Invalid Date';\n      };\n      // save end date in calendar inmediately after it's been written down\n      if (inputTo === target && fp.selectedDates.length === 1 && inputTo.value) {\n        if (isValidDate(parseDateWithFormat(inputTo.value))) {\n          fp.setDate([inputFrom.value, inputTo.value], true, fp.config.dateFormat);\n        }\n      }\n\n      // overriding the flatpickr bug where the startDate gets deleted on blur\n      if (inputTo === target && !inputFrom.value && lastStartValue.current) {\n        if (isValidDate(parseDateWithFormat(lastStartValue.current))) {\n          inputFrom.value = lastStartValue.current;\n          if (inputTo.value) {\n            fp.setDate([inputFrom.value, inputTo.value], true, fp.config.dateFormat);\n          }\n        }\n      }\n    };\n\n    /**\n     * Releases event listeners used in this Flatpickr plugin.\n     */\n    var release = function release() {\n      var inputFrom = config.inputFrom,\n        inputTo = config.inputTo;\n      if (inputTo) {\n        inputTo.removeEventListener('keydown', handleKeydown, true);\n        inputTo.removeEventListener('blur', handleBlur, true);\n      }\n      inputFrom.removeEventListener('keydown', handleKeydown, true);\n    };\n\n    /**\n     * Sets up event listeners used for this Flatpickr plugin.\n     */\n    var init = function init() {\n      release();\n      var inputFrom = config.inputFrom,\n        inputTo = config.inputTo;\n      inputFrom.addEventListener('keydown', handleKeydown, true);\n      if (inputTo) {\n        inputTo.addEventListener('keydown', handleKeydown, true);\n        inputTo.addEventListener('blur', handleBlur, true);\n      }\n    };\n\n    /**\n     * Registers this Flatpickr plugin.\n     */\n    var register = function register() {\n      fp.loadedPlugins.push('carbonFlatpickrFixEventsPlugin');\n    };\n    return {\n      onReady: [register, init],\n      onDestroy: [release]\n    };\n  };\n};\nexport { carbonFlatpickrFixEventsPlugin as default };","map":{"version":3,"names":["match","Enter","ArrowLeft","ArrowRight","ArrowDown","carbonFlatpickrFixEventsPlugin","config","fp","inputFrom","inputTo","lastStartValue","handleKeydown","event","target","setDate","value","dateFormat","stopPropagation","preventDefault","open","parseDateWithFormat","dateStr","parseDate","handleBlur","selectedDates","withoutTime","date","setHours","selectedToDate","Date","currentValueToDate","isValidDate","toString","length","current","release","removeEventListener","init","addEventListener","register","loadedPlugins","push","onReady","onDestroy","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/DatePicker/plugins/fixEventsPlugin.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { match } from '../../../internal/keyboard/match.js';\nimport { Enter, ArrowLeft, ArrowRight, ArrowDown } from '../../../internal/keyboard/keys.js';\n\n/**\n * @param {object} config Plugin configuration.\n * @returns {Plugin} A Flatpickr plugin to fix Flatpickr's behavior of certain events.\n */\nvar carbonFlatpickrFixEventsPlugin = (config => fp => {\n  const {\n    inputFrom,\n    inputTo,\n    lastStartValue\n  } = config;\n  /**\n   * Handles `keydown` event.\n   */\n  const handleKeydown = event => {\n    const {\n      target\n    } = event;\n    if (inputFrom === target || inputTo === target) {\n      if (match(event, Enter)) {\n        // Makes sure the hitting enter key picks up pending values of both `<input>`\n        // Workaround for: https://github.com/flatpickr/flatpickr/issues/1942\n        fp.setDate([inputFrom.value, inputTo && inputTo.value], true, fp.config.dateFormat);\n        event.stopPropagation();\n      } else if (match(event, ArrowLeft) || match(event, ArrowRight)) {\n        // Prevents Flatpickr code from canceling the event if left/right arrow keys are hit on `<input>`,\n        // so user can move the keyboard cursor for editing dates\n        // Workaround for: https://github.com/flatpickr/flatpickr/issues/1943\n        event.stopPropagation();\n      } else if (match(event, ArrowDown)) {\n        event.preventDefault();\n        fp.open();\n      }\n    }\n  };\n  const parseDateWithFormat = dateStr => fp.parseDate(dateStr, fp.config.dateFormat);\n\n  /**\n   * Handles `blur` event.\n   *\n   * For whatever reason, manual changes within the `to` input do not update the\n   * calendar on blur. If a manual change is made within the input, this block will\n   * set the date again, triggering the calendar to update.\n   */\n  const handleBlur = event => {\n    const {\n      target\n    } = event;\n\n    // Only fall into this logic if the event is on the `to` input and there is a\n    // `to` date selected\n    if (inputTo === target && fp.selectedDates[1]) {\n      // Using getTime() enables the ability to more readily compare the date currently\n      // selected in the calendar and the date currently in the value of the input\n      const withoutTime = date => date.setHours(0, 0, 0, 0);\n      const selectedToDate = withoutTime(new Date(fp.selectedDates[1]));\n      const currentValueToDate = withoutTime(parseDateWithFormat(inputTo.value));\n\n      // The date should only be set if both dates are valid dates, and they don't match.\n      // When they don't match, this indiciates that the date selected in the calendar is stale,\n      // and the current value in the input should be set for the calendar to update.\n      if (selectedToDate && currentValueToDate && selectedToDate !== currentValueToDate) {\n        // Update the calendar with the value of the `to` date input\n        fp.setDate([inputFrom.value, inputTo && inputTo.value], true, fp.config.dateFormat);\n      }\n    }\n    const isValidDate = date => date.toString() !== 'Invalid Date';\n    // save end date in calendar inmediately after it's been written down\n    if (inputTo === target && fp.selectedDates.length === 1 && inputTo.value) {\n      if (isValidDate(parseDateWithFormat(inputTo.value))) {\n        fp.setDate([inputFrom.value, inputTo.value], true, fp.config.dateFormat);\n      }\n    }\n\n    // overriding the flatpickr bug where the startDate gets deleted on blur\n    if (inputTo === target && !inputFrom.value && lastStartValue.current) {\n      if (isValidDate(parseDateWithFormat(lastStartValue.current))) {\n        inputFrom.value = lastStartValue.current;\n        if (inputTo.value) {\n          fp.setDate([inputFrom.value, inputTo.value], true, fp.config.dateFormat);\n        }\n      }\n    }\n  };\n\n  /**\n   * Releases event listeners used in this Flatpickr plugin.\n   */\n  const release = () => {\n    const {\n      inputFrom,\n      inputTo\n    } = config;\n    if (inputTo) {\n      inputTo.removeEventListener('keydown', handleKeydown, true);\n      inputTo.removeEventListener('blur', handleBlur, true);\n    }\n    inputFrom.removeEventListener('keydown', handleKeydown, true);\n  };\n\n  /**\n   * Sets up event listeners used for this Flatpickr plugin.\n   */\n  const init = () => {\n    release();\n    const {\n      inputFrom,\n      inputTo\n    } = config;\n    inputFrom.addEventListener('keydown', handleKeydown, true);\n    if (inputTo) {\n      inputTo.addEventListener('keydown', handleKeydown, true);\n      inputTo.addEventListener('blur', handleBlur, true);\n    }\n  };\n\n  /**\n   * Registers this Flatpickr plugin.\n   */\n  const register = () => {\n    fp.loadedPlugins.push('carbonFlatpickrFixEventsPlugin');\n  };\n  return {\n    onReady: [register, init],\n    onDestroy: [release]\n  };\n});\n\nexport { carbonFlatpickrFixEventsPlugin as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}