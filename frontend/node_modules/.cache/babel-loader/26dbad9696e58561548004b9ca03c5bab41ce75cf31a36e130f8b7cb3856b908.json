{"ast":null,"code":"import _defineProperty from \"/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _defaultTranslations;\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport React__default from 'react';\nimport PropTypes from 'prop-types';\nimport { Close } from '@carbon/icons-react';\nimport { usePrefix } from '../../internal/usePrefix.js';\nvar _Close, _Close2;\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\nvar ListBoxSelection = function ListBoxSelection(_ref) {\n  var _cx;\n  var clearSelection = _ref.clearSelection,\n    selectionCount = _ref.selectionCount,\n    t = _ref.translateWithId,\n    disabled = _ref.disabled,\n    onClearSelection = _ref.onClearSelection,\n    readOnly = _ref.readOnly;\n  var prefix = usePrefix();\n  var className = cx(\"\".concat(prefix, \"--list-box__selection\"), (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--tag--filter\"), selectionCount), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__selection--multi\"), selectionCount), _cx));\n  var handleOnClick = function handleOnClick(event) {\n    event.stopPropagation();\n    if (disabled || readOnly) {\n      return;\n    }\n    clearSelection(event);\n    if (onClearSelection) {\n      onClearSelection(event);\n    }\n  };\n  var description = selectionCount ? t('clear.all') : t('clear.selection');\n  var tagClasses = cx(\"\".concat(prefix, \"--tag\"), \"\".concat(prefix, \"--tag--filter\"), \"\".concat(prefix, \"--tag--high-contrast\"), _defineProperty({}, \"\".concat(prefix, \"--tag--disabled\"), disabled));\n\n  /* eslint-disable jsx-a11y/click-events-have-key-events */\n  return selectionCount ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: tagClasses\n  }, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--tag__label\"),\n    title: \"\".concat(selectionCount)\n  }, selectionCount), /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: -1,\n    className: \"\".concat(prefix, \"--tag__close-icon\"),\n    onClick: handleOnClick,\n    \"aria-label\": t('clear.all'),\n    title: description,\n    \"aria-disabled\": readOnly ? true : undefined\n  }, _Close || (_Close = /*#__PURE__*/React__default.createElement(Close, null)))) : /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    className: className,\n    tabIndex: -1,\n    onClick: handleOnClick,\n    \"aria-label\": description,\n    title: description\n  }, selectionCount, _Close2 || (_Close2 = /*#__PURE__*/React__default.createElement(Close, null)));\n};\nvar translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['clear.all'], 'Clear all selected items'), _defineProperty(_defaultTranslations, translationIds['clear.selection'], 'Clear selected item'), _defaultTranslations);\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: PropTypes.func.isRequired,\n  /**\n   * Specify whether or not the clear selection element should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify an optional `onClearSelection` handler that is called when the underlying\n   * element is cleared\n   */\n  onClearSelection: PropTypes.func,\n  /**\n   * Whether or not the Dropdown is readonly\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: PropTypes.number,\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxSelection.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nexport { ListBoxSelection as default, translationIds };","map":{"version":3,"names":["cx","React__default","PropTypes","Close","usePrefix","_Close","_Close2","ListBoxSelection","_ref","_cx","clearSelection","selectionCount","t","translateWithId","disabled","onClearSelection","readOnly","prefix","className","concat","_defineProperty","handleOnClick","event","stopPropagation","description","tagClasses","createElement","title","role","tabIndex","onClick","undefined","translationIds","defaultTranslations","_defaultTranslations","propTypes","func","isRequired","bool","number","defaultProps","id","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/ListBox/ListBoxSelection.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport React__default from 'react';\nimport PropTypes from 'prop-types';\nimport { Close } from '@carbon/icons-react';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\nvar _Close, _Close2;\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\nconst ListBoxSelection = _ref => {\n  let {\n    clearSelection,\n    selectionCount,\n    translateWithId: t,\n    disabled,\n    onClearSelection,\n    readOnly\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx(`${prefix}--list-box__selection`, {\n    [`${prefix}--tag--filter`]: selectionCount,\n    [`${prefix}--list-box__selection--multi`]: selectionCount\n  });\n  const handleOnClick = event => {\n    event.stopPropagation();\n    if (disabled || readOnly) {\n      return;\n    }\n    clearSelection(event);\n    if (onClearSelection) {\n      onClearSelection(event);\n    }\n  };\n  const description = selectionCount ? t('clear.all') : t('clear.selection');\n  const tagClasses = cx(`${prefix}--tag`, `${prefix}--tag--filter`, `${prefix}--tag--high-contrast`, {\n    [`${prefix}--tag--disabled`]: disabled\n  });\n\n  /* eslint-disable jsx-a11y/click-events-have-key-events */\n  return selectionCount ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: tagClasses\n  }, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: `${prefix}--tag__label`,\n    title: `${selectionCount}`\n  }, selectionCount), /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: -1,\n    className: `${prefix}--tag__close-icon`,\n    onClick: handleOnClick,\n    \"aria-label\": t('clear.all'),\n    title: description,\n    \"aria-disabled\": readOnly ? true : undefined\n  }, _Close || (_Close = /*#__PURE__*/React__default.createElement(Close, null)))) : /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    className: className,\n    tabIndex: -1,\n    onClick: handleOnClick,\n    \"aria-label\": description,\n    title: description\n  }, selectionCount, _Close2 || (_Close2 = /*#__PURE__*/React__default.createElement(Close, null)));\n};\nconst translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\nconst defaultTranslations = {\n  [translationIds['clear.all']]: 'Clear all selected items',\n  [translationIds['clear.selection']]: 'Clear selected item'\n};\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: PropTypes.func.isRequired,\n  /**\n   * Specify whether or not the clear selection element should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify an optional `onClearSelection` handler that is called when the underlying\n   * element is cleared\n   */\n  onClearSelection: PropTypes.func,\n  /**\n   * Whether or not the Dropdown is readonly\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: PropTypes.number,\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxSelection.defaultProps = {\n  translateWithId: id => defaultTranslations[id]\n};\n\nexport { ListBoxSelection as default, translationIds };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}