{"ast":null,"code":"import _objectSpread from \"/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport { CARBON_SIDENAV_ITEMS } from './_utils.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nvar SideNavItems = function SideNavItems(_ref) {\n  var customClassName = _ref.className,\n    children = _ref.children,\n    isSideNavExpanded = _ref.isSideNavExpanded;\n  var prefix = usePrefix();\n  var className = cx([\"\".concat(prefix, \"--side-nav__items\")], customClassName);\n  var childrenWithExpandedState = React__default.Children.map(children, function (child) {\n    if ( /*#__PURE__*/React__default.isValidElement(child)) {\n      var _child$type;\n      // avoid spreading `isSideNavExpanded` to non-Carbon UI Shell children\n      return /*#__PURE__*/React__default.cloneElement(child, _objectSpread({}, CARBON_SIDENAV_ITEMS.includes((_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName) ? {\n        isSideNavExpanded: isSideNavExpanded\n      } : {}));\n    }\n  });\n  return /*#__PURE__*/React__default.createElement(\"ul\", {\n    className: className\n  }, childrenWithExpandedState);\n};\nSideNavItems.displayName = 'SideNavItems';\nSideNavItems.propTypes = {\n  /**\n   * Provide a single icon as the child to `SideNavIcon` to render in the\n   * container\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Provide an optional class to be applied to the containing node\n   */\n  className: PropTypes.string,\n  /**\n   * Property to indicate if the side nav container is open (or not). Use to\n   * keep local state and styling in step with the SideNav expansion state.\n   */\n  isSideNavExpanded: PropTypes.bool\n};\nvar SideNavItems$1 = SideNavItems;\nexport { SideNavItems$1 as default };","map":{"version":3,"names":["cx","PropTypes","React__default","CARBON_SIDENAV_ITEMS","usePrefix","SideNavItems","_ref","customClassName","className","children","isSideNavExpanded","prefix","concat","childrenWithExpandedState","Children","map","child","isValidElement","_child$type","cloneElement","_objectSpread","includes","type","displayName","createElement","propTypes","node","isRequired","string","bool","SideNavItems$1","default"],"sources":["/home/saymon/Backup/Portifolio/Hematology-App-with-Carbon-Design-System/frontend/node_modules/@carbon/react/es/components/UIShell/SideNavItems.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport { CARBON_SIDENAV_ITEMS } from './_utils.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\nconst SideNavItems = _ref => {\n  let {\n    className: customClassName,\n    children,\n    isSideNavExpanded\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx([`${prefix}--side-nav__items`], customClassName);\n  const childrenWithExpandedState = React__default.Children.map(children, child => {\n    if ( /*#__PURE__*/React__default.isValidElement(child)) {\n      // avoid spreading `isSideNavExpanded` to non-Carbon UI Shell children\n      return /*#__PURE__*/React__default.cloneElement(child, {\n        ...(CARBON_SIDENAV_ITEMS.includes(child.type?.displayName) ? {\n          isSideNavExpanded\n        } : {})\n      });\n    }\n  });\n  return /*#__PURE__*/React__default.createElement(\"ul\", {\n    className: className\n  }, childrenWithExpandedState);\n};\nSideNavItems.displayName = 'SideNavItems';\nSideNavItems.propTypes = {\n  /**\n   * Provide a single icon as the child to `SideNavIcon` to render in the\n   * container\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Provide an optional class to be applied to the containing node\n   */\n  className: PropTypes.string,\n  /**\n   * Property to indicate if the side nav container is open (or not). Use to\n   * keep local state and styling in step with the SideNav expansion state.\n   */\n  isSideNavExpanded: PropTypes.bool\n};\nvar SideNavItems$1 = SideNavItems;\n\nexport { SideNavItems$1 as default };\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,EAAE,MAAM,YAAY;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,OAAO;AAClC,SAASC,oBAAoB,QAAQ,aAAa;AAClD,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAGC,IAAI,EAAI;EAC3B,IACaC,eAAe,GAGxBD,IAAI,CAHNE,SAAS;IACTC,QAAQ,GAENH,IAAI,CAFNG,QAAQ;IACRC,iBAAiB,GACfJ,IAAI,CADNI,iBAAiB;EAEnB,IAAMC,MAAM,GAAGP,SAAS,CAAC,CAAC;EAC1B,IAAMI,SAAS,GAAGR,EAAE,CAAC,IAAAY,MAAA,CAAID,MAAM,uBAAoB,EAAEJ,eAAe,CAAC;EACrE,IAAMM,yBAAyB,GAAGX,cAAc,CAACY,QAAQ,CAACC,GAAG,CAACN,QAAQ,EAAE,UAAAO,KAAK,EAAI;IAC/E,KAAK,aAAad,cAAc,CAACe,cAAc,CAACD,KAAK,CAAC,EAAE;MAAA,IAAAE,WAAA;MACtD;MACA,OAAO,aAAahB,cAAc,CAACiB,YAAY,CAACH,KAAK,EAAAI,aAAA,KAC/CjB,oBAAoB,CAACkB,QAAQ,EAAAH,WAAA,GAACF,KAAK,CAACM,IAAI,cAAAJ,WAAA,uBAAVA,WAAA,CAAYK,WAAW,CAAC,GAAG;QAC3Db,iBAAiB,EAAjBA;MACF,CAAC,GAAG,CAAC,CAAC,CACP,CAAC;IACJ;EACF,CAAC,CAAC;EACF,OAAO,aAAaR,cAAc,CAACsB,aAAa,CAAC,IAAI,EAAE;IACrDhB,SAAS,EAAEA;EACb,CAAC,EAAEK,yBAAyB,CAAC;AAC/B,CAAC;AACDR,YAAY,CAACkB,WAAW,GAAG,cAAc;AACzClB,YAAY,CAACoB,SAAS,GAAG;EACvB;AACF;AACA;AACA;EACEhB,QAAQ,EAAER,SAAS,CAACyB,IAAI,CAACC,UAAU;EACnC;AACF;AACA;EACEnB,SAAS,EAAEP,SAAS,CAAC2B,MAAM;EAC3B;AACF;AACA;AACA;EACElB,iBAAiB,EAAET,SAAS,CAAC4B;AAC/B,CAAC;AACD,IAAIC,cAAc,GAAGzB,YAAY;AAEjC,SAASyB,cAAc,IAAIC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}